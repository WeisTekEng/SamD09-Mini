
UART_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000604  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000050  20000000  00000604  00010000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003c  20000050  00000654  00010050  2**2
                  ALLOC
  3 .stack        00000404  2000008c  00000690  00010050  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010050  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010078  2**0
                  CONTENTS, READONLY
  6 .debug_info   00007bc1  00000000  00000000  000100d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000806  00000000  00000000  00017c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000003cb  00000000  00000000  0001849a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000000c0  00000000  00000000  00018865  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000080  00000000  00000000  00018925  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000a7fe  00000000  00000000  000189a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000191f  00000000  00000000  000231a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000414c2  00000000  00000000  00024ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000017c  00000000  00000000  00065f84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
   0:	20000490 	.word	0x20000490
   4:	000000f1 	.word	0x000000f1
   8:	000000ed 	.word	0x000000ed
   c:	000000ed 	.word	0x000000ed
	...
  2c:	000000ed 	.word	0x000000ed
	...
  38:	000000ed 	.word	0x000000ed
  3c:	000000ed 	.word	0x000000ed
  40:	000000ed 	.word	0x000000ed
  44:	000000ed 	.word	0x000000ed
  48:	000000ed 	.word	0x000000ed
  4c:	000000ed 	.word	0x000000ed
  50:	000000ed 	.word	0x000000ed
  54:	000000ed 	.word	0x000000ed
  58:	000000ed 	.word	0x000000ed
  5c:	00000000 	.word	0x00000000
  60:	000000ed 	.word	0x000000ed
  64:	000000ed 	.word	0x000000ed
  68:	000000ed 	.word	0x000000ed
	...
  74:	000000ed 	.word	0x000000ed
  78:	000000ed 	.word	0x000000ed
  7c:	000000ed 	.word	0x000000ed
	...
  88:	000000ed 	.word	0x000000ed

0000008c <__do_global_dtors_aux>:
  8c:	b510      	push	{r4, lr}
  8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
  90:	7823      	ldrb	r3, [r4, #0]
  92:	2b00      	cmp	r3, #0
  94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
  96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
  98:	2b00      	cmp	r3, #0
  9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
  9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
  9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
  a0:	bf00      	nop
  a2:	2301      	movs	r3, #1
  a4:	7023      	strb	r3, [r4, #0]
  a6:	bd10      	pop	{r4, pc}
  a8:	20000050 	.word	0x20000050
  ac:	00000000 	.word	0x00000000
  b0:	00000604 	.word	0x00000604

000000b4 <frame_dummy>:
  b4:	b508      	push	{r3, lr}
  b6:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
  b8:	2b00      	cmp	r3, #0
  ba:	d003      	beq.n	c4 <frame_dummy+0x10>
  bc:	4807      	ldr	r0, [pc, #28]	; (dc <frame_dummy+0x28>)
  be:	4908      	ldr	r1, [pc, #32]	; (e0 <frame_dummy+0x2c>)
  c0:	e000      	b.n	c4 <frame_dummy+0x10>
  c2:	bf00      	nop
  c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
  c6:	6803      	ldr	r3, [r0, #0]
  c8:	2b00      	cmp	r3, #0
  ca:	d100      	bne.n	ce <frame_dummy+0x1a>
  cc:	bd08      	pop	{r3, pc}
  ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
  d0:	2b00      	cmp	r3, #0
  d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
  d4:	4798      	blx	r3
  d6:	e7f9      	b.n	cc <frame_dummy+0x18>
  d8:	00000000 	.word	0x00000000
  dc:	00000604 	.word	0x00000604
  e0:	20000054 	.word	0x20000054
  e4:	00000604 	.word	0x00000604
  e8:	00000000 	.word	0x00000000

000000ec <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
  ec:	e7fe      	b.n	ec <Dummy_Handler>
	...

000000f0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  f0:	481c      	ldr	r0, [pc, #112]	; (164 <Reset_Handler+0x74>)
  f2:	491d      	ldr	r1, [pc, #116]	; (168 <Reset_Handler+0x78>)
  f4:	b510      	push	{r4, lr}
  f6:	2300      	movs	r3, #0

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  f8:	4288      	cmp	r0, r1
  fa:	d101      	bne.n	100 <Reset_Handler+0x10>
  fc:	4b1b      	ldr	r3, [pc, #108]	; (16c <Reset_Handler+0x7c>)
  fe:	e007      	b.n	110 <Reset_Handler+0x20>
                for (; pDest < &_erelocate;) {
 100:	4c1b      	ldr	r4, [pc, #108]	; (170 <Reset_Handler+0x80>)
 102:	18ca      	adds	r2, r1, r3
 104:	42a2      	cmp	r2, r4
 106:	d2f9      	bcs.n	fc <Reset_Handler+0xc>
                        *pDest++ = *pSrc++;
 108:	58c4      	ldr	r4, [r0, r3]
 10a:	3304      	adds	r3, #4
 10c:	6014      	str	r4, [r2, #0]
 10e:	e7f7      	b.n	100 <Reset_Handler+0x10>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 110:	4a18      	ldr	r2, [pc, #96]	; (174 <Reset_Handler+0x84>)
 112:	4293      	cmp	r3, r2
 114:	d202      	bcs.n	11c <Reset_Handler+0x2c>
                *pDest++ = 0;
 116:	2200      	movs	r2, #0
 118:	c304      	stmia	r3!, {r2}
 11a:	e7f9      	b.n	110 <Reset_Handler+0x20>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 11c:	21ff      	movs	r1, #255	; 0xff

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 11e:	2002      	movs	r0, #2
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 120:	4b15      	ldr	r3, [pc, #84]	; (178 <Reset_Handler+0x88>)
 122:	4a16      	ldr	r2, [pc, #88]	; (17c <Reset_Handler+0x8c>)
 124:	438b      	bics	r3, r1
 126:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
 128:	2230      	movs	r2, #48	; 0x30
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 12a:	4b15      	ldr	r3, [pc, #84]	; (180 <Reset_Handler+0x90>)
 12c:	6258      	str	r0, [r3, #36]	; 0x24
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
 12e:	4b15      	ldr	r3, [pc, #84]	; (184 <Reset_Handler+0x94>)
 130:	7b99      	ldrb	r1, [r3, #14]
 132:	4391      	bics	r1, r2
 134:	3a10      	subs	r2, #16
 136:	4311      	orrs	r1, r2
 138:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 13a:	7b99      	ldrb	r1, [r3, #14]
 13c:	3a14      	subs	r2, #20
 13e:	4391      	bics	r1, r2
 140:	3a04      	subs	r2, #4
 142:	4311      	orrs	r1, r2
 144:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 146:	2103      	movs	r1, #3
 148:	7b9a      	ldrb	r2, [r3, #14]
 14a:	438a      	bics	r2, r1
 14c:	4302      	orrs	r2, r0
 14e:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
 150:	4a0d      	ldr	r2, [pc, #52]	; (188 <Reset_Handler+0x98>)
 152:	317d      	adds	r1, #125	; 0x7d
 154:	6853      	ldr	r3, [r2, #4]
 156:	430b      	orrs	r3, r1
 158:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
 15a:	4b0c      	ldr	r3, [pc, #48]	; (18c <Reset_Handler+0x9c>)
 15c:	4798      	blx	r3

        /* Branch to main function */
        main();
 15e:	4b0c      	ldr	r3, [pc, #48]	; (190 <Reset_Handler+0xa0>)
 160:	4798      	blx	r3

        /* Infinite loop */
        while (1);
 162:	e7fe      	b.n	162 <Reset_Handler+0x72>
 164:	00000604 	.word	0x00000604
 168:	20000000 	.word	0x20000000
 16c:	20000050 	.word	0x20000050
 170:	20000050 	.word	0x20000050
 174:	2000008c 	.word	0x2000008c
 178:	00000000 	.word	0x00000000
 17c:	e000ed00 	.word	0xe000ed00
 180:	410070fc 	.word	0x410070fc
 184:	41004800 	.word	0x41004800
 188:	41004000 	.word	0x41004000
 18c:	00000599 	.word	0x00000599
 190:	000001d9 	.word	0x000001d9

00000194 <setup_ptrs>:
#endif

void setup_ptrs()
{
	//set values, for flash pointers.
	dest_addr = APP_START;
 194:	2380      	movs	r3, #128	; 0x80
 196:	4a05      	ldr	r2, [pc, #20]	; (1ac <setup_ptrs+0x18>)
 198:	011b      	lsls	r3, r3, #4
 19a:	6013      	str	r3, [r2, #0]
	flash_ptr = APP_START;
 19c:	4a04      	ldr	r2, [pc, #16]	; (1b0 <setup_ptrs+0x1c>)
	app_start_address = *flash_ptr;
 19e:	6819      	ldr	r1, [r3, #0]

void setup_ptrs()
{
	//set values, for flash pointers.
	dest_addr = APP_START;
	flash_ptr = APP_START;
 1a0:	6013      	str	r3, [r2, #0]
	app_start_address = *flash_ptr;
 1a2:	4a04      	ldr	r2, [pc, #16]	; (1b4 <setup_ptrs+0x20>)
 1a4:	6011      	str	r1, [r2, #0]
	flash_byte_ptr = APP_START;
 1a6:	4a04      	ldr	r2, [pc, #16]	; (1b8 <setup_ptrs+0x24>)
 1a8:	6013      	str	r3, [r2, #0]
}
 1aa:	4770      	bx	lr
 1ac:	20000070 	.word	0x20000070
 1b0:	2000007c 	.word	0x2000007c
 1b4:	20000088 	.word	0x20000088
 1b8:	20000084 	.word	0x20000084

000001bc <info>:

#ifdef VERSION
	void info()
	{
 1bc:	b510      	push	{r4, lr}
 1be:	2400      	movs	r4, #0
		uint8_t i;
	
		for(i = 0;i<=78-1;i++)
		{
			uart_write_byte(aVER[i]);
 1c0:	4b03      	ldr	r3, [pc, #12]	; (1d0 <info+0x14>)
 1c2:	5ce0      	ldrb	r0, [r4, r3]
 1c4:	4b03      	ldr	r3, [pc, #12]	; (1d4 <info+0x18>)
 1c6:	3401      	adds	r4, #1
 1c8:	4798      	blx	r3
#ifdef VERSION
	void info()
	{
		uint8_t i;
	
		for(i = 0;i<=78-1;i++)
 1ca:	2c4e      	cmp	r4, #78	; 0x4e
 1cc:	d1f8      	bne.n	1c0 <info+0x4>
		{
			uart_write_byte(aVER[i]);
		}
	}
 1ce:	bd10      	pop	{r4, pc}
 1d0:	20000000 	.word	0x20000000
 1d4:	0000054d 	.word	0x0000054d

000001d8 <main>:
#endif

int main(void)
{  
	
	PORT->Group[BOOT_PORT].OUTSET.reg = (1<<BOOT_PIN);  // set resistor to pull up
 1d8:	2280      	movs	r2, #128	; 0x80
	PORT->Group[BOOT_PORT].PINCFG[BOOT_PIN].reg = PORT_PINCFG_INEN | PORT_PINCFG_PULLEN;
 1da:	2006      	movs	r0, #6
		}
	}
#endif

int main(void)
{  
 1dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	
	PORT->Group[BOOT_PORT].OUTSET.reg = (1<<BOOT_PIN);  // set resistor to pull up
 1de:	4b6b      	ldr	r3, [pc, #428]	; (38c <main+0x1b4>)
	PORT->Group[BOOT_PORT].PINCFG[BOOT_PIN].reg = PORT_PINCFG_INEN | PORT_PINCFG_PULLEN;
 1e0:	496b      	ldr	r1, [pc, #428]	; (390 <main+0x1b8>)
#endif

int main(void)
{  
	
	PORT->Group[BOOT_PORT].OUTSET.reg = (1<<BOOT_PIN);  // set resistor to pull up
 1e2:	0212      	lsls	r2, r2, #8
 1e4:	619a      	str	r2, [r3, #24]
	PORT->Group[BOOT_PORT].PINCFG[BOOT_PIN].reg = PORT_PINCFG_INEN | PORT_PINCFG_PULLEN;
 1e6:	7008      	strb	r0, [r1, #0]
	if ((PORT->Group[BOOT_PORT].IN.reg & (1u << BOOT_PIN)))
 1e8:	6a19      	ldr	r1, [r3, #32]
		}
	}
#endif

int main(void)
{  
 1ea:	b085      	sub	sp, #20
 1ec:	af00      	add	r7, sp, #0
	
	PORT->Group[BOOT_PORT].OUTSET.reg = (1<<BOOT_PIN);  // set resistor to pull up
	PORT->Group[BOOT_PORT].PINCFG[BOOT_PIN].reg = PORT_PINCFG_INEN | PORT_PINCFG_PULLEN;
	if ((PORT->Group[BOOT_PORT].IN.reg & (1u << BOOT_PIN)))
 1ee:	4211      	tst	r1, r2
 1f0:	d00d      	beq.n	20e <main+0x36>
	{
		/*Get the entry point for our new app*/
		app_start_address = *(uint32_t *)(APP_START + 4);
		
		/* Rebase the Stack Pointer */
		__set_MSP(*(uint32_t *) APP_START + 4);
 1f2:	2080      	movs	r0, #128	; 0x80
	PORT->Group[BOOT_PORT].OUTSET.reg = (1<<BOOT_PIN);  // set resistor to pull up
	PORT->Group[BOOT_PORT].PINCFG[BOOT_PIN].reg = PORT_PINCFG_INEN | PORT_PINCFG_PULLEN;
	if ((PORT->Group[BOOT_PORT].IN.reg & (1u << BOOT_PIN)))
	{
		/*Get the entry point for our new app*/
		app_start_address = *(uint32_t *)(APP_START + 4);
 1f4:	4a67      	ldr	r2, [pc, #412]	; (394 <main+0x1bc>)
 1f6:	4968      	ldr	r1, [pc, #416]	; (398 <main+0x1c0>)
 1f8:	6812      	ldr	r2, [r2, #0]
		
		/* Rebase the Stack Pointer */
		__set_MSP(*(uint32_t *) APP_START + 4);
 1fa:	0100      	lsls	r0, r0, #4
	PORT->Group[BOOT_PORT].OUTSET.reg = (1<<BOOT_PIN);  // set resistor to pull up
	PORT->Group[BOOT_PORT].PINCFG[BOOT_PIN].reg = PORT_PINCFG_INEN | PORT_PINCFG_PULLEN;
	if ((PORT->Group[BOOT_PORT].IN.reg & (1u << BOOT_PIN)))
	{
		/*Get the entry point for our new app*/
		app_start_address = *(uint32_t *)(APP_START + 4);
 1fc:	600a      	str	r2, [r1, #0]
		
		/* Rebase the Stack Pointer */
		__set_MSP(*(uint32_t *) APP_START + 4);
 1fe:	6802      	ldr	r2, [r0, #0]
 200:	3204      	adds	r2, #4

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 202:	f382 8808 	msr	MSP, r2

		/* Rebase the vector table base address */
		SCB->VTOR = ((uint32_t) APP_START & SCB_VTOR_TBLOFF_Msk);
 206:	4a65      	ldr	r2, [pc, #404]	; (39c <main+0x1c4>)
 208:	6090      	str	r0, [r2, #8]

		/* Jump to application Reset Handler in the application */
		asm("bx %0"::"r"(app_start_address));
 20a:	680a      	ldr	r2, [r1, #0]
 20c:	4710      	bx	r2
	}
	/* Flash page size is 64 bytes */
	uint16_t PAGE_SIZE = (8 << NVMCTRL->PARAM.bit.PSZ);	//used to read and write to flash.
 20e:	2208      	movs	r2, #8
 210:	4963      	ldr	r1, [pc, #396]	; (3a0 <main+0x1c8>)
	uint8_t page_buffer[PAGE_SIZE];
 212:	4668      	mov	r0, sp

		/* Jump to application Reset Handler in the application */
		asm("bx %0"::"r"(app_start_address));
	}
	/* Flash page size is 64 bytes */
	uint16_t PAGE_SIZE = (8 << NVMCTRL->PARAM.bit.PSZ);	//used to read and write to flash.
 214:	688c      	ldr	r4, [r1, #8]
 216:	0364      	lsls	r4, r4, #13
 218:	0f64      	lsrs	r4, r4, #29
 21a:	40a2      	lsls	r2, r4
 21c:	1c14      	adds	r4, r2, #0
 21e:	b292      	uxth	r2, r2
 220:	60ba      	str	r2, [r7, #8]
	uint8_t page_buffer[PAGE_SIZE];
 222:	1de2      	adds	r2, r4, #7
 224:	08d2      	lsrs	r2, r2, #3
 226:	00d2      	lsls	r2, r2, #3
 228:	1a82      	subs	r2, r0, r2
	
	/*set PA14 LED to output and turn on, now we know we are in bootloader mode.*/
	REG_PORT_DIR0 |= (1 << 14); //boot en led set as output.
 22a:	2080      	movs	r0, #128	; 0x80
		/* Jump to application Reset Handler in the application */
		asm("bx %0"::"r"(app_start_address));
	}
	/* Flash page size is 64 bytes */
	uint16_t PAGE_SIZE = (8 << NVMCTRL->PARAM.bit.PSZ);	//used to read and write to flash.
	uint8_t page_buffer[PAGE_SIZE];
 22c:	60fa      	str	r2, [r7, #12]
 22e:	4695      	mov	sp, r2
	
	/*set PA14 LED to output and turn on, now we know we are in bootloader mode.*/
	REG_PORT_DIR0 |= (1 << 14); //boot en led set as output.
 230:	681a      	ldr	r2, [r3, #0]
 232:	01c0      	lsls	r0, r0, #7
 234:	4302      	orrs	r2, r0
 236:	601a      	str	r2, [r3, #0]
	REG_PORT_OUT0 |= (1 << 14); //Turn boot en led on.
 238:	4a5a      	ldr	r2, [pc, #360]	; (3a4 <main+0x1cc>)
 23a:	6813      	ldr	r3, [r2, #0]
 23c:	4303      	orrs	r3, r0
 23e:	6013      	str	r3, [r2, #0]
	
	/* Make CPU to run at 8MHz by clearing prescalar bits */ 
    SYSCTRL->OSC8M.bit.PRESC = 0;
 240:	4a59      	ldr	r2, [pc, #356]	; (3a8 <main+0x1d0>)
 242:	4b5a      	ldr	r3, [pc, #360]	; (3ac <main+0x1d4>)
 244:	6a10      	ldr	r0, [r2, #32]
 246:	4003      	ands	r3, r0
 248:	6213      	str	r3, [r2, #32]
	NVMCTRL->CTRLB.bit.CACHEDIS = 1;
 24a:	2280      	movs	r2, #128	; 0x80
 24c:	684b      	ldr	r3, [r1, #4]
 24e:	02d2      	lsls	r2, r2, #11
 250:	4313      	orrs	r3, r2
 252:	604b      	str	r3, [r1, #4]

	/* Config Usart */
	UART_sercom_init();
 254:	4b56      	ldr	r3, [pc, #344]	; (3b0 <main+0x1d8>)
 256:	4798      	blx	r3

    while (1) 
    {
        data_8 = uart_read_byte();
 258:	4d56      	ldr	r5, [pc, #344]	; (3b4 <main+0x1dc>)
 25a:	47a8      	blx	r5
 25c:	4b56      	ldr	r3, [pc, #344]	; (3b8 <main+0x1e0>)
 25e:	607d      	str	r5, [r7, #4]
 260:	7018      	strb	r0, [r3, #0]

		if (data_8 == '#')
 262:	2823      	cmp	r0, #35	; 0x23
 264:	d10c      	bne.n	280 <main+0xa8>
		{
			#ifdef NEW_FRONT_END
				if(!specialTalk)
 266:	4b55      	ldr	r3, [pc, #340]	; (3bc <main+0x1e4>)
 268:	4d55      	ldr	r5, [pc, #340]	; (3c0 <main+0x1e8>)
 26a:	781b      	ldrb	r3, [r3, #0]
 26c:	2b00      	cmp	r3, #0
 26e:	d102      	bne.n	276 <main+0x9e>
				{
					sendConfirm();
 270:	4b54      	ldr	r3, [pc, #336]	; (3c4 <main+0x1ec>)
 272:	4798      	blx	r3
 274:	e001      	b.n	27a <main+0xa2>
				}
				else
				{
					uart_write_byte('!');
 276:	2021      	movs	r0, #33	; 0x21
 278:	47a8      	blx	r5
				}
			#else
				sendConfirm();
			#endif
			
			uart_write_byte((uint8_t)APP_SIZE);	
 27a:	200d      	movs	r0, #13
 27c:	47a8      	blx	r5
 27e:	e7eb      	b.n	258 <main+0x80>
		}
		else if (data_8 == 'e')
 280:	2865      	cmp	r0, #101	; 0x65
 282:	d118      	bne.n	2b6 <main+0xde>
		{
			/*erase NVM from 0x800 (starting point) to top of NVM*/
			//erase from 0x800 to the top of nvm.
			for(i = APP_START; i < FLASH_SIZE; i = i + 256)
 284:	2380      	movs	r3, #128	; 0x80
 286:	4d50      	ldr	r5, [pc, #320]	; (3c8 <main+0x1f0>)
 288:	011b      	lsls	r3, r3, #4
 28a:	602b      	str	r3, [r5, #0]
 28c:	6828      	ldr	r0, [r5, #0]
 28e:	4b4f      	ldr	r3, [pc, #316]	; (3cc <main+0x1f4>)
 290:	4298      	cmp	r0, r3
 292:	d806      	bhi.n	2a2 <main+0xca>
			{
				nvm_erase_row(i,PAGE_SIZE);
 294:	4b4e      	ldr	r3, [pc, #312]	; (3d0 <main+0x1f8>)
 296:	1c21      	adds	r1, r4, #0
 298:	4798      	blx	r3
		}
		else if (data_8 == 'e')
		{
			/*erase NVM from 0x800 (starting point) to top of NVM*/
			//erase from 0x800 to the top of nvm.
			for(i = APP_START; i < FLASH_SIZE; i = i + 256)
 29a:	682b      	ldr	r3, [r5, #0]
 29c:	3301      	adds	r3, #1
 29e:	33ff      	adds	r3, #255	; 0xff
 2a0:	e7f3      	b.n	28a <main+0xb2>
			{
				nvm_erase_row(i,PAGE_SIZE);
			}
			#ifdef NEW_FRONT_END
				if(!specialTalk)
 2a2:	4b46      	ldr	r3, [pc, #280]	; (3bc <main+0x1e4>)
 2a4:	781b      	ldrb	r3, [r3, #0]
 2a6:	2b00      	cmp	r3, #0
 2a8:	d101      	bne.n	2ae <main+0xd6>
				{
					sendConfirm();
 2aa:	4b46      	ldr	r3, [pc, #280]	; (3c4 <main+0x1ec>)
 2ac:	e7d3      	b.n	256 <main+0x7e>
				}
				else
				{
					uart_write_byte('`');
 2ae:	2060      	movs	r0, #96	; 0x60
 2b0:	4b43      	ldr	r3, [pc, #268]	; (3c0 <main+0x1e8>)
 2b2:	4798      	blx	r3
 2b4:	e7d0      	b.n	258 <main+0x80>
			#else
				sendConfirm();
			#endif
			
		}
		else if (data_8 == 'p')
 2b6:	2870      	cmp	r0, #112	; 0x70
 2b8:	d126      	bne.n	308 <main+0x130>
		{
			#ifdef NEW_FRONT_END
				if(!specialTalk)
 2ba:	4b40      	ldr	r3, [pc, #256]	; (3bc <main+0x1e4>)
 2bc:	781b      	ldrb	r3, [r3, #0]
 2be:	2b00      	cmp	r3, #0
 2c0:	d101      	bne.n	2c6 <main+0xee>
				{
					sendConfirm();
 2c2:	4b40      	ldr	r3, [pc, #256]	; (3c4 <main+0x1ec>)
 2c4:	4798      	blx	r3
				}
			#else
				sendConfirm();
			#endif
			
			for (i = 0; i < PAGE_SIZE; i++)
 2c6:	2300      	movs	r3, #0
 2c8:	4d3f      	ldr	r5, [pc, #252]	; (3c8 <main+0x1f0>)
 2ca:	602b      	str	r3, [r5, #0]
 2cc:	682e      	ldr	r6, [r5, #0]
 2ce:	42a6      	cmp	r6, r4
 2d0:	d206      	bcs.n	2e0 <main+0x108>
			{
				page_buffer[i] = uart_read_byte();
 2d2:	687b      	ldr	r3, [r7, #4]
 2d4:	4798      	blx	r3
 2d6:	68fb      	ldr	r3, [r7, #12]
 2d8:	5598      	strb	r0, [r3, r6]
				}
			#else
				sendConfirm();
			#endif
			
			for (i = 0; i < PAGE_SIZE; i++)
 2da:	682b      	ldr	r3, [r5, #0]
 2dc:	3301      	adds	r3, #1
 2de:	e7f4      	b.n	2ca <main+0xf2>
			{
				page_buffer[i] = uart_read_byte();
			}
			nvm_write_buffer(dest_addr, page_buffer, PAGE_SIZE);
 2e0:	4d3c      	ldr	r5, [pc, #240]	; (3d4 <main+0x1fc>)
 2e2:	4b3d      	ldr	r3, [pc, #244]	; (3d8 <main+0x200>)
 2e4:	6828      	ldr	r0, [r5, #0]
 2e6:	68f9      	ldr	r1, [r7, #12]
 2e8:	68ba      	ldr	r2, [r7, #8]
 2ea:	4798      	blx	r3
			dest_addr += PAGE_SIZE;
 2ec:	682b      	ldr	r3, [r5, #0]
 2ee:	18e3      	adds	r3, r4, r3
 2f0:	602b      	str	r3, [r5, #0]
			
			#ifdef NEW_FRONT_END
				if(!specialTalk)
 2f2:	4b32      	ldr	r3, [pc, #200]	; (3bc <main+0x1e4>)
 2f4:	781b      	ldrb	r3, [r3, #0]
 2f6:	2b00      	cmp	r3, #0
 2f8:	d102      	bne.n	300 <main+0x128>
				{
					sendConfirm();
 2fa:	4b32      	ldr	r3, [pc, #200]	; (3c4 <main+0x1ec>)
 2fc:	4798      	blx	r3
 2fe:	e01b      	b.n	338 <main+0x160>
				}
				else
				{
					uart_write_byte('%');
 300:	2025      	movs	r0, #37	; 0x25
 302:	4b2f      	ldr	r3, [pc, #188]	; (3c0 <main+0x1e8>)
 304:	4798      	blx	r3
 306:	e017      	b.n	338 <main+0x160>
			#endif
			
			REG_PORT_OUTTGL0 = (1 << 14); //blinks light

		}
		else if (data_8 == 'v')
 308:	2876      	cmp	r0, #118	; 0x76
 30a:	d11a      	bne.n	342 <main+0x16a>
		{
			#ifdef NEW_FRONT_END
				if(!specialTalk)
 30c:	4b2b      	ldr	r3, [pc, #172]	; (3bc <main+0x1e4>)
 30e:	781b      	ldrb	r3, [r3, #0]
 310:	2b00      	cmp	r3, #0
 312:	d101      	bne.n	318 <main+0x140>
				{
					sendConfirm();
 314:	4b2b      	ldr	r3, [pc, #172]	; (3c4 <main+0x1ec>)
 316:	4798      	blx	r3
				}
			#else
				sendConfirm();
			#endif
			
			for (i = 0; i < (PAGE_SIZE); i++)
 318:	2300      	movs	r3, #0
 31a:	4d2b      	ldr	r5, [pc, #172]	; (3c8 <main+0x1f0>)
 31c:	602b      	str	r3, [r5, #0]
 31e:	682b      	ldr	r3, [r5, #0]
 320:	42a3      	cmp	r3, r4
 322:	d209      	bcs.n	338 <main+0x160>
			{	
				//++ after pointer post increments by 1
				uart_write_byte(* flash_byte_ptr++);
 324:	4a2d      	ldr	r2, [pc, #180]	; (3dc <main+0x204>)
 326:	6813      	ldr	r3, [r2, #0]
 328:	1c59      	adds	r1, r3, #1
 32a:	6011      	str	r1, [r2, #0]
 32c:	7818      	ldrb	r0, [r3, #0]
 32e:	4b24      	ldr	r3, [pc, #144]	; (3c0 <main+0x1e8>)
 330:	4798      	blx	r3
				}
			#else
				sendConfirm();
			#endif
			
			for (i = 0; i < (PAGE_SIZE); i++)
 332:	682b      	ldr	r3, [r5, #0]
 334:	3301      	adds	r3, #1
 336:	e7f1      	b.n	31c <main+0x144>
			{	
				//++ after pointer post increments by 1
				uart_write_byte(* flash_byte_ptr++);
				
			}
			REG_PORT_OUTTGL0 = (1 << 14); //blinks light
 338:	2280      	movs	r2, #128	; 0x80
 33a:	4b29      	ldr	r3, [pc, #164]	; (3e0 <main+0x208>)
 33c:	01d2      	lsls	r2, r2, #7
 33e:	601a      	str	r2, [r3, #0]
 340:	e78a      	b.n	258 <main+0x80>
		}
		else if (data_8 == 'm')
		{
			setup_ptrs();
 342:	4b28      	ldr	r3, [pc, #160]	; (3e4 <main+0x20c>)
				uart_write_byte(* flash_byte_ptr++);
				
			}
			REG_PORT_OUTTGL0 = (1 << 14); //blinks light
		}
		else if (data_8 == 'm')
 344:	286d      	cmp	r0, #109	; 0x6d
 346:	d002      	beq.n	34e <main+0x176>
		{
			setup_ptrs();
		}
		#ifdef VERSION
			else if (data_8 == 'i')
 348:	2869      	cmp	r0, #105	; 0x69
 34a:	d102      	bne.n	352 <main+0x17a>
			{
				info();
 34c:	4b26      	ldr	r3, [pc, #152]	; (3e8 <main+0x210>)
 34e:	4798      	blx	r3
 350:	e782      	b.n	258 <main+0x80>
			}
		#endif
		#ifdef NEW_FRONT_END
			else if(data_8 == '~')
 352:	287e      	cmp	r0, #126	; 0x7e
 354:	d103      	bne.n	35e <main+0x186>
			{
				//special talk.
				specialTalk = 1;
 356:	2201      	movs	r2, #1
 358:	4b18      	ldr	r3, [pc, #96]	; (3bc <main+0x1e4>)
 35a:	701a      	strb	r2, [r3, #0]
 35c:	e77c      	b.n	258 <main+0x80>
			}
		#endif
		else if(data_8 == '^')
 35e:	285e      	cmp	r0, #94	; 0x5e
 360:	d000      	beq.n	364 <main+0x18c>
 362:	e779      	b.n	258 <main+0x80>
		{
			uint8_t next = 8;
			//Testing device ID over UART.
			for(i = 0;i < 4;i++)
 364:	2300      	movs	r3, #0
				specialTalk = 1;
			}
		#endif
		else if(data_8 == '^')
		{
			uint8_t next = 8;
 366:	2608      	movs	r6, #8
			//Testing device ID over UART.
			for(i = 0;i < 4;i++)
 368:	4d17      	ldr	r5, [pc, #92]	; (3c8 <main+0x1f0>)
 36a:	602b      	str	r3, [r5, #0]
 36c:	682b      	ldr	r3, [r5, #0]
 36e:	2b03      	cmp	r3, #3
 370:	d900      	bls.n	374 <main+0x19c>
 372:	e771      	b.n	258 <main+0x80>
			{
				//uart_write_byte(devsel++);
				uart_write_byte(_DID >> next);
 374:	4b1d      	ldr	r3, [pc, #116]	; (3ec <main+0x214>)
 376:	6998      	ldr	r0, [r3, #24]
 378:	4b11      	ldr	r3, [pc, #68]	; (3c0 <main+0x1e8>)
 37a:	40f0      	lsrs	r0, r6
 37c:	b2c0      	uxtb	r0, r0
 37e:	4798      	blx	r3
		#endif
		else if(data_8 == '^')
		{
			uint8_t next = 8;
			//Testing device ID over UART.
			for(i = 0;i < 4;i++)
 380:	682b      	ldr	r3, [r5, #0]
			{
				//uart_write_byte(devsel++);
				uart_write_byte(_DID >> next);
				next+=8;
 382:	3608      	adds	r6, #8
		#endif
		else if(data_8 == '^')
		{
			uint8_t next = 8;
			//Testing device ID over UART.
			for(i = 0;i < 4;i++)
 384:	3301      	adds	r3, #1
			{
				//uart_write_byte(devsel++);
				uart_write_byte(_DID >> next);
				next+=8;
 386:	b2f6      	uxtb	r6, r6
		#endif
		else if(data_8 == '^')
		{
			uint8_t next = 8;
			//Testing device ID over UART.
			for(i = 0;i < 4;i++)
 388:	602b      	str	r3, [r5, #0]
 38a:	e7ef      	b.n	36c <main+0x194>
 38c:	41004400 	.word	0x41004400
 390:	4100444f 	.word	0x4100444f
 394:	00000804 	.word	0x00000804
 398:	20000088 	.word	0x20000088
 39c:	e000ed00 	.word	0xe000ed00
 3a0:	41004000 	.word	0x41004000
 3a4:	41004410 	.word	0x41004410
 3a8:	40000800 	.word	0x40000800
 3ac:	fffffcff 	.word	0xfffffcff
 3b0:	000004f1 	.word	0x000004f1
 3b4:	00000585 	.word	0x00000585
 3b8:	2000004e 	.word	0x2000004e
 3bc:	2000006c 	.word	0x2000006c
 3c0:	0000054d 	.word	0x0000054d
 3c4:	00000575 	.word	0x00000575
 3c8:	20000074 	.word	0x20000074
 3cc:	00003fff 	.word	0x00003fff
 3d0:	000003f1 	.word	0x000003f1
 3d4:	20000070 	.word	0x20000070
 3d8:	00000425 	.word	0x00000425
 3dc:	20000084 	.word	0x20000084
 3e0:	4100441c 	.word	0x4100441c
 3e4:	00000195 	.word	0x00000195
 3e8:	000001bd 	.word	0x000001bd
 3ec:	41002000 	.word	0x41002000

000003f0 <nvm_erase_row>:
		return 0;
	}
#endif
	
	/* Check if the module is busy */
	while(!NVMCTRL->INTFLAG.bit.READY);
 3f0:	4b09      	ldr	r3, [pc, #36]	; (418 <STACK_SIZE+0x18>)
 3f2:	7d1a      	ldrb	r2, [r3, #20]
 3f4:	07d2      	lsls	r2, r2, #31
 3f6:	d5fb      	bpl.n	3f0 <nvm_erase_row>
	
	/* Clear error flags */
	NVMCTRL->STATUS.reg &= ~NVMCTRL_STATUS_MASK;
 3f8:	8b19      	ldrh	r1, [r3, #24]
 3fa:	4a08      	ldr	r2, [pc, #32]	; (41c <STACK_SIZE+0x1c>)
 3fc:	400a      	ands	r2, r1
 3fe:	831a      	strh	r2, [r3, #24]
	
	while(!(NVMCTRL->INTFLAG.bit.READY));
 400:	7d19      	ldrb	r1, [r3, #20]
 402:	4a05      	ldr	r2, [pc, #20]	; (418 <STACK_SIZE+0x18>)
 404:	07c9      	lsls	r1, r1, #31
 406:	d5fb      	bpl.n	400 <STACK_SIZE>
	
	/* Set address and command */	
	NVMCTRL->ADDR.reg = (row_address / 2);
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_ER;
 408:	4905      	ldr	r1, [pc, #20]	; (420 <STACK_SIZE+0x20>)
	NVMCTRL->STATUS.reg &= ~NVMCTRL_STATUS_MASK;
	
	while(!(NVMCTRL->INTFLAG.bit.READY));
	
	/* Set address and command */	
	NVMCTRL->ADDR.reg = (row_address / 2);
 40a:	0840      	lsrs	r0, r0, #1
 40c:	61d0      	str	r0, [r2, #28]
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_ER;
 40e:	8011      	strh	r1, [r2, #0]
	while(!(NVMCTRL->INTFLAG.bit.READY));
 410:	7d1a      	ldrb	r2, [r3, #20]
 412:	07d2      	lsls	r2, r2, #31
 414:	d5fc      	bpl.n	410 <STACK_SIZE+0x10>
	
}
 416:	4770      	bx	lr
 418:	41004000 	.word	0x41004000
 41c:	fffffee0 	.word	0xfffffee0
 420:	ffffa502 	.word	0xffffa502

00000424 <nvm_write_buffer>:

void nvm_write_buffer(uint32_t destination_address, const uint8_t *buffer, uint16_t length)
{
 424:	b5f0      	push	{r4, r5, r6, r7, lr}
		return 0;
	}
#endif

	/* Check if the module is busy */
	while(!NVMCTRL->INTFLAG.bit.READY);
 426:	4b1a      	ldr	r3, [pc, #104]	; (490 <nvm_write_buffer+0x6c>)
 428:	7d1c      	ldrb	r4, [r3, #20]
 42a:	07e4      	lsls	r4, r4, #31
 42c:	d5fb      	bpl.n	426 <nvm_write_buffer+0x2>
	
	//set auto page writes
	NVMCTRL->CTRLB.bit.MANW = 0;
 42e:	2580      	movs	r5, #128	; 0x80
 430:	685c      	ldr	r4, [r3, #4]
 432:	43ac      	bics	r4, r5
 434:	605c      	str	r4, [r3, #4]

	/* Erase the page buffer before buffering new data */
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_PBC | NVMCTRL_CTRLA_CMDEX_KEY;
 436:	4c17      	ldr	r4, [pc, #92]	; (494 <nvm_write_buffer+0x70>)
 438:	801c      	strh	r4, [r3, #0]

	/* Check if the module is busy */
	while(!NVMCTRL->INTFLAG.bit.READY);
 43a:	7d1c      	ldrb	r4, [r3, #20]
 43c:	4d14      	ldr	r5, [pc, #80]	; (490 <nvm_write_buffer+0x6c>)
 43e:	07e4      	lsls	r4, r4, #31
 440:	d5fb      	bpl.n	43a <nvm_write_buffer+0x16>

	/* Clear error flags */
	NVMCTRL->STATUS.reg &= ~NVMCTRL_STATUS_MASK;
 442:	8b2e      	ldrh	r6, [r5, #24]
 444:	4c14      	ldr	r4, [pc, #80]	; (498 <nvm_write_buffer+0x74>)

	uint32_t nvm_address = destination_address / 2;
 446:	0840      	lsrs	r0, r0, #1

	/* Check if the module is busy */
	while(!NVMCTRL->INTFLAG.bit.READY);

	/* Clear error flags */
	NVMCTRL->STATUS.reg &= ~NVMCTRL_STATUS_MASK;
 448:	4034      	ands	r4, r6
 44a:	832c      	strh	r4, [r5, #24]

	uint32_t nvm_address = destination_address / 2;

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t k = 0; k < length; k += 2) 
 44c:	2400      	movs	r4, #0
 44e:	0040      	lsls	r0, r0, #1
 450:	b2a5      	uxth	r5, r4
 452:	4295      	cmp	r5, r2
 454:	d210      	bcs.n	478 <nvm_write_buffer+0x54>
	{
		uint16_t data;
		
		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[k];
 456:	b2a5      	uxth	r5, r4
		
		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (k < (length - 1)) {
 458:	1e57      	subs	r7, r2, #1
	for (uint16_t k = 0; k < length; k += 2) 
	{
		uint16_t data;
		
		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[k];
 45a:	5d4e      	ldrb	r6, [r1, r5]
		
		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (k < (length - 1)) {
 45c:	42bd      	cmp	r5, r7
 45e:	db01      	blt.n	464 <nvm_write_buffer+0x40>
	for (uint16_t k = 0; k < length; k += 2) 
	{
		uint16_t data;
		
		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[k];
 460:	b2b5      	uxth	r5, r6
 462:	e003      	b.n	46c <nvm_write_buffer+0x48>
		
		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (k < (length - 1)) {
			data |= (buffer[k + 1] << 8);
 464:	194d      	adds	r5, r1, r5
 466:	786d      	ldrb	r5, [r5, #1]
 468:	022d      	lsls	r5, r5, #8
 46a:	4335      	orrs	r5, r6
 46c:	1826      	adds	r6, r4, r0
		}
		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
 46e:	8035      	strh	r5, [r6, #0]
		NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_WP;
 470:	4d0a      	ldr	r5, [pc, #40]	; (49c <nvm_write_buffer+0x78>)
 472:	3402      	adds	r4, #2
 474:	801d      	strh	r5, [r3, #0]
 476:	e7eb      	b.n	450 <nvm_write_buffer+0x2c>
	}
	
	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((manual_page_write == 0) && (length < NVMCTRL_PAGE_SIZE)) {
 478:	4909      	ldr	r1, [pc, #36]	; (4a0 <nvm_write_buffer+0x7c>)
 47a:	7809      	ldrb	r1, [r1, #0]
 47c:	2900      	cmp	r1, #0
 47e:	d103      	bne.n	488 <nvm_write_buffer+0x64>
 480:	2a3f      	cmp	r2, #63	; 0x3f
 482:	d801      	bhi.n	488 <nvm_write_buffer+0x64>
		NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_WP;
 484:	4a05      	ldr	r2, [pc, #20]	; (49c <nvm_write_buffer+0x78>)
 486:	801a      	strh	r2, [r3, #0]
	}
	
	while(!NVMCTRL->INTFLAG.bit.READY);
 488:	7d1a      	ldrb	r2, [r3, #20]
 48a:	07d2      	lsls	r2, r2, #31
 48c:	d5fc      	bpl.n	488 <nvm_write_buffer+0x64>
}
 48e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 490:	41004000 	.word	0x41004000
 494:	ffffa544 	.word	0xffffa544
 498:	fffffee0 	.word	0xfffffee0
 49c:	ffffa504 	.word	0xffffa504
 4a0:	20000080 	.word	0x20000080

000004a4 <pin_set_peripheral_function>:
            31:21 : port information 0->PORTA, 1->PORTB
            20:16 : pin 0-31
        15:00 pin multiplex information
        there are defines for pinmux like: PINMUX_PA09D_SERCOM2_PAD1 
    */
    uint16_t pad = pinmux >> 16;    // get pad (port+pin)
 4a4:	0c01      	lsrs	r1, r0, #16
    uint8_t port = pad >> 5;        // get port
    uint8_t pin  = pad & 0x1F;      // get number of pin - no port information anymore
 4a6:	231f      	movs	r3, #31
	uart_write_byte('s');
}

/*pin pad setup for SERCOM1 and USART*/
void pin_set_peripheral_function(uint32_t pinmux)
{
 4a8:	b570      	push	{r4, r5, r6, lr}
 4aa:	1c04      	adds	r4, r0, #0
        15:00 pin multiplex information
        there are defines for pinmux like: PINMUX_PA09D_SERCOM2_PAD1 
    */
    uint16_t pad = pinmux >> 16;    // get pad (port+pin)
    uint8_t port = pad >> 5;        // get port
    uint8_t pin  = pad & 0x1F;      // get number of pin - no port information anymore
 4ac:	b2c8      	uxtb	r0, r1
            20:16 : pin 0-31
        15:00 pin multiplex information
        there are defines for pinmux like: PINMUX_PA09D_SERCOM2_PAD1 
    */
    uint16_t pad = pinmux >> 16;    // get pad (port+pin)
    uint8_t port = pad >> 5;        // get port
 4ae:	0949      	lsrs	r1, r1, #5
    uint8_t pin  = pad & 0x1F;      // get number of pin - no port information anymore
    
    PORT->Group[port].PINCFG[pin].bit.PMUXEN =1;
 4b0:	b2c9      	uxtb	r1, r1
 4b2:	4a0e      	ldr	r2, [pc, #56]	; (4ec <pin_set_peripheral_function+0x48>)
 4b4:	01c9      	lsls	r1, r1, #7
 4b6:	188a      	adds	r2, r1, r2
 4b8:	2101      	movs	r1, #1
        15:00 pin multiplex information
        there are defines for pinmux like: PINMUX_PA09D_SERCOM2_PAD1 
    */
    uint16_t pad = pinmux >> 16;    // get pad (port+pin)
    uint8_t port = pad >> 5;        // get port
    uint8_t pin  = pad & 0x1F;      // get number of pin - no port information anymore
 4ba:	4003      	ands	r3, r0
    
    PORT->Group[port].PINCFG[pin].bit.PMUXEN =1;
 4bc:	18d5      	adds	r5, r2, r3
 4be:	3540      	adds	r5, #64	; 0x40
 4c0:	782e      	ldrb	r6, [r5, #0]
    
    /* each pinmux register is for two pins! with pin/2 you can get the index of the needed pinmux register
       the p mux resiter is 8Bit   (7:4 odd pin; 3:0 evan bit)  */
    // reset pinmux values.                             VV shift if pin is odd (if evan:  (4*(pin & 1))==0  )
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
 4c2:	4008      	ands	r0, r1
    */
    uint16_t pad = pinmux >> 16;    // get pad (port+pin)
    uint8_t port = pad >> 5;        // get port
    uint8_t pin  = pad & 0x1F;      // get number of pin - no port information anymore
    
    PORT->Group[port].PINCFG[pin].bit.PMUXEN =1;
 4c4:	430e      	orrs	r6, r1
    
    /* each pinmux register is for two pins! with pin/2 you can get the index of the needed pinmux register
       the p mux resiter is 8Bit   (7:4 odd pin; 3:0 evan bit)  */
    // reset pinmux values.                             VV shift if pin is odd (if evan:  (4*(pin & 1))==0  )
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
 4c6:	40cb      	lsrs	r3, r1
 4c8:	0081      	lsls	r1, r0, #2
 4ca:	200f      	movs	r0, #15
 4cc:	4088      	lsls	r0, r1
 4ce:	18d3      	adds	r3, r2, r3
    */
    uint16_t pad = pinmux >> 16;    // get pad (port+pin)
    uint8_t port = pad >> 5;        // get port
    uint8_t pin  = pad & 0x1F;      // get number of pin - no port information anymore
    
    PORT->Group[port].PINCFG[pin].bit.PMUXEN =1;
 4d0:	702e      	strb	r6, [r5, #0]
    
    /* each pinmux register is for two pins! with pin/2 you can get the index of the needed pinmux register
       the p mux resiter is 8Bit   (7:4 odd pin; 3:0 evan bit)  */
    // reset pinmux values.                             VV shift if pin is odd (if evan:  (4*(pin & 1))==0  )
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
 4d2:	3330      	adds	r3, #48	; 0x30
 4d4:	781a      	ldrb	r2, [r3, #0]
 4d6:	4382      	bics	r2, r0
 4d8:	701a      	strb	r2, [r3, #0]
                    //          
    // set new values
    PORT->Group[port].PMUX[pin/2].reg |=  ( (uint8_t)( (pinmux&0xFFFF) <<(4*(pin&1)) ) ); 
 4da:	b2a2      	uxth	r2, r4
 4dc:	408a      	lsls	r2, r1
 4de:	1c10      	adds	r0, r2, #0
 4e0:	781d      	ldrb	r5, [r3, #0]
 4e2:	4328      	orrs	r0, r5
 4e4:	b2c0      	uxtb	r0, r0
 4e6:	7018      	strb	r0, [r3, #0]
}
 4e8:	bd70      	pop	{r4, r5, r6, pc}
 4ea:	46c0      	nop			; (mov r8, r8)
 4ec:	41004400 	.word	0x41004400

000004f0 <UART_sercom_init>:

/*init USART module on SERCOM1*/
void UART_sercom_init()
{
 4f0:	b510      	push	{r4, lr}
	//Pmux eve = n/1, odd = (n-1)/2
	pin_set_peripheral_function(PINMUX_PA25C_SERCOM1_PAD3); // SAMD09 TX
 4f2:	480d      	ldr	r0, [pc, #52]	; (528 <UART_sercom_init+0x38>)
 4f4:	4c0d      	ldr	r4, [pc, #52]	; (52c <UART_sercom_init+0x3c>)
 4f6:	47a0      	blx	r4
	pin_set_peripheral_function(PINMUX_PA24C_SERCOM1_PAD2); // SAMD09 RX
 4f8:	480d      	ldr	r0, [pc, #52]	; (530 <UART_sercom_init+0x40>)
 4fa:	47a0      	blx	r4
	
	//apbcmak
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM1;
 4fc:	2108      	movs	r1, #8
 4fe:	4a0d      	ldr	r2, [pc, #52]	; (534 <UART_sercom_init+0x44>)
 500:	6a13      	ldr	r3, [r2, #32]
 502:	430b      	orrs	r3, r1
 504:	6213      	str	r3, [r2, #32]
	
	//gclk config
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM1_GCLK_ID_CORE) | GCLK_CLKCTRL_GEN(0) | GCLK_CLKCTRL_CLKEN;
 506:	4a0c      	ldr	r2, [pc, #48]	; (538 <UART_sercom_init+0x48>)
 508:	4b0c      	ldr	r3, [pc, #48]	; (53c <UART_sercom_init+0x4c>)
	SERCOM1->USART.CTRLB.reg = SERCOM_USART_CTRLB_RXEN | SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_CHSIZE(0);
	
	/*configure baud rate at 115200*/
	SERCOM1->USART.BAUD.reg = BAUD_VAL;
	
	SERCOM1->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
 50a:	3906      	subs	r1, #6
	
	//apbcmak
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM1;
	
	//gclk config
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM1_GCLK_ID_CORE) | GCLK_CLKCTRL_GEN(0) | GCLK_CLKCTRL_CLKEN;
 50c:	805a      	strh	r2, [r3, #2]
	
	//Config SERCOM1 module for UART
	SERCOM1->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK | SERCOM_USART_CTRLA_DORD | SERCOM_USART_CTRLA_RXPO(0x3) | SERCOM_USART_CTRLA_TXPO(0x1);
 50e:	4b0c      	ldr	r3, [pc, #48]	; (540 <UART_sercom_init+0x50>)
 510:	4a0c      	ldr	r2, [pc, #48]	; (544 <UART_sercom_init+0x54>)
 512:	601a      	str	r2, [r3, #0]
	
	SERCOM1->USART.CTRLB.reg = SERCOM_USART_CTRLB_RXEN | SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_CHSIZE(0);
 514:	22c0      	movs	r2, #192	; 0xc0
 516:	0292      	lsls	r2, r2, #10
 518:	605a      	str	r2, [r3, #4]
	
	/*configure baud rate at 115200*/
	SERCOM1->USART.BAUD.reg = BAUD_VAL;
 51a:	4a0b      	ldr	r2, [pc, #44]	; (548 <UART_sercom_init+0x58>)
 51c:	819a      	strh	r2, [r3, #12]
	
	SERCOM1->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
 51e:	681a      	ldr	r2, [r3, #0]
 520:	430a      	orrs	r2, r1
 522:	601a      	str	r2, [r3, #0]
	
}
 524:	bd10      	pop	{r4, pc}
 526:	46c0      	nop			; (mov r8, r8)
 528:	00190002 	.word	0x00190002
 52c:	000004a5 	.word	0x000004a5
 530:	00180002 	.word	0x00180002
 534:	40000400 	.word	0x40000400
 538:	0000400f 	.word	0x0000400f
 53c:	40000c00 	.word	0x40000c00
 540:	42000c00 	.word	0x42000c00
 544:	40310004 	.word	0x40310004
 548:	ffffc504 	.word	0xffffc504

0000054c <uart_write_byte>:

//write to the usart register.
void uart_write_byte(uint8_t data)
{
	while(!BOOT_SERCOM->USART.INTFLAG.bit.DRE);
 54c:	4b07      	ldr	r3, [pc, #28]	; (56c <uart_write_byte+0x20>)
 54e:	7e1a      	ldrb	r2, [r3, #24]
 550:	07d2      	lsls	r2, r2, #31
 552:	d5fb      	bpl.n	54c <uart_write_byte>
	
	#ifdef NEW_FRONT_END
		if(!specialTalk)
 554:	4a06      	ldr	r2, [pc, #24]	; (570 <uart_write_byte+0x24>)
 556:	7812      	ldrb	r2, [r2, #0]
 558:	2a00      	cmp	r2, #0
 55a:	d002      	beq.n	562 <uart_write_byte+0x16>
		{
			BOOT_SERCOM->USART.DATA.reg = (uint16_t)data;
		}
		else 
		{
			if(data == '\n')
 55c:	280a      	cmp	r0, #10
 55e:	d100      	bne.n	562 <uart_write_byte+0x16>
			{
				data = ('*');
 560:	3020      	adds	r0, #32
			}
			
			BOOT_SERCOM->USART.DATA.reg = (uint16_t)data;
 562:	b282      	uxth	r2, r0
		}
	#endif
	BOOT_SERCOM->USART.DATA.reg = (uint16_t)data;
 564:	b280      	uxth	r0, r0
			if(data == '\n')
			{
				data = ('*');
			}
			
			BOOT_SERCOM->USART.DATA.reg = (uint16_t)data;
 566:	851a      	strh	r2, [r3, #40]	; 0x28
		}
	#endif
	BOOT_SERCOM->USART.DATA.reg = (uint16_t)data;
 568:	8518      	strh	r0, [r3, #40]	; 0x28
	
}
 56a:	4770      	bx	lr
 56c:	42000c00 	.word	0x42000c00
 570:	2000006c 	.word	0x2000006c

00000574 <sendConfirm>:
 */ 

#include "includes.h"

void sendConfirm()
{
 574:	b508      	push	{r3, lr}
	uart_write_byte('s');
 576:	2073      	movs	r0, #115	; 0x73
 578:	4b01      	ldr	r3, [pc, #4]	; (580 <sendConfirm+0xc>)
 57a:	4798      	blx	r3
}
 57c:	bd08      	pop	{r3, pc}
 57e:	46c0      	nop			; (mov r8, r8)
 580:	0000054d 	.word	0x0000054d

00000584 <uart_read_byte>:
}

//read from the usart register.
uint8_t uart_read_byte(void)
{
	while(!BOOT_SERCOM->USART.INTFLAG.bit.RXC);
 584:	4b03      	ldr	r3, [pc, #12]	; (594 <uart_read_byte+0x10>)
 586:	7e1a      	ldrb	r2, [r3, #24]
 588:	0752      	lsls	r2, r2, #29
 58a:	d5fb      	bpl.n	584 <uart_read_byte>
	return((uint8_t)(BOOT_SERCOM->USART.DATA.reg & 0x00FF));
 58c:	8d18      	ldrh	r0, [r3, #40]	; 0x28
 58e:	b2c0      	uxtb	r0, r0
}
 590:	4770      	bx	lr
 592:	46c0      	nop			; (mov r8, r8)
 594:	42000c00 	.word	0x42000c00

00000598 <__libc_init_array>:
 598:	4b0e      	ldr	r3, [pc, #56]	; (5d4 <__libc_init_array+0x3c>)
 59a:	b570      	push	{r4, r5, r6, lr}
 59c:	2500      	movs	r5, #0
 59e:	1c1e      	adds	r6, r3, #0
 5a0:	4c0d      	ldr	r4, [pc, #52]	; (5d8 <__libc_init_array+0x40>)
 5a2:	1ae4      	subs	r4, r4, r3
 5a4:	10a4      	asrs	r4, r4, #2
 5a6:	42a5      	cmp	r5, r4
 5a8:	d004      	beq.n	5b4 <__libc_init_array+0x1c>
 5aa:	00ab      	lsls	r3, r5, #2
 5ac:	58f3      	ldr	r3, [r6, r3]
 5ae:	4798      	blx	r3
 5b0:	3501      	adds	r5, #1
 5b2:	e7f8      	b.n	5a6 <__libc_init_array+0xe>
 5b4:	f000 f816 	bl	5e4 <_init>
 5b8:	4b08      	ldr	r3, [pc, #32]	; (5dc <__libc_init_array+0x44>)
 5ba:	2500      	movs	r5, #0
 5bc:	1c1e      	adds	r6, r3, #0
 5be:	4c08      	ldr	r4, [pc, #32]	; (5e0 <__libc_init_array+0x48>)
 5c0:	1ae4      	subs	r4, r4, r3
 5c2:	10a4      	asrs	r4, r4, #2
 5c4:	42a5      	cmp	r5, r4
 5c6:	d004      	beq.n	5d2 <__libc_init_array+0x3a>
 5c8:	00ab      	lsls	r3, r5, #2
 5ca:	58f3      	ldr	r3, [r6, r3]
 5cc:	4798      	blx	r3
 5ce:	3501      	adds	r5, #1
 5d0:	e7f8      	b.n	5c4 <__libc_init_array+0x2c>
 5d2:	bd70      	pop	{r4, r5, r6, pc}
 5d4:	000005f0 	.word	0x000005f0
 5d8:	000005f0 	.word	0x000005f0
 5dc:	000005f0 	.word	0x000005f0
 5e0:	000005f4 	.word	0x000005f4

000005e4 <_init>:
 5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 5e6:	46c0      	nop			; (mov r8, r8)
 5e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 5ea:	bc08      	pop	{r3}
 5ec:	469e      	mov	lr, r3
 5ee:	4770      	bx	lr

000005f0 <__init_array_start>:
 5f0:	000000b5 	.word	0x000000b5

000005f4 <_fini>:
 5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 5f6:	46c0      	nop			; (mov r8, r8)
 5f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 5fa:	bc08      	pop	{r3}
 5fc:	469e      	mov	lr, r3
 5fe:	4770      	bx	lr

00000600 <__fini_array_start>:
 600:	0000008d 	.word	0x0000008d
