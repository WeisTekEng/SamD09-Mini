
UART_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000600  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000050  20000000  00000600  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000044  20000050  00000650  00020050  2**2
                  ALLOC
  3 .stack        00000404  20000094  00000694  00020050  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  6 .debug_info   00006ffd  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000598  00000000  00000000  000270ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000038f  00000000  00000000  00027666  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000090  00000000  00000000  000279f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000d8  00000000  00000000  00027a85  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000a45f  00000000  00000000  00027b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00000dc7  00000000  00000000  00031fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000416bd  00000000  00000000  00032d83  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000160  00000000  00000000  00074440  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
   0:	20000498 	.word	0x20000498
   4:	000000f1 	.word	0x000000f1
   8:	000000ed 	.word	0x000000ed
   c:	000000ed 	.word	0x000000ed
	...
  2c:	000000ed 	.word	0x000000ed
	...
  38:	000000ed 	.word	0x000000ed
  3c:	000000ed 	.word	0x000000ed
  40:	000000ed 	.word	0x000000ed
  44:	000000ed 	.word	0x000000ed
  48:	000000ed 	.word	0x000000ed
  4c:	000000ed 	.word	0x000000ed
  50:	000000ed 	.word	0x000000ed
  54:	000000ed 	.word	0x000000ed
  58:	000000ed 	.word	0x000000ed
  5c:	00000000 	.word	0x00000000
  60:	000000ed 	.word	0x000000ed
  64:	000000ed 	.word	0x000000ed
  68:	000000ed 	.word	0x000000ed
	...
  74:	000000ed 	.word	0x000000ed
  78:	000000ed 	.word	0x000000ed
  7c:	000000ed 	.word	0x000000ed
	...
  88:	000000ed 	.word	0x000000ed

0000008c <__do_global_dtors_aux>:
  8c:	b510      	push	{r4, lr}
  8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
  90:	7823      	ldrb	r3, [r4, #0]
  92:	2b00      	cmp	r3, #0
  94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
  96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
  98:	2b00      	cmp	r3, #0
  9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
  9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
  9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
  a0:	bf00      	nop
  a2:	2301      	movs	r3, #1
  a4:	7023      	strb	r3, [r4, #0]
  a6:	bd10      	pop	{r4, pc}
  a8:	20000050 	.word	0x20000050
  ac:	00000000 	.word	0x00000000
  b0:	00000600 	.word	0x00000600

000000b4 <frame_dummy>:
  b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
  b6:	b510      	push	{r4, lr}
  b8:	2b00      	cmp	r3, #0
  ba:	d003      	beq.n	c4 <frame_dummy+0x10>
  bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
  be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
  c0:	e000      	b.n	c4 <frame_dummy+0x10>
  c2:	bf00      	nop
  c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
  c6:	6803      	ldr	r3, [r0, #0]
  c8:	2b00      	cmp	r3, #0
  ca:	d100      	bne.n	ce <frame_dummy+0x1a>
  cc:	bd10      	pop	{r4, pc}
  ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
  d0:	2b00      	cmp	r3, #0
  d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
  d4:	4798      	blx	r3
  d6:	e7f9      	b.n	cc <frame_dummy+0x18>
  d8:	00000000 	.word	0x00000000
  dc:	20000054 	.word	0x20000054
  e0:	00000600 	.word	0x00000600
  e4:	00000600 	.word	0x00000600
  e8:	00000000 	.word	0x00000000

000000ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  ec:	e7fe      	b.n	ec <Dummy_Handler>
	...

000000f0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  f0:	481d      	ldr	r0, [pc, #116]	; (168 <Reset_Handler+0x78>)
  f2:	491e      	ldr	r1, [pc, #120]	; (16c <Reset_Handler+0x7c>)
  f4:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  f6:	4288      	cmp	r0, r1
  f8:	d002      	beq.n	100 <Reset_Handler+0x10>
  fa:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
  fc:	4c1c      	ldr	r4, [pc, #112]	; (170 <Reset_Handler+0x80>)
  fe:	e003      	b.n	108 <Reset_Handler+0x18>
 100:	4b1c      	ldr	r3, [pc, #112]	; (174 <Reset_Handler+0x84>)
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 102:	4a1d      	ldr	r2, [pc, #116]	; (178 <Reset_Handler+0x88>)
                *pDest++ = 0;
 104:	2100      	movs	r1, #0
 106:	e006      	b.n	116 <Reset_Handler+0x26>
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 108:	18ca      	adds	r2, r1, r3
 10a:	42a2      	cmp	r2, r4
 10c:	d2f8      	bcs.n	100 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
 10e:	58c5      	ldr	r5, [r0, r3]
 110:	3304      	adds	r3, #4
 112:	6015      	str	r5, [r2, #0]
 114:	e7f8      	b.n	108 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 116:	4293      	cmp	r3, r2
 118:	d201      	bcs.n	11e <Reset_Handler+0x2e>
                *pDest++ = 0;
 11a:	c302      	stmia	r3!, {r1}
 11c:	e7fb      	b.n	116 <Reset_Handler+0x26>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 11e:	21ff      	movs	r1, #255	; 0xff

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 120:	2002      	movs	r0, #2
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 122:	4b16      	ldr	r3, [pc, #88]	; (17c <Reset_Handler+0x8c>)
 124:	4a16      	ldr	r2, [pc, #88]	; (180 <Reset_Handler+0x90>)
 126:	438b      	bics	r3, r1
 128:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
 12a:	2230      	movs	r2, #48	; 0x30
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 12c:	4b15      	ldr	r3, [pc, #84]	; (184 <Reset_Handler+0x94>)
 12e:	6258      	str	r0, [r3, #36]	; 0x24
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
 130:	4b15      	ldr	r3, [pc, #84]	; (188 <Reset_Handler+0x98>)
 132:	7b99      	ldrb	r1, [r3, #14]
 134:	4391      	bics	r1, r2
 136:	3a10      	subs	r2, #16
 138:	4311      	orrs	r1, r2
 13a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 13c:	7b99      	ldrb	r1, [r3, #14]
 13e:	3a14      	subs	r2, #20
 140:	4391      	bics	r1, r2
 142:	3a04      	subs	r2, #4
 144:	4311      	orrs	r1, r2
 146:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 148:	2103      	movs	r1, #3
 14a:	7b9a      	ldrb	r2, [r3, #14]
 14c:	438a      	bics	r2, r1
 14e:	4302      	orrs	r2, r0
 150:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
 152:	4a0e      	ldr	r2, [pc, #56]	; (18c <Reset_Handler+0x9c>)
 154:	317d      	adds	r1, #125	; 0x7d
 156:	6853      	ldr	r3, [r2, #4]
 158:	430b      	orrs	r3, r1
 15a:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
 15c:	4b0c      	ldr	r3, [pc, #48]	; (190 <Reset_Handler+0xa0>)
 15e:	4798      	blx	r3

        /* Branch to main function */
        main();
 160:	4b0c      	ldr	r3, [pc, #48]	; (194 <Reset_Handler+0xa4>)
 162:	4798      	blx	r3
 164:	e7fe      	b.n	164 <Reset_Handler+0x74>
 166:	46c0      	nop			; (mov r8, r8)
 168:	00000600 	.word	0x00000600
 16c:	20000000 	.word	0x20000000
 170:	20000050 	.word	0x20000050
 174:	20000050 	.word	0x20000050
 178:	20000094 	.word	0x20000094
 17c:	00000000 	.word	0x00000000
 180:	e000ed00 	.word	0xe000ed00
 184:	410070fc 	.word	0x410070fc
 188:	41004800 	.word	0x41004800
 18c:	41004000 	.word	0x41004000
 190:	00000595 	.word	0x00000595
 194:	00000371 	.word	0x00000371

00000198 <setup_ptrs>:
}

void setup_ptrs()
{
	//set values, for flash pointers.
	dest_addr = APP_START;
 198:	2380      	movs	r3, #128	; 0x80
 19a:	4a05      	ldr	r2, [pc, #20]	; (1b0 <setup_ptrs+0x18>)
 19c:	011b      	lsls	r3, r3, #4
 19e:	6013      	str	r3, [r2, #0]
	flash_ptr = APP_START;
 1a0:	4a04      	ldr	r2, [pc, #16]	; (1b4 <setup_ptrs+0x1c>)
	app_start_address = *flash_ptr;
 1a2:	6819      	ldr	r1, [r3, #0]

void setup_ptrs()
{
	//set values, for flash pointers.
	dest_addr = APP_START;
	flash_ptr = APP_START;
 1a4:	6013      	str	r3, [r2, #0]
	app_start_address = *flash_ptr;
 1a6:	4a04      	ldr	r2, [pc, #16]	; (1b8 <setup_ptrs+0x20>)
 1a8:	6011      	str	r1, [r2, #0]
	flash_byte_ptr = APP_START;
 1aa:	4a04      	ldr	r2, [pc, #16]	; (1bc <setup_ptrs+0x24>)
 1ac:	6013      	str	r3, [r2, #0]
}
 1ae:	4770      	bx	lr
 1b0:	20000070 	.word	0x20000070
 1b4:	20000080 	.word	0x20000080
 1b8:	2000008c 	.word	0x2000008c
 1bc:	20000088 	.word	0x20000088

000001c0 <UART_sercom_init>:
    */
    uint16_t pad = pinmux >> 16;    // get pad (port+pin)
    uint8_t port = pad >> 5;        // get port
    uint8_t pin  = pad & 0x1F;      // get number of pin - no port information anymore
    
    PORT->Group[port].PINCFG[pin].bit.PMUXEN =1;
 1c0:	4a18      	ldr	r2, [pc, #96]	; (224 <UART_sercom_init+0x64>)
    PORT->Group[port].PMUX[pin/2].reg |=  ( (uint8_t)( (pinmux&0xFFFF) <<(4*(pin&1)) ) ); 
}

/*init USART module on SERCOM1*/
void UART_sercom_init()
{
 1c2:	b530      	push	{r4, r5, lr}
    */
    uint16_t pad = pinmux >> 16;    // get pad (port+pin)
    uint8_t port = pad >> 5;        // get port
    uint8_t pin  = pad & 0x1F;      // get number of pin - no port information anymore
    
    PORT->Group[port].PINCFG[pin].bit.PMUXEN =1;
 1c4:	0011      	movs	r1, r2
 1c6:	2501      	movs	r5, #1
 1c8:	3159      	adds	r1, #89	; 0x59
 1ca:	780b      	ldrb	r3, [r1, #0]
    
    /* each pinmux register is for two pins! with pin/2 you can get the index of the needed pinmux register
       the p mux resiter is 8Bit   (7:4 odd pin; 3:0 evan bit)  */
    // reset pinmux values.                             VV shift if pin is odd (if evan:  (4*(pin & 1))==0  )
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
 1cc:	240f      	movs	r4, #15
    */
    uint16_t pad = pinmux >> 16;    // get pad (port+pin)
    uint8_t port = pad >> 5;        // get port
    uint8_t pin  = pad & 0x1F;      // get number of pin - no port information anymore
    
    PORT->Group[port].PINCFG[pin].bit.PMUXEN =1;
 1ce:	432b      	orrs	r3, r5
 1d0:	700b      	strb	r3, [r1, #0]
    
    /* each pinmux register is for two pins! with pin/2 you can get the index of the needed pinmux register
       the p mux resiter is 8Bit   (7:4 odd pin; 3:0 evan bit)  */
    // reset pinmux values.                             VV shift if pin is odd (if evan:  (4*(pin & 1))==0  )
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
 1d2:	0013      	movs	r3, r2
                    //          
    // set new values
    PORT->Group[port].PMUX[pin/2].reg |=  ( (uint8_t)( (pinmux&0xFFFF) <<(4*(pin&1)) ) ); 
 1d4:	2120      	movs	r1, #32
    PORT->Group[port].PINCFG[pin].bit.PMUXEN =1;
    
    /* each pinmux register is for two pins! with pin/2 you can get the index of the needed pinmux register
       the p mux resiter is 8Bit   (7:4 odd pin; 3:0 evan bit)  */
    // reset pinmux values.                             VV shift if pin is odd (if evan:  (4*(pin & 1))==0  )
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
 1d6:	333c      	adds	r3, #60	; 0x3c
 1d8:	7818      	ldrb	r0, [r3, #0]
    */
    uint16_t pad = pinmux >> 16;    // get pad (port+pin)
    uint8_t port = pad >> 5;        // get port
    uint8_t pin  = pad & 0x1F;      // get number of pin - no port information anymore
    
    PORT->Group[port].PINCFG[pin].bit.PMUXEN =1;
 1da:	3258      	adds	r2, #88	; 0x58
    
    /* each pinmux register is for two pins! with pin/2 you can get the index of the needed pinmux register
       the p mux resiter is 8Bit   (7:4 odd pin; 3:0 evan bit)  */
    // reset pinmux values.                             VV shift if pin is odd (if evan:  (4*(pin & 1))==0  )
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
 1dc:	4020      	ands	r0, r4
 1de:	7018      	strb	r0, [r3, #0]
                    //          
    // set new values
    PORT->Group[port].PMUX[pin/2].reg |=  ( (uint8_t)( (pinmux&0xFFFF) <<(4*(pin&1)) ) ); 
 1e0:	7818      	ldrb	r0, [r3, #0]
 1e2:	4308      	orrs	r0, r1
 1e4:	7018      	strb	r0, [r3, #0]
 1e6:	2002      	movs	r0, #2
    */
    uint16_t pad = pinmux >> 16;    // get pad (port+pin)
    uint8_t port = pad >> 5;        // get port
    uint8_t pin  = pad & 0x1F;      // get number of pin - no port information anymore
    
    PORT->Group[port].PINCFG[pin].bit.PMUXEN =1;
 1e8:	7811      	ldrb	r1, [r2, #0]
 1ea:	4329      	orrs	r1, r5
 1ec:	7011      	strb	r1, [r2, #0]
    
    /* each pinmux register is for two pins! with pin/2 you can get the index of the needed pinmux register
       the p mux resiter is 8Bit   (7:4 odd pin; 3:0 evan bit)  */
    // reset pinmux values.                             VV shift if pin is odd (if evan:  (4*(pin & 1))==0  )
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
 1ee:	781a      	ldrb	r2, [r3, #0]
 1f0:	43a2      	bics	r2, r4
 1f2:	701a      	strb	r2, [r3, #0]
                    //          
    // set new values
    PORT->Group[port].PMUX[pin/2].reg |=  ( (uint8_t)( (pinmux&0xFFFF) <<(4*(pin&1)) ) ); 
 1f4:	7819      	ldrb	r1, [r3, #0]
	//Pmux eve = n/1, odd = (n-1)/2
	pin_set_peripheral_function(PINMUX_PA25C_SERCOM1_PAD3); // SAMD09 TX
	pin_set_peripheral_function(PINMUX_PA24C_SERCOM1_PAD2); // SAMD09 RX
	
	//apbcmak
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM1;
 1f6:	4a0c      	ldr	r2, [pc, #48]	; (228 <UART_sercom_init+0x68>)
       the p mux resiter is 8Bit   (7:4 odd pin; 3:0 evan bit)  */
    // reset pinmux values.                             VV shift if pin is odd (if evan:  (4*(pin & 1))==0  )
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
                    //          
    // set new values
    PORT->Group[port].PMUX[pin/2].reg |=  ( (uint8_t)( (pinmux&0xFFFF) <<(4*(pin&1)) ) ); 
 1f8:	4301      	orrs	r1, r0
 1fa:	7019      	strb	r1, [r3, #0]
	//Pmux eve = n/1, odd = (n-1)/2
	pin_set_peripheral_function(PINMUX_PA25C_SERCOM1_PAD3); // SAMD09 TX
	pin_set_peripheral_function(PINMUX_PA24C_SERCOM1_PAD2); // SAMD09 RX
	
	//apbcmak
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM1;
 1fc:	2108      	movs	r1, #8
 1fe:	6a13      	ldr	r3, [r2, #32]
 200:	430b      	orrs	r3, r1
 202:	6213      	str	r3, [r2, #32]
	
	//gclk config
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM1_GCLK_ID_CORE) | GCLK_CLKCTRL_GEN(0) | GCLK_CLKCTRL_CLKEN;
 204:	4a09      	ldr	r2, [pc, #36]	; (22c <UART_sercom_init+0x6c>)
 206:	4b0a      	ldr	r3, [pc, #40]	; (230 <UART_sercom_init+0x70>)
 208:	805a      	strh	r2, [r3, #2]
	
	//Config SERCOM1 module for UART
	SERCOM1->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK | SERCOM_USART_CTRLA_DORD | SERCOM_USART_CTRLA_RXPO(0x3) | SERCOM_USART_CTRLA_TXPO(0x1);
 20a:	4b0a      	ldr	r3, [pc, #40]	; (234 <UART_sercom_init+0x74>)
 20c:	4a0a      	ldr	r2, [pc, #40]	; (238 <UART_sercom_init+0x78>)
 20e:	601a      	str	r2, [r3, #0]
	
	SERCOM1->USART.CTRLB.reg = SERCOM_USART_CTRLB_RXEN | SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_CHSIZE(0);
 210:	22c0      	movs	r2, #192	; 0xc0
 212:	0292      	lsls	r2, r2, #10
 214:	605a      	str	r2, [r3, #4]
	
	/*configure baud rate at 115200*/
	SERCOM1->USART.BAUD.reg = BAUD_VAL;
 216:	4a09      	ldr	r2, [pc, #36]	; (23c <UART_sercom_init+0x7c>)
 218:	819a      	strh	r2, [r3, #12]
	
	SERCOM1->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
 21a:	681a      	ldr	r2, [r3, #0]
 21c:	4302      	orrs	r2, r0
 21e:	601a      	str	r2, [r3, #0]
	
}
 220:	bd30      	pop	{r4, r5, pc}
 222:	46c0      	nop			; (mov r8, r8)
 224:	41004400 	.word	0x41004400
 228:	40000400 	.word	0x40000400
 22c:	0000400f 	.word	0x0000400f
 230:	40000c00 	.word	0x40000c00
 234:	42000c00 	.word	0x42000c00
 238:	40310004 	.word	0x40310004
 23c:	ffffc504 	.word	0xffffc504

00000240 <uart_write_byte>:

//this will be replaced with UART_sercom_simpleWrite function.
void uart_write_byte(uint8_t data)
{
 240:	b510      	push	{r4, lr}
	while(!BOOT_SERCOM->USART.INTFLAG.bit.DRE);
 242:	4c09      	ldr	r4, [pc, #36]	; (268 <uart_write_byte+0x28>)
 244:	4b08      	ldr	r3, [pc, #32]	; (268 <uart_write_byte+0x28>)
 246:	7e21      	ldrb	r1, [r4, #24]
 248:	001a      	movs	r2, r3
 24a:	07c9      	lsls	r1, r1, #31
 24c:	d5fa      	bpl.n	244 <uart_write_byte+0x4>
	if(!specialTalk)
 24e:	4907      	ldr	r1, [pc, #28]	; (26c <uart_write_byte+0x2c>)
 250:	7809      	ldrb	r1, [r1, #0]
 252:	2900      	cmp	r1, #0
 254:	d102      	bne.n	25c <uart_write_byte+0x1c>
	{
		BOOT_SERCOM->USART.DATA.reg = (uint16_t)data;
 256:	b280      	uxth	r0, r0
 258:	8518      	strh	r0, [r3, #40]	; 0x28
 25a:	e004      	b.n	266 <uart_write_byte+0x26>
	}
	else 
	{
		if(data == '\n')
 25c:	280a      	cmp	r0, #10
 25e:	d100      	bne.n	262 <uart_write_byte+0x22>
		{
			data = ('*');
 260:	3020      	adds	r0, #32
		}
			
		BOOT_SERCOM->USART.DATA.reg = (uint16_t)data;
 262:	b280      	uxth	r0, r0
 264:	8510      	strh	r0, [r2, #40]	; 0x28
	}
	
}
 266:	bd10      	pop	{r4, pc}
 268:	42000c00 	.word	0x42000c00
 26c:	2000006c 	.word	0x2000006c

00000270 <sendConfirm>:

void sendConfirm()
{
 270:	b510      	push	{r4, lr}
	uart_write_byte('s');
 272:	2073      	movs	r0, #115	; 0x73
 274:	4b01      	ldr	r3, [pc, #4]	; (27c <sendConfirm+0xc>)
 276:	4798      	blx	r3
}
 278:	bd10      	pop	{r4, pc}
 27a:	46c0      	nop			; (mov r8, r8)
 27c:	00000241 	.word	0x00000241

00000280 <info>:

void info()
{
 280:	b510      	push	{r4, lr}
 282:	2400      	movs	r4, #0
	uint8_t i;
	
	for(i = 0;i<=78-1;i++)
	{
		uart_write_byte(aVER[i]);
 284:	4b03      	ldr	r3, [pc, #12]	; (294 <info+0x14>)
 286:	5ce0      	ldrb	r0, [r4, r3]
 288:	4b03      	ldr	r3, [pc, #12]	; (298 <info+0x18>)
 28a:	3401      	adds	r4, #1
 28c:	4798      	blx	r3

void info()
{
	uint8_t i;
	
	for(i = 0;i<=78-1;i++)
 28e:	2c4e      	cmp	r4, #78	; 0x4e
 290:	d1f8      	bne.n	284 <info+0x4>
	{
		uart_write_byte(aVER[i]);
	}
}
 292:	bd10      	pop	{r4, pc}
 294:	20000000 	.word	0x20000000
 298:	00000241 	.word	0x00000241

0000029c <uart_read_byte>:

//this will be replaced with UART_sercom_simpleRead function.
uint8_t uart_read_byte(void)
{
	while(!BOOT_SERCOM->USART.INTFLAG.bit.RXC);
 29c:	4a03      	ldr	r2, [pc, #12]	; (2ac <uart_read_byte+0x10>)
 29e:	7e13      	ldrb	r3, [r2, #24]
 2a0:	075b      	lsls	r3, r3, #29
 2a2:	d5fc      	bpl.n	29e <uart_read_byte+0x2>
	return((uint8_t)(BOOT_SERCOM->USART.DATA.reg & 0x00FF));
 2a4:	4b01      	ldr	r3, [pc, #4]	; (2ac <uart_read_byte+0x10>)
 2a6:	8d18      	ldrh	r0, [r3, #40]	; 0x28
 2a8:	b2c0      	uxtb	r0, r0
}
 2aa:	4770      	bx	lr
 2ac:	42000c00 	.word	0x42000c00

000002b0 <nvm_erase_row>:
		return 0;
	}
#endif
	
	/* Check if the module is busy */
	while(!NVMCTRL->INTFLAG.bit.READY);
 2b0:	490a      	ldr	r1, [pc, #40]	; (2dc <nvm_erase_row+0x2c>)
 2b2:	7d0a      	ldrb	r2, [r1, #20]
 2b4:	4b09      	ldr	r3, [pc, #36]	; (2dc <nvm_erase_row+0x2c>)
 2b6:	07d2      	lsls	r2, r2, #31
 2b8:	d5fb      	bpl.n	2b2 <nvm_erase_row+0x2>
	
	/* Clear error flags */
	NVMCTRL->STATUS.reg &= ~NVMCTRL_STATUS_MASK;
 2ba:	8b19      	ldrh	r1, [r3, #24]
 2bc:	4a08      	ldr	r2, [pc, #32]	; (2e0 <nvm_erase_row+0x30>)
 2be:	400a      	ands	r2, r1
 2c0:	831a      	strh	r2, [r3, #24]
	
	while(!(NVMCTRL->INTFLAG.bit.READY));
 2c2:	7d19      	ldrb	r1, [r3, #20]
 2c4:	4a05      	ldr	r2, [pc, #20]	; (2dc <nvm_erase_row+0x2c>)
 2c6:	07c9      	lsls	r1, r1, #31
 2c8:	d5fb      	bpl.n	2c2 <nvm_erase_row+0x12>
	
	/* Set address and command */	
	NVMCTRL->ADDR.reg = (row_address / 2);
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_ER;
 2ca:	4906      	ldr	r1, [pc, #24]	; (2e4 <nvm_erase_row+0x34>)
	NVMCTRL->STATUS.reg &= ~NVMCTRL_STATUS_MASK;
	
	while(!(NVMCTRL->INTFLAG.bit.READY));
	
	/* Set address and command */	
	NVMCTRL->ADDR.reg = (row_address / 2);
 2cc:	0840      	lsrs	r0, r0, #1
 2ce:	61d0      	str	r0, [r2, #28]
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_ER;
 2d0:	8011      	strh	r1, [r2, #0]
	while(!(NVMCTRL->INTFLAG.bit.READY));
 2d2:	7d1a      	ldrb	r2, [r3, #20]
 2d4:	07d2      	lsls	r2, r2, #31
 2d6:	d5fc      	bpl.n	2d2 <nvm_erase_row+0x22>
	
}
 2d8:	4770      	bx	lr
 2da:	46c0      	nop			; (mov r8, r8)
 2dc:	41004000 	.word	0x41004000
 2e0:	fffffee0 	.word	0xfffffee0
 2e4:	ffffa502 	.word	0xffffa502

000002e8 <nvm_write_buffer>:

void nvm_write_buffer(uint32_t destination_address, const uint8_t *buffer, uint16_t length)
{
 2e8:	b5f0      	push	{r4, r5, r6, r7, lr}
		return 0;
	}
#endif

	/* Check if the module is busy */
	while(!NVMCTRL->INTFLAG.bit.READY);
 2ea:	4d1c      	ldr	r5, [pc, #112]	; (35c <nvm_write_buffer+0x74>)
 2ec:	7d2c      	ldrb	r4, [r5, #20]
 2ee:	4b1b      	ldr	r3, [pc, #108]	; (35c <nvm_write_buffer+0x74>)
 2f0:	07e4      	lsls	r4, r4, #31
 2f2:	d5fb      	bpl.n	2ec <nvm_write_buffer+0x4>
	
	//set auto page writes
	NVMCTRL->CTRLB.bit.MANW = 0;
 2f4:	2580      	movs	r5, #128	; 0x80
 2f6:	685c      	ldr	r4, [r3, #4]
 2f8:	43ac      	bics	r4, r5
 2fa:	605c      	str	r4, [r3, #4]

	/* Erase the page buffer before buffering new data */
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_PBC | NVMCTRL_CTRLA_CMDEX_KEY;
 2fc:	4c18      	ldr	r4, [pc, #96]	; (360 <nvm_write_buffer+0x78>)
 2fe:	801c      	strh	r4, [r3, #0]

	/* Check if the module is busy */
	while(!NVMCTRL->INTFLAG.bit.READY);
 300:	7d1c      	ldrb	r4, [r3, #20]
 302:	4d16      	ldr	r5, [pc, #88]	; (35c <nvm_write_buffer+0x74>)
 304:	07e4      	lsls	r4, r4, #31
 306:	d5fb      	bpl.n	300 <nvm_write_buffer+0x18>

	/* Clear error flags */
	NVMCTRL->STATUS.reg &= ~NVMCTRL_STATUS_MASK;
 308:	8b2e      	ldrh	r6, [r5, #24]
 30a:	4c16      	ldr	r4, [pc, #88]	; (364 <nvm_write_buffer+0x7c>)
 30c:	0840      	lsrs	r0, r0, #1
 30e:	4034      	ands	r4, r6
 310:	832c      	strh	r4, [r5, #24]
		if (k < (length - 1)) {
			data |= (buffer[k + 1] << 8);
		}
		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
		NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_WP;
 312:	4d15      	ldr	r5, [pc, #84]	; (368 <nvm_write_buffer+0x80>)

	uint32_t nvm_address = destination_address / 2;

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t k = 0; k < length; k += 2) 
 314:	2400      	movs	r4, #0
		if (k < (length - 1)) {
			data |= (buffer[k + 1] << 8);
		}
		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
		NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_WP;
 316:	46ac      	mov	ip, r5
 318:	0040      	lsls	r0, r0, #1
		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[k];
		
		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (k < (length - 1)) {
 31a:	1e57      	subs	r7, r2, #1

	uint32_t nvm_address = destination_address / 2;

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t k = 0; k < length; k += 2) 
 31c:	b2a5      	uxth	r5, r4
 31e:	4295      	cmp	r5, r2
 320:	d20f      	bcs.n	342 <nvm_write_buffer+0x5a>
	{
		uint16_t data;
		
		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[k];
 322:	b2a5      	uxth	r5, r4
 324:	5d4e      	ldrb	r6, [r1, r5]
		
		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (k < (length - 1)) {
 326:	42bd      	cmp	r5, r7
 328:	db01      	blt.n	32e <nvm_write_buffer+0x46>
	for (uint16_t k = 0; k < length; k += 2) 
	{
		uint16_t data;
		
		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[k];
 32a:	b2b5      	uxth	r5, r6
 32c:	e003      	b.n	336 <nvm_write_buffer+0x4e>
		
		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (k < (length - 1)) {
			data |= (buffer[k + 1] << 8);
 32e:	194d      	adds	r5, r1, r5
 330:	786d      	ldrb	r5, [r5, #1]
 332:	022d      	lsls	r5, r5, #8
 334:	4335      	orrs	r5, r6
 336:	1826      	adds	r6, r4, r0
		}
		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
 338:	8035      	strh	r5, [r6, #0]
		NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_WP;
 33a:	4665      	mov	r5, ip
 33c:	3402      	adds	r4, #2
 33e:	801d      	strh	r5, [r3, #0]
 340:	e7ec      	b.n	31c <nvm_write_buffer+0x34>
	}
	
	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((manual_page_write == 0) && (length < NVMCTRL_PAGE_SIZE)) {
 342:	490a      	ldr	r1, [pc, #40]	; (36c <nvm_write_buffer+0x84>)
 344:	7809      	ldrb	r1, [r1, #0]
 346:	2900      	cmp	r1, #0
 348:	d103      	bne.n	352 <nvm_write_buffer+0x6a>
 34a:	2a3f      	cmp	r2, #63	; 0x3f
 34c:	d801      	bhi.n	352 <nvm_write_buffer+0x6a>
		NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_WP;
 34e:	4a06      	ldr	r2, [pc, #24]	; (368 <nvm_write_buffer+0x80>)
 350:	801a      	strh	r2, [r3, #0]
	}
	
	while(!NVMCTRL->INTFLAG.bit.READY);
 352:	7d1a      	ldrb	r2, [r3, #20]
 354:	07d2      	lsls	r2, r2, #31
 356:	d5fc      	bpl.n	352 <nvm_write_buffer+0x6a>
}
 358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 35a:	46c0      	nop			; (mov r8, r8)
 35c:	41004000 	.word	0x41004000
 360:	ffffa544 	.word	0xffffa544
 364:	fffffee0 	.word	0xfffffee0
 368:	ffffa504 	.word	0xffffa504
 36c:	20000084 	.word	0x20000084

00000370 <main>:

int main(void)
{ 
	devID = get_device_id(_DID);
	
	PORT->Group[BOOT_PORT].PINCFG[BOOT_PIN].reg = PORT_PINCFG_INEN | PORT_PINCFG_PULLEN;
 370:	2006      	movs	r0, #6
	
	while(!NVMCTRL->INTFLAG.bit.READY);
}

int main(void)
{ 
 372:	b5f0      	push	{r4, r5, r6, r7, lr}
	devID = get_device_id(_DID);
 374:	4b6d      	ldr	r3, [pc, #436]	; (52c <STACK_SIZE+0x12c>)
	
	PORT->Group[BOOT_PORT].PINCFG[BOOT_PIN].reg = PORT_PINCFG_INEN | PORT_PINCFG_PULLEN;
 376:	496e      	ldr	r1, [pc, #440]	; (530 <STACK_SIZE+0x130>)
	while(!NVMCTRL->INTFLAG.bit.READY);
}

int main(void)
{ 
	devID = get_device_id(_DID);
 378:	699a      	ldr	r2, [r3, #24]
					'B','o','a','r','d',' ','I','D',' ','0','x','0','0','1','\n'};

uint32_t get_device_id(uint32_t did)
{
	uint32_t dev_id;
	dev_id = DSU->DID.reg;
 37a:	699b      	ldr	r3, [r3, #24]
	while(!NVMCTRL->INTFLAG.bit.READY);
}

int main(void)
{ 
	devID = get_device_id(_DID);
 37c:	4a6d      	ldr	r2, [pc, #436]	; (534 <STACK_SIZE+0x134>)
	
	while(!NVMCTRL->INTFLAG.bit.READY);
}

int main(void)
{ 
 37e:	b085      	sub	sp, #20
	devID = get_device_id(_DID);
 380:	6013      	str	r3, [r2, #0]
	
	PORT->Group[BOOT_PORT].PINCFG[BOOT_PIN].reg = PORT_PINCFG_INEN | PORT_PINCFG_PULLEN;
 382:	4b6d      	ldr	r3, [pc, #436]	; (538 <STACK_SIZE+0x138>)
 384:	7008      	strb	r0, [r1, #0]
	if ((PORT->Group[BOOT_PORT].IN.reg & (1u << BOOT_PIN)))
 386:	6a19      	ldr	r1, [r3, #32]
	
	while(!NVMCTRL->INTFLAG.bit.READY);
}

int main(void)
{ 
 388:	af00      	add	r7, sp, #0
 38a:	603a      	str	r2, [r7, #0]
	devID = get_device_id(_DID);
	
	PORT->Group[BOOT_PORT].PINCFG[BOOT_PIN].reg = PORT_PINCFG_INEN | PORT_PINCFG_PULLEN;
	if ((PORT->Group[BOOT_PORT].IN.reg & (1u << BOOT_PIN)))
 38c:	040a      	lsls	r2, r1, #16
 38e:	d50d      	bpl.n	3ac <main+0x3c>
	{
		/*Get the entry point for our new app*/
		app_start_address = *(uint32_t *)(APP_START + 4);
		
		/* Rebase the Stack Pointer */
		__set_MSP(*(uint32_t *) APP_START + 4);
 390:	2080      	movs	r0, #128	; 0x80
	
	PORT->Group[BOOT_PORT].PINCFG[BOOT_PIN].reg = PORT_PINCFG_INEN | PORT_PINCFG_PULLEN;
	if ((PORT->Group[BOOT_PORT].IN.reg & (1u << BOOT_PIN)))
	{
		/*Get the entry point for our new app*/
		app_start_address = *(uint32_t *)(APP_START + 4);
 392:	4a6a      	ldr	r2, [pc, #424]	; (53c <STACK_SIZE+0x13c>)
 394:	496a      	ldr	r1, [pc, #424]	; (540 <STACK_SIZE+0x140>)
 396:	6812      	ldr	r2, [r2, #0]
		
		/* Rebase the Stack Pointer */
		__set_MSP(*(uint32_t *) APP_START + 4);
 398:	0100      	lsls	r0, r0, #4
	
	PORT->Group[BOOT_PORT].PINCFG[BOOT_PIN].reg = PORT_PINCFG_INEN | PORT_PINCFG_PULLEN;
	if ((PORT->Group[BOOT_PORT].IN.reg & (1u << BOOT_PIN)))
	{
		/*Get the entry point for our new app*/
		app_start_address = *(uint32_t *)(APP_START + 4);
 39a:	600a      	str	r2, [r1, #0]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 39c:	6802      	ldr	r2, [r0, #0]
 39e:	3204      	adds	r2, #4
 3a0:	f382 8808 	msr	MSP, r2
		
		/* Rebase the Stack Pointer */
		__set_MSP(*(uint32_t *) APP_START + 4);

		/* Rebase the vector table base address */
		SCB->VTOR = ((uint32_t) APP_START & SCB_VTOR_TBLOFF_Msk);
 3a4:	4a67      	ldr	r2, [pc, #412]	; (544 <STACK_SIZE+0x144>)
 3a6:	6090      	str	r0, [r2, #8]

		/* Jump to application Reset Handler in the application */
		asm("bx %0"::"r"(app_start_address));
 3a8:	680a      	ldr	r2, [r1, #0]
 3aa:	4710      	bx	r2
	}
	/* Flash page size is 64 bytes */
	uint16_t PAGE_SIZE = (8 << NVMCTRL->PARAM.bit.PSZ);	//used to read and write to flash.
 3ac:	2408      	movs	r4, #8
 3ae:	4966      	ldr	r1, [pc, #408]	; (548 <STACK_SIZE+0x148>)
	uint8_t page_buffer[PAGE_SIZE];
 3b0:	4668      	mov	r0, sp

		/* Jump to application Reset Handler in the application */
		asm("bx %0"::"r"(app_start_address));
	}
	/* Flash page size is 64 bytes */
	uint16_t PAGE_SIZE = (8 << NVMCTRL->PARAM.bit.PSZ);	//used to read and write to flash.
 3b2:	688a      	ldr	r2, [r1, #8]
 3b4:	0352      	lsls	r2, r2, #13
 3b6:	0f52      	lsrs	r2, r2, #29
 3b8:	4094      	lsls	r4, r2
 3ba:	b2a2      	uxth	r2, r4
 3bc:	60ba      	str	r2, [r7, #8]
	uint8_t page_buffer[PAGE_SIZE];
 3be:	1de2      	adds	r2, r4, #7
 3c0:	08d2      	lsrs	r2, r2, #3
 3c2:	00d2      	lsls	r2, r2, #3
 3c4:	1a82      	subs	r2, r0, r2
	
	/*set PA14 LED to output and turn on, now we know we are in bootloader mode.*/
	REG_PORT_DIR0 |= (1 << 14); //boot en led set as output.
 3c6:	2080      	movs	r0, #128	; 0x80
		/* Jump to application Reset Handler in the application */
		asm("bx %0"::"r"(app_start_address));
	}
	/* Flash page size is 64 bytes */
	uint16_t PAGE_SIZE = (8 << NVMCTRL->PARAM.bit.PSZ);	//used to read and write to flash.
	uint8_t page_buffer[PAGE_SIZE];
 3c8:	60fa      	str	r2, [r7, #12]
 3ca:	4695      	mov	sp, r2
	
	/*set PA14 LED to output and turn on, now we know we are in bootloader mode.*/
	REG_PORT_DIR0 |= (1 << 14); //boot en led set as output.
 3cc:	681a      	ldr	r2, [r3, #0]
 3ce:	01c0      	lsls	r0, r0, #7
 3d0:	4302      	orrs	r2, r0
 3d2:	601a      	str	r2, [r3, #0]
	REG_PORT_OUT0 |= (1 << 14); //Turn boot en led on.
 3d4:	4a5d      	ldr	r2, [pc, #372]	; (54c <STACK_SIZE+0x14c>)
 3d6:	6813      	ldr	r3, [r2, #0]
 3d8:	4303      	orrs	r3, r0
 3da:	6013      	str	r3, [r2, #0]
	
	/* Make CPU to run at 8MHz by clearing prescalar bits */ 
    SYSCTRL->OSC8M.bit.PRESC = 0;
 3dc:	4a5c      	ldr	r2, [pc, #368]	; (550 <STACK_SIZE+0x150>)
 3de:	4b5d      	ldr	r3, [pc, #372]	; (554 <STACK_SIZE+0x154>)
 3e0:	6a10      	ldr	r0, [r2, #32]
 3e2:	4003      	ands	r3, r0
 3e4:	6213      	str	r3, [r2, #32]
	NVMCTRL->CTRLB.bit.CACHEDIS = 1;
 3e6:	2280      	movs	r2, #128	; 0x80
 3e8:	684b      	ldr	r3, [r1, #4]
 3ea:	02d2      	lsls	r2, r2, #11
 3ec:	4313      	orrs	r3, r2
 3ee:	604b      	str	r3, [r1, #4]

	/* Config Usart */
	UART_sercom_init();
 3f0:	4b59      	ldr	r3, [pc, #356]	; (558 <STACK_SIZE+0x158>)
 3f2:	4798      	blx	r3

    while (1) 
    {
        data_8 = uart_read_byte();
 3f4:	4d59      	ldr	r5, [pc, #356]	; (55c <STACK_SIZE+0x15c>)
 3f6:	47a8      	blx	r5
 3f8:	4b59      	ldr	r3, [pc, #356]	; (560 <STACK_SIZE+0x160>)
 3fa:	607d      	str	r5, [r7, #4]
 3fc:	7018      	strb	r0, [r3, #0]

		if (data_8 == '#')
 3fe:	2823      	cmp	r0, #35	; 0x23
 400:	d10c      	bne.n	41c <STACK_SIZE+0x1c>
		{
			if(!specialTalk)
 402:	4b58      	ldr	r3, [pc, #352]	; (564 <STACK_SIZE+0x164>)
 404:	4d58      	ldr	r5, [pc, #352]	; (568 <STACK_SIZE+0x168>)
 406:	781b      	ldrb	r3, [r3, #0]
 408:	2b00      	cmp	r3, #0
 40a:	d102      	bne.n	412 <STACK_SIZE+0x12>
			{
				sendConfirm();
 40c:	4b57      	ldr	r3, [pc, #348]	; (56c <STACK_SIZE+0x16c>)
 40e:	4798      	blx	r3
 410:	e001      	b.n	416 <STACK_SIZE+0x16>
			}
			else
			{
				uart_write_byte('!');
 412:	2021      	movs	r0, #33	; 0x21
 414:	47a8      	blx	r5
			}
			uart_write_byte((uint8_t)APP_SIZE);
 416:	200d      	movs	r0, #13
 418:	47a8      	blx	r5
 41a:	e7eb      	b.n	3f4 <main+0x84>
			
		}
		else if (data_8 == 'e')
 41c:	2865      	cmp	r0, #101	; 0x65
 41e:	d118      	bne.n	452 <STACK_SIZE+0x52>
		{
			/*erase NVM from 0x800 (starting point) to top of NVM*/
			//erase from 0x800 to the top of nvm.
			for(i = APP_START; i < FLASH_SIZE; i = i + 256)
 420:	2380      	movs	r3, #128	; 0x80
 422:	4d53      	ldr	r5, [pc, #332]	; (570 <STACK_SIZE+0x170>)
 424:	011b      	lsls	r3, r3, #4
 426:	602b      	str	r3, [r5, #0]
 428:	6828      	ldr	r0, [r5, #0]
 42a:	4b52      	ldr	r3, [pc, #328]	; (574 <STACK_SIZE+0x174>)
 42c:	4298      	cmp	r0, r3
 42e:	d806      	bhi.n	43e <STACK_SIZE+0x3e>
			{
				nvm_erase_row(i,PAGE_SIZE);
 430:	4b51      	ldr	r3, [pc, #324]	; (578 <STACK_SIZE+0x178>)
 432:	0021      	movs	r1, r4
 434:	4798      	blx	r3
		}
		else if (data_8 == 'e')
		{
			/*erase NVM from 0x800 (starting point) to top of NVM*/
			//erase from 0x800 to the top of nvm.
			for(i = APP_START; i < FLASH_SIZE; i = i + 256)
 436:	682b      	ldr	r3, [r5, #0]
 438:	3301      	adds	r3, #1
 43a:	33ff      	adds	r3, #255	; 0xff
 43c:	e7f3      	b.n	426 <STACK_SIZE+0x26>
			{
				nvm_erase_row(i,PAGE_SIZE);
			}
			if(!specialTalk)
 43e:	4b49      	ldr	r3, [pc, #292]	; (564 <STACK_SIZE+0x164>)
 440:	781b      	ldrb	r3, [r3, #0]
 442:	2b00      	cmp	r3, #0
 444:	d101      	bne.n	44a <STACK_SIZE+0x4a>
			{
				sendConfirm();			
 446:	4b49      	ldr	r3, [pc, #292]	; (56c <STACK_SIZE+0x16c>)
 448:	e7d3      	b.n	3f2 <main+0x82>
			}
			else
			{
				uart_write_byte('`');
 44a:	2060      	movs	r0, #96	; 0x60
 44c:	4b46      	ldr	r3, [pc, #280]	; (568 <STACK_SIZE+0x168>)
 44e:	4798      	blx	r3
 450:	e7d0      	b.n	3f4 <main+0x84>
			}
			
		}
		else if (data_8 == 'p')
 452:	2870      	cmp	r0, #112	; 0x70
 454:	d126      	bne.n	4a4 <STACK_SIZE+0xa4>
		{
			if(!specialTalk)
 456:	4b43      	ldr	r3, [pc, #268]	; (564 <STACK_SIZE+0x164>)
 458:	781b      	ldrb	r3, [r3, #0]
 45a:	2b00      	cmp	r3, #0
 45c:	d101      	bne.n	462 <STACK_SIZE+0x62>
			{
				sendConfirm();
 45e:	4b43      	ldr	r3, [pc, #268]	; (56c <STACK_SIZE+0x16c>)
 460:	4798      	blx	r3
			}

			for (i = 0; i < PAGE_SIZE; i++)
 462:	2300      	movs	r3, #0
 464:	4d42      	ldr	r5, [pc, #264]	; (570 <STACK_SIZE+0x170>)
 466:	602b      	str	r3, [r5, #0]
 468:	682e      	ldr	r6, [r5, #0]
 46a:	42b4      	cmp	r4, r6
 46c:	d906      	bls.n	47c <STACK_SIZE+0x7c>
			{
				page_buffer[i] = uart_read_byte();
 46e:	687b      	ldr	r3, [r7, #4]
 470:	4798      	blx	r3
 472:	68fb      	ldr	r3, [r7, #12]
 474:	5598      	strb	r0, [r3, r6]
			if(!specialTalk)
			{
				sendConfirm();
			}

			for (i = 0; i < PAGE_SIZE; i++)
 476:	682b      	ldr	r3, [r5, #0]
 478:	3301      	adds	r3, #1
 47a:	e7f4      	b.n	466 <STACK_SIZE+0x66>
			{
				page_buffer[i] = uart_read_byte();
			}
			nvm_write_buffer(dest_addr, page_buffer, PAGE_SIZE);
 47c:	4d3f      	ldr	r5, [pc, #252]	; (57c <STACK_SIZE+0x17c>)
 47e:	4b40      	ldr	r3, [pc, #256]	; (580 <STACK_SIZE+0x180>)
 480:	68ba      	ldr	r2, [r7, #8]
 482:	68f9      	ldr	r1, [r7, #12]
 484:	6828      	ldr	r0, [r5, #0]
 486:	4798      	blx	r3
			dest_addr += PAGE_SIZE;
 488:	682b      	ldr	r3, [r5, #0]
 48a:	191b      	adds	r3, r3, r4
 48c:	602b      	str	r3, [r5, #0]
			
			if(!specialTalk)
 48e:	4b35      	ldr	r3, [pc, #212]	; (564 <STACK_SIZE+0x164>)
 490:	781b      	ldrb	r3, [r3, #0]
 492:	2b00      	cmp	r3, #0
 494:	d102      	bne.n	49c <STACK_SIZE+0x9c>
			{
				sendConfirm();
 496:	4b35      	ldr	r3, [pc, #212]	; (56c <STACK_SIZE+0x16c>)
 498:	4798      	blx	r3
 49a:	e01b      	b.n	4d4 <STACK_SIZE+0xd4>
			}
			else
			{
				uart_write_byte('%');
 49c:	2025      	movs	r0, #37	; 0x25
 49e:	4b32      	ldr	r3, [pc, #200]	; (568 <STACK_SIZE+0x168>)
 4a0:	4798      	blx	r3
 4a2:	e017      	b.n	4d4 <STACK_SIZE+0xd4>
			}
			REG_PORT_OUTTGL0 = (1 << 14); //blinks light

		}
		else if (data_8 == 'v')
 4a4:	2876      	cmp	r0, #118	; 0x76
 4a6:	d11a      	bne.n	4de <STACK_SIZE+0xde>
		{
			if(!specialTalk)
 4a8:	4b2e      	ldr	r3, [pc, #184]	; (564 <STACK_SIZE+0x164>)
 4aa:	781b      	ldrb	r3, [r3, #0]
 4ac:	2b00      	cmp	r3, #0
 4ae:	d101      	bne.n	4b4 <STACK_SIZE+0xb4>
			{
				sendConfirm();
 4b0:	4b2e      	ldr	r3, [pc, #184]	; (56c <STACK_SIZE+0x16c>)
 4b2:	4798      	blx	r3
			}
			for (i = 0; i < (PAGE_SIZE); i++)
 4b4:	2300      	movs	r3, #0
 4b6:	4d2e      	ldr	r5, [pc, #184]	; (570 <STACK_SIZE+0x170>)
 4b8:	602b      	str	r3, [r5, #0]
 4ba:	682b      	ldr	r3, [r5, #0]
 4bc:	429c      	cmp	r4, r3
 4be:	d909      	bls.n	4d4 <STACK_SIZE+0xd4>
			{	
				//++ after pointer post increments by 1
				uart_write_byte(* flash_byte_ptr++);
 4c0:	4a30      	ldr	r2, [pc, #192]	; (584 <STACK_SIZE+0x184>)
 4c2:	6813      	ldr	r3, [r2, #0]
 4c4:	1c59      	adds	r1, r3, #1
 4c6:	6011      	str	r1, [r2, #0]
 4c8:	7818      	ldrb	r0, [r3, #0]
 4ca:	4b27      	ldr	r3, [pc, #156]	; (568 <STACK_SIZE+0x168>)
 4cc:	4798      	blx	r3
		{
			if(!specialTalk)
			{
				sendConfirm();
			}
			for (i = 0; i < (PAGE_SIZE); i++)
 4ce:	682b      	ldr	r3, [r5, #0]
 4d0:	3301      	adds	r3, #1
 4d2:	e7f1      	b.n	4b8 <STACK_SIZE+0xb8>
			{	
				//++ after pointer post increments by 1
				uart_write_byte(* flash_byte_ptr++);
				
			}
			REG_PORT_OUTTGL0 = (1 << 14); //blinks light
 4d4:	2280      	movs	r2, #128	; 0x80
 4d6:	4b2c      	ldr	r3, [pc, #176]	; (588 <STACK_SIZE+0x188>)
 4d8:	01d2      	lsls	r2, r2, #7
 4da:	601a      	str	r2, [r3, #0]
 4dc:	e78a      	b.n	3f4 <main+0x84>
		}
		else if (data_8 == 'm')
 4de:	286d      	cmp	r0, #109	; 0x6d
 4e0:	d101      	bne.n	4e6 <STACK_SIZE+0xe6>
		{
			setup_ptrs();
 4e2:	4b2a      	ldr	r3, [pc, #168]	; (58c <STACK_SIZE+0x18c>)
 4e4:	e785      	b.n	3f2 <main+0x82>
		}
		else if (data_8 == 'i')
 4e6:	2869      	cmp	r0, #105	; 0x69
 4e8:	d101      	bne.n	4ee <STACK_SIZE+0xee>
		{
			info();
 4ea:	4b29      	ldr	r3, [pc, #164]	; (590 <STACK_SIZE+0x190>)
 4ec:	e781      	b.n	3f2 <main+0x82>
		}
		else if(data_8 == '~')
 4ee:	287e      	cmp	r0, #126	; 0x7e
 4f0:	d103      	bne.n	4fa <STACK_SIZE+0xfa>
		{
			//special talk.
			specialTalk = 1;
 4f2:	2201      	movs	r2, #1
 4f4:	4b1b      	ldr	r3, [pc, #108]	; (564 <STACK_SIZE+0x164>)
 4f6:	701a      	strb	r2, [r3, #0]
 4f8:	e77c      	b.n	3f4 <main+0x84>
		}
		else if(data_8 == '^')
 4fa:	285e      	cmp	r0, #94	; 0x5e
 4fc:	d000      	beq.n	500 <STACK_SIZE+0x100>
 4fe:	e779      	b.n	3f4 <main+0x84>
		{
			uint8_t next = 8;
			//Testing device ID over UART.
			for(i = 0;i < 4;i++)
 500:	2300      	movs	r3, #0
			//special talk.
			specialTalk = 1;
		}
		else if(data_8 == '^')
		{
			uint8_t next = 8;
 502:	2608      	movs	r6, #8
			//Testing device ID over UART.
			for(i = 0;i < 4;i++)
 504:	4d1a      	ldr	r5, [pc, #104]	; (570 <STACK_SIZE+0x170>)
 506:	602b      	str	r3, [r5, #0]
 508:	682b      	ldr	r3, [r5, #0]
 50a:	2b03      	cmp	r3, #3
 50c:	d900      	bls.n	510 <STACK_SIZE+0x110>
 50e:	e771      	b.n	3f4 <main+0x84>
			{
				//uart_write_byte(devsel++);
				uart_write_byte(devID >> next);
 510:	683b      	ldr	r3, [r7, #0]
 512:	681b      	ldr	r3, [r3, #0]
 514:	0018      	movs	r0, r3
 516:	40f0      	lsrs	r0, r6
 518:	607b      	str	r3, [r7, #4]
 51a:	b2c0      	uxtb	r0, r0
 51c:	4b12      	ldr	r3, [pc, #72]	; (568 <STACK_SIZE+0x168>)
 51e:	4798      	blx	r3
		}
		else if(data_8 == '^')
		{
			uint8_t next = 8;
			//Testing device ID over UART.
			for(i = 0;i < 4;i++)
 520:	682b      	ldr	r3, [r5, #0]
			{
				//uart_write_byte(devsel++);
				uart_write_byte(devID >> next);
				next+=8;
 522:	3608      	adds	r6, #8
		}
		else if(data_8 == '^')
		{
			uint8_t next = 8;
			//Testing device ID over UART.
			for(i = 0;i < 4;i++)
 524:	3301      	adds	r3, #1
			{
				//uart_write_byte(devsel++);
				uart_write_byte(devID >> next);
				next+=8;
 526:	b2f6      	uxtb	r6, r6
		}
		else if(data_8 == '^')
		{
			uint8_t next = 8;
			//Testing device ID over UART.
			for(i = 0;i < 4;i++)
 528:	602b      	str	r3, [r5, #0]
 52a:	e7ed      	b.n	508 <STACK_SIZE+0x108>
 52c:	41002000 	.word	0x41002000
 530:	4100444f 	.word	0x4100444f
 534:	2000007c 	.word	0x2000007c
 538:	41004400 	.word	0x41004400
 53c:	00000804 	.word	0x00000804
 540:	2000008c 	.word	0x2000008c
 544:	e000ed00 	.word	0xe000ed00
 548:	41004000 	.word	0x41004000
 54c:	41004410 	.word	0x41004410
 550:	40000800 	.word	0x40000800
 554:	fffffcff 	.word	0xfffffcff
 558:	000001c1 	.word	0x000001c1
 55c:	0000029d 	.word	0x0000029d
 560:	2000004e 	.word	0x2000004e
 564:	2000006c 	.word	0x2000006c
 568:	00000241 	.word	0x00000241
 56c:	00000271 	.word	0x00000271
 570:	20000074 	.word	0x20000074
 574:	00003fff 	.word	0x00003fff
 578:	000002b1 	.word	0x000002b1
 57c:	20000070 	.word	0x20000070
 580:	000002e9 	.word	0x000002e9
 584:	20000088 	.word	0x20000088
 588:	4100441c 	.word	0x4100441c
 58c:	00000199 	.word	0x00000199
 590:	00000281 	.word	0x00000281

00000594 <__libc_init_array>:
 594:	4b0e      	ldr	r3, [pc, #56]	; (5d0 <__libc_init_array+0x3c>)
 596:	b570      	push	{r4, r5, r6, lr}
 598:	2500      	movs	r5, #0
 59a:	001e      	movs	r6, r3
 59c:	4c0d      	ldr	r4, [pc, #52]	; (5d4 <__libc_init_array+0x40>)
 59e:	1ae4      	subs	r4, r4, r3
 5a0:	10a4      	asrs	r4, r4, #2
 5a2:	42a5      	cmp	r5, r4
 5a4:	d004      	beq.n	5b0 <__libc_init_array+0x1c>
 5a6:	00ab      	lsls	r3, r5, #2
 5a8:	58f3      	ldr	r3, [r6, r3]
 5aa:	4798      	blx	r3
 5ac:	3501      	adds	r5, #1
 5ae:	e7f8      	b.n	5a2 <__libc_init_array+0xe>
 5b0:	f000 f816 	bl	5e0 <_init>
 5b4:	4b08      	ldr	r3, [pc, #32]	; (5d8 <__libc_init_array+0x44>)
 5b6:	2500      	movs	r5, #0
 5b8:	001e      	movs	r6, r3
 5ba:	4c08      	ldr	r4, [pc, #32]	; (5dc <__libc_init_array+0x48>)
 5bc:	1ae4      	subs	r4, r4, r3
 5be:	10a4      	asrs	r4, r4, #2
 5c0:	42a5      	cmp	r5, r4
 5c2:	d004      	beq.n	5ce <__libc_init_array+0x3a>
 5c4:	00ab      	lsls	r3, r5, #2
 5c6:	58f3      	ldr	r3, [r6, r3]
 5c8:	4798      	blx	r3
 5ca:	3501      	adds	r5, #1
 5cc:	e7f8      	b.n	5c0 <__libc_init_array+0x2c>
 5ce:	bd70      	pop	{r4, r5, r6, pc}
 5d0:	000005ec 	.word	0x000005ec
 5d4:	000005ec 	.word	0x000005ec
 5d8:	000005ec 	.word	0x000005ec
 5dc:	000005f0 	.word	0x000005f0

000005e0 <_init>:
 5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 5e2:	46c0      	nop			; (mov r8, r8)
 5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 5e6:	bc08      	pop	{r3}
 5e8:	469e      	mov	lr, r3
 5ea:	4770      	bx	lr

000005ec <__init_array_start>:
 5ec:	000000b5 	.word	0x000000b5

000005f0 <_fini>:
 5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 5f2:	46c0      	nop			; (mov r8, r8)
 5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 5f6:	bc08      	pop	{r3}
 5f8:	469e      	mov	lr, r3
 5fa:	4770      	bx	lr

000005fc <__fini_array_start>:
 5fc:	0000008d 	.word	0x0000008d
