
UART_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000560  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000050  20000000  00000560  00010000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  20000050  000005b0  00010050  2**2
                  ALLOC
  3 .stack        00000400  20000090  000005f0  00010050  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010050  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010078  2**0
                  CONTENTS, READONLY
  6 .debug_info   00006470  00000000  00000000  000100d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005e1  00000000  00000000  00016543  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000002b1  00000000  00000000  00016b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000090  00000000  00000000  00016dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000b8  00000000  00000000  00016e65  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000a317  00000000  00000000  00016f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00000d4c  00000000  00000000  00021234  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00041208  00000000  00000000  00021f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000154  00000000  00000000  00063188  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
   0:	20000490 	.word	0x20000490
   4:	000000f5 	.word	0x000000f5
   8:	000000ed 	.word	0x000000ed
   c:	000000ed 	.word	0x000000ed
	...
  2c:	000000ed 	.word	0x000000ed
	...
  38:	000000ed 	.word	0x000000ed
  3c:	000000ed 	.word	0x000000ed
  40:	000000ed 	.word	0x000000ed
  44:	000000ed 	.word	0x000000ed
  48:	000000ed 	.word	0x000000ed
  4c:	000000ed 	.word	0x000000ed
  50:	000000ed 	.word	0x000000ed
  54:	000000ed 	.word	0x000000ed
  58:	000000ed 	.word	0x000000ed
  5c:	00000000 	.word	0x00000000
  60:	000000ed 	.word	0x000000ed
  64:	000000ed 	.word	0x000000ed
  68:	000000ed 	.word	0x000000ed
	...
  74:	000000ed 	.word	0x000000ed
  78:	000000ed 	.word	0x000000ed
  7c:	000000ed 	.word	0x000000ed
	...
  88:	000000ed 	.word	0x000000ed

0000008c <__do_global_dtors_aux>:
  8c:	b510      	push	{r4, lr}
  8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
  90:	7823      	ldrb	r3, [r4, #0]
  92:	2b00      	cmp	r3, #0
  94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
  96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
  98:	2b00      	cmp	r3, #0
  9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
  9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
  9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
  a0:	bf00      	nop
  a2:	2301      	movs	r3, #1
  a4:	7023      	strb	r3, [r4, #0]
  a6:	bd10      	pop	{r4, pc}
  a8:	20000050 	.word	0x20000050
  ac:	00000000 	.word	0x00000000
  b0:	00000560 	.word	0x00000560

000000b4 <frame_dummy>:
  b4:	b508      	push	{r3, lr}
  b6:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
  b8:	2b00      	cmp	r3, #0
  ba:	d003      	beq.n	c4 <frame_dummy+0x10>
  bc:	4807      	ldr	r0, [pc, #28]	; (dc <frame_dummy+0x28>)
  be:	4908      	ldr	r1, [pc, #32]	; (e0 <frame_dummy+0x2c>)
  c0:	e000      	b.n	c4 <frame_dummy+0x10>
  c2:	bf00      	nop
  c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
  c6:	6803      	ldr	r3, [r0, #0]
  c8:	2b00      	cmp	r3, #0
  ca:	d100      	bne.n	ce <frame_dummy+0x1a>
  cc:	bd08      	pop	{r3, pc}
  ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
  d0:	2b00      	cmp	r3, #0
  d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
  d4:	4798      	blx	r3
  d6:	e7f9      	b.n	cc <frame_dummy+0x18>
  d8:	00000000 	.word	0x00000000
  dc:	00000560 	.word	0x00000560
  e0:	20000054 	.word	0x20000054
  e4:	00000560 	.word	0x00000560
  e8:	00000000 	.word	0x00000000

000000ec <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
			asm("bx %0"::"r"(0x00));
  ec:	2300      	movs	r3, #0
  ee:	4718      	bx	r3
        }
  f0:	e7fc      	b.n	ec <Dummy_Handler>
	...

000000f4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  f4:	481c      	ldr	r0, [pc, #112]	; (168 <Reset_Handler+0x74>)
  f6:	491d      	ldr	r1, [pc, #116]	; (16c <Reset_Handler+0x78>)
  f8:	b510      	push	{r4, lr}
  fa:	2300      	movs	r3, #0

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  fc:	4288      	cmp	r0, r1
  fe:	d101      	bne.n	104 <Reset_Handler+0x10>
 100:	4b1b      	ldr	r3, [pc, #108]	; (170 <Reset_Handler+0x7c>)
 102:	e007      	b.n	114 <Reset_Handler+0x20>
                for (; pDest < &_erelocate;) {
 104:	4c1b      	ldr	r4, [pc, #108]	; (174 <Reset_Handler+0x80>)
 106:	18ca      	adds	r2, r1, r3
 108:	42a2      	cmp	r2, r4
 10a:	d2f9      	bcs.n	100 <Reset_Handler+0xc>
                        *pDest++ = *pSrc++;
 10c:	58c4      	ldr	r4, [r0, r3]
 10e:	3304      	adds	r3, #4
 110:	6014      	str	r4, [r2, #0]
 112:	e7f7      	b.n	104 <Reset_Handler+0x10>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 114:	4a18      	ldr	r2, [pc, #96]	; (178 <Reset_Handler+0x84>)
 116:	4293      	cmp	r3, r2
 118:	d202      	bcs.n	120 <Reset_Handler+0x2c>
                *pDest++ = 0;
 11a:	2200      	movs	r2, #0
 11c:	c304      	stmia	r3!, {r2}
 11e:	e7f9      	b.n	114 <Reset_Handler+0x20>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 120:	21ff      	movs	r1, #255	; 0xff

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 122:	2002      	movs	r0, #2
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 124:	4b15      	ldr	r3, [pc, #84]	; (17c <Reset_Handler+0x88>)
 126:	4a16      	ldr	r2, [pc, #88]	; (180 <Reset_Handler+0x8c>)
 128:	438b      	bics	r3, r1
 12a:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
 12c:	2230      	movs	r2, #48	; 0x30
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 12e:	4b15      	ldr	r3, [pc, #84]	; (184 <Reset_Handler+0x90>)
 130:	6258      	str	r0, [r3, #36]	; 0x24
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
 132:	4b15      	ldr	r3, [pc, #84]	; (188 <Reset_Handler+0x94>)
 134:	7b99      	ldrb	r1, [r3, #14]
 136:	4391      	bics	r1, r2
 138:	3a10      	subs	r2, #16
 13a:	4311      	orrs	r1, r2
 13c:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 13e:	7b99      	ldrb	r1, [r3, #14]
 140:	3a14      	subs	r2, #20
 142:	4391      	bics	r1, r2
 144:	3a04      	subs	r2, #4
 146:	4311      	orrs	r1, r2
 148:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 14a:	2103      	movs	r1, #3
 14c:	7b9a      	ldrb	r2, [r3, #14]
 14e:	438a      	bics	r2, r1
 150:	4302      	orrs	r2, r0
 152:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
 154:	4a0d      	ldr	r2, [pc, #52]	; (18c <Reset_Handler+0x98>)
 156:	317d      	adds	r1, #125	; 0x7d
 158:	6853      	ldr	r3, [r2, #4]
 15a:	430b      	orrs	r3, r1
 15c:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
 15e:	4b0c      	ldr	r3, [pc, #48]	; (190 <Reset_Handler+0x9c>)
 160:	4798      	blx	r3

        /* Branch to main function */
        main();
 162:	4b0c      	ldr	r3, [pc, #48]	; (194 <Reset_Handler+0xa0>)
 164:	4798      	blx	r3

        /* Infinite loop */
        while (1);
 166:	e7fe      	b.n	166 <Reset_Handler+0x72>
 168:	00000560 	.word	0x00000560
 16c:	20000000 	.word	0x20000000
 170:	20000050 	.word	0x20000050
 174:	20000050 	.word	0x20000050
 178:	20000090 	.word	0x20000090
 17c:	00000000 	.word	0x00000000
 180:	e000ed00 	.word	0xe000ed00
 184:	410070fc 	.word	0x410070fc
 188:	41004800 	.word	0x41004800
 18c:	41004000 	.word	0x41004000
 190:	000004f5 	.word	0x000004f5
 194:	0000035d 	.word	0x0000035d

00000198 <nvm_get_config>:
	
	/*get a pointer to the module hardware instance.*/
	Nvmctrl *const nvm_module = NVMCTRL;
	
	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
 198:	2108      	movs	r1, #8
 19a:	4a06      	ldr	r2, [pc, #24]	; (1b4 <nvm_get_config+0x1c>)
 19c:	4806      	ldr	r0, [pc, #24]	; (1b8 <nvm_get_config+0x20>)
 19e:	6893      	ldr	r3, [r2, #8]
 1a0:	035b      	lsls	r3, r3, #13
 1a2:	0f5b      	lsrs	r3, r3, #29
 1a4:	4099      	lsls	r1, r3
 1a6:	8001      	strh	r1, [r0, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
 1a8:	6893      	ldr	r3, [r2, #8]
 1aa:	8043      	strh	r3, [r0, #2]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
 1ac:	8b13      	ldrh	r3, [r2, #24]
		return STATUS_FAIL;
 1ae:	2001      	movs	r0, #1
	}
};
 1b0:	4770      	bx	lr
 1b2:	46c0      	nop			; (mov r8, r8)
 1b4:	41004000 	.word	0x41004000
 1b8:	2000006c 	.word	0x2000006c

000001bc <UART_sercom_init>:
    */
    uint16_t pad = pinmux >> 16;    // get pad (port+pin)
    uint8_t port = pad >> 5;        // get port
    uint8_t pin  = pad & 0x1F;      // get number of pin - no port information anymore
    
    PORT->Group[port].PINCFG[pin].bit.PMUXEN =1;
 1bc:	4a18      	ldr	r2, [pc, #96]	; (220 <UART_sercom_init+0x64>)
    PORT->Group[port].PMUX[pin/2].reg |=  ( (uint8_t)( (pinmux&0xFFFF) <<(4*(pin&1)) ) ); 
}

/*init USART module on SERCOM1*/
void UART_sercom_init()
{
 1be:	b530      	push	{r4, r5, lr}
    */
    uint16_t pad = pinmux >> 16;    // get pad (port+pin)
    uint8_t port = pad >> 5;        // get port
    uint8_t pin  = pad & 0x1F;      // get number of pin - no port information anymore
    
    PORT->Group[port].PINCFG[pin].bit.PMUXEN =1;
 1c0:	1c11      	adds	r1, r2, #0
 1c2:	2501      	movs	r5, #1
 1c4:	3159      	adds	r1, #89	; 0x59
 1c6:	780b      	ldrb	r3, [r1, #0]
    
    /* each pinmux register is for two pins! with pin/2 you can get the index of the needed pinmux register
       the p mux resiter is 8Bit   (7:4 odd pin; 3:0 evan bit)  */
    // reset pinmux values.                             VV shift if pin is odd (if evan:  (4*(pin & 1))==0  )
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
 1c8:	240f      	movs	r4, #15
    */
    uint16_t pad = pinmux >> 16;    // get pad (port+pin)
    uint8_t port = pad >> 5;        // get port
    uint8_t pin  = pad & 0x1F;      // get number of pin - no port information anymore
    
    PORT->Group[port].PINCFG[pin].bit.PMUXEN =1;
 1ca:	432b      	orrs	r3, r5
 1cc:	700b      	strb	r3, [r1, #0]
    
    /* each pinmux register is for two pins! with pin/2 you can get the index of the needed pinmux register
       the p mux resiter is 8Bit   (7:4 odd pin; 3:0 evan bit)  */
    // reset pinmux values.                             VV shift if pin is odd (if evan:  (4*(pin & 1))==0  )
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
 1ce:	1c13      	adds	r3, r2, #0
                    //          
    // set new values
    PORT->Group[port].PMUX[pin/2].reg |=  ( (uint8_t)( (pinmux&0xFFFF) <<(4*(pin&1)) ) ); 
 1d0:	2120      	movs	r1, #32
    PORT->Group[port].PINCFG[pin].bit.PMUXEN =1;
    
    /* each pinmux register is for two pins! with pin/2 you can get the index of the needed pinmux register
       the p mux resiter is 8Bit   (7:4 odd pin; 3:0 evan bit)  */
    // reset pinmux values.                             VV shift if pin is odd (if evan:  (4*(pin & 1))==0  )
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
 1d2:	333c      	adds	r3, #60	; 0x3c
 1d4:	7818      	ldrb	r0, [r3, #0]
    */
    uint16_t pad = pinmux >> 16;    // get pad (port+pin)
    uint8_t port = pad >> 5;        // get port
    uint8_t pin  = pad & 0x1F;      // get number of pin - no port information anymore
    
    PORT->Group[port].PINCFG[pin].bit.PMUXEN =1;
 1d6:	3258      	adds	r2, #88	; 0x58
    
    /* each pinmux register is for two pins! with pin/2 you can get the index of the needed pinmux register
       the p mux resiter is 8Bit   (7:4 odd pin; 3:0 evan bit)  */
    // reset pinmux values.                             VV shift if pin is odd (if evan:  (4*(pin & 1))==0  )
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
 1d8:	4020      	ands	r0, r4
 1da:	7018      	strb	r0, [r3, #0]
                    //          
    // set new values
    PORT->Group[port].PMUX[pin/2].reg |=  ( (uint8_t)( (pinmux&0xFFFF) <<(4*(pin&1)) ) ); 
 1dc:	7818      	ldrb	r0, [r3, #0]
 1de:	4308      	orrs	r0, r1
 1e0:	7018      	strb	r0, [r3, #0]
 1e2:	2002      	movs	r0, #2
    */
    uint16_t pad = pinmux >> 16;    // get pad (port+pin)
    uint8_t port = pad >> 5;        // get port
    uint8_t pin  = pad & 0x1F;      // get number of pin - no port information anymore
    
    PORT->Group[port].PINCFG[pin].bit.PMUXEN =1;
 1e4:	7811      	ldrb	r1, [r2, #0]
 1e6:	4329      	orrs	r1, r5
 1e8:	7011      	strb	r1, [r2, #0]
    
    /* each pinmux register is for two pins! with pin/2 you can get the index of the needed pinmux register
       the p mux resiter is 8Bit   (7:4 odd pin; 3:0 evan bit)  */
    // reset pinmux values.                             VV shift if pin is odd (if evan:  (4*(pin & 1))==0  )
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
 1ea:	781a      	ldrb	r2, [r3, #0]
 1ec:	43a2      	bics	r2, r4
 1ee:	701a      	strb	r2, [r3, #0]
                    //          
    // set new values
    PORT->Group[port].PMUX[pin/2].reg |=  ( (uint8_t)( (pinmux&0xFFFF) <<(4*(pin&1)) ) ); 
 1f0:	7819      	ldrb	r1, [r3, #0]
	//Pmux eve = n/1, odd = (n-1)/2
	pin_set_peripheral_function(PINMUX_PA25C_SERCOM1_PAD3); // SAMD09 TX
	pin_set_peripheral_function(PINMUX_PA24C_SERCOM1_PAD2); // SAMD09 RX
	
	//apbcmak
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM1;
 1f2:	4a0c      	ldr	r2, [pc, #48]	; (224 <UART_sercom_init+0x68>)
       the p mux resiter is 8Bit   (7:4 odd pin; 3:0 evan bit)  */
    // reset pinmux values.                             VV shift if pin is odd (if evan:  (4*(pin & 1))==0  )
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
                    //          
    // set new values
    PORT->Group[port].PMUX[pin/2].reg |=  ( (uint8_t)( (pinmux&0xFFFF) <<(4*(pin&1)) ) ); 
 1f4:	4301      	orrs	r1, r0
 1f6:	7019      	strb	r1, [r3, #0]
	//Pmux eve = n/1, odd = (n-1)/2
	pin_set_peripheral_function(PINMUX_PA25C_SERCOM1_PAD3); // SAMD09 TX
	pin_set_peripheral_function(PINMUX_PA24C_SERCOM1_PAD2); // SAMD09 RX
	
	//apbcmak
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM1;
 1f8:	2108      	movs	r1, #8
 1fa:	6a13      	ldr	r3, [r2, #32]
 1fc:	430b      	orrs	r3, r1
 1fe:	6213      	str	r3, [r2, #32]
	
	//gclk config
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM1_GCLK_ID_CORE) | GCLK_CLKCTRL_GEN(0) | GCLK_CLKCTRL_CLKEN;
 200:	4a09      	ldr	r2, [pc, #36]	; (228 <UART_sercom_init+0x6c>)
 202:	4b0a      	ldr	r3, [pc, #40]	; (22c <UART_sercom_init+0x70>)
 204:	805a      	strh	r2, [r3, #2]
	
	//Config SERCOM1 module for UART
	SERCOM1->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK | SERCOM_USART_CTRLA_DORD | SERCOM_USART_CTRLA_RXPO(0x3) | SERCOM_USART_CTRLA_TXPO(0x1);
 206:	4b0a      	ldr	r3, [pc, #40]	; (230 <UART_sercom_init+0x74>)
 208:	4a0a      	ldr	r2, [pc, #40]	; (234 <UART_sercom_init+0x78>)
 20a:	601a      	str	r2, [r3, #0]
	
	SERCOM1->USART.CTRLB.reg = SERCOM_USART_CTRLB_RXEN | SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_CHSIZE(0);
 20c:	22c0      	movs	r2, #192	; 0xc0
 20e:	0292      	lsls	r2, r2, #10
 210:	605a      	str	r2, [r3, #4]
	
	/*configure baud rate at 115200*/
	SERCOM1->USART.BAUD.reg = BAUD_VAL;
 212:	4a09      	ldr	r2, [pc, #36]	; (238 <UART_sercom_init+0x7c>)
 214:	819a      	strh	r2, [r3, #12]
	
	SERCOM1->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
 216:	681a      	ldr	r2, [r3, #0]
 218:	4302      	orrs	r2, r0
 21a:	601a      	str	r2, [r3, #0]
	
}
 21c:	bd30      	pop	{r4, r5, pc}
 21e:	46c0      	nop			; (mov r8, r8)
 220:	41004400 	.word	0x41004400
 224:	40000400 	.word	0x40000400
 228:	0000400f 	.word	0x0000400f
 22c:	40000c00 	.word	0x40000c00
 230:	42000c00 	.word	0x42000c00
 234:	40310004 	.word	0x40310004
 238:	ffffc504 	.word	0xffffc504

0000023c <uart_write_byte>:
#endif

//this will be replaced with UART_sercom_simpleWrite function.
void uart_write_byte(uint8_t data)
{
	while(!BOOT_SERCOM->USART.INTFLAG.bit.DRE);
 23c:	4b03      	ldr	r3, [pc, #12]	; (24c <uart_write_byte+0x10>)
 23e:	7e1a      	ldrb	r2, [r3, #24]
 240:	07d2      	lsls	r2, r2, #31
 242:	d5fb      	bpl.n	23c <uart_write_byte>
	BOOT_SERCOM->USART.DATA.reg = (uint16_t)data;
 244:	b280      	uxth	r0, r0
 246:	8518      	strh	r0, [r3, #40]	; 0x28
	
}
 248:	4770      	bx	lr
 24a:	46c0      	nop			; (mov r8, r8)
 24c:	42000c00 	.word	0x42000c00

00000250 <uart_read_byte>:
#endif

//this will be replaced with UART_sercom_simpleRead function.
uint8_t uart_read_byte(void)
{
	while(!BOOT_SERCOM->USART.INTFLAG.bit.RXC);
 250:	4b03      	ldr	r3, [pc, #12]	; (260 <uart_read_byte+0x10>)
 252:	7e1a      	ldrb	r2, [r3, #24]
 254:	0752      	lsls	r2, r2, #29
 256:	d5fb      	bpl.n	250 <uart_read_byte>
	return((uint8_t)(BOOT_SERCOM->USART.DATA.reg & 0x00FF));
 258:	8d18      	ldrh	r0, [r3, #40]	; 0x28
 25a:	b2c0      	uxtb	r0, r0
}
 25c:	4770      	bx	lr
 25e:	46c0      	nop			; (mov r8, r8)
 260:	42000c00 	.word	0x42000c00

00000264 <nvm_erase_row>:
		return 0;
	}
#endif
	
	/* Check if the module is busy */
	while(!NVMCTRL->INTFLAG.bit.READY);
 264:	4b09      	ldr	r3, [pc, #36]	; (28c <nvm_erase_row+0x28>)
 266:	7d1a      	ldrb	r2, [r3, #20]
 268:	07d2      	lsls	r2, r2, #31
 26a:	d5fb      	bpl.n	264 <nvm_erase_row>
	
	/* Clear error flags */
	NVMCTRL->STATUS.reg &= ~NVMCTRL_STATUS_MASK;
 26c:	8b19      	ldrh	r1, [r3, #24]
 26e:	4a08      	ldr	r2, [pc, #32]	; (290 <nvm_erase_row+0x2c>)
 270:	400a      	ands	r2, r1
 272:	831a      	strh	r2, [r3, #24]
	
	while(!(NVMCTRL->INTFLAG.bit.READY));
 274:	7d19      	ldrb	r1, [r3, #20]
 276:	4a05      	ldr	r2, [pc, #20]	; (28c <nvm_erase_row+0x28>)
 278:	07c9      	lsls	r1, r1, #31
 27a:	d5fb      	bpl.n	274 <nvm_erase_row+0x10>
	
	/* Set address and command */	
	NVMCTRL->ADDR.reg = (row_address / 2);
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_ER;
 27c:	4905      	ldr	r1, [pc, #20]	; (294 <nvm_erase_row+0x30>)
	NVMCTRL->STATUS.reg &= ~NVMCTRL_STATUS_MASK;
	
	while(!(NVMCTRL->INTFLAG.bit.READY));
	
	/* Set address and command */	
	NVMCTRL->ADDR.reg = (row_address / 2);
 27e:	0840      	lsrs	r0, r0, #1
 280:	61d0      	str	r0, [r2, #28]
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_ER;
 282:	8011      	strh	r1, [r2, #0]
	while(!(NVMCTRL->INTFLAG.bit.READY));
 284:	7d1a      	ldrb	r2, [r3, #20]
 286:	07d2      	lsls	r2, r2, #31
 288:	d5fc      	bpl.n	284 <nvm_erase_row+0x20>
	
	return 1;
}
 28a:	4770      	bx	lr
 28c:	41004000 	.word	0x41004000
 290:	fffffee0 	.word	0xfffffee0
 294:	ffffa502 	.word	0xffffa502

00000298 <nvm_write_buffer>:


void nvm_write_buffer(uint32_t destination_address, const uint8_t *buffer, uint16_t length)
{
 298:	b5f0      	push	{r4, r5, r6, r7, lr}
		return 0;
	}
#endif

	/* Check if the module is busy */
	while(!NVMCTRL->INTFLAG.bit.READY);
 29a:	4b1a      	ldr	r3, [pc, #104]	; (304 <nvm_write_buffer+0x6c>)
 29c:	7d1c      	ldrb	r4, [r3, #20]
 29e:	07e4      	lsls	r4, r4, #31
 2a0:	d5fb      	bpl.n	29a <nvm_write_buffer+0x2>
	
	//set auto page writes
	NVMCTRL->CTRLB.bit.MANW = 0;
 2a2:	2580      	movs	r5, #128	; 0x80
 2a4:	685c      	ldr	r4, [r3, #4]
 2a6:	43ac      	bics	r4, r5
 2a8:	605c      	str	r4, [r3, #4]

	/* Erase the page buffer before buffering new data */
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_PBC | NVMCTRL_CTRLA_CMDEX_KEY;
 2aa:	4c17      	ldr	r4, [pc, #92]	; (308 <nvm_write_buffer+0x70>)
 2ac:	801c      	strh	r4, [r3, #0]

	/* Check if the module is busy */
	while(!NVMCTRL->INTFLAG.bit.READY);
 2ae:	7d1c      	ldrb	r4, [r3, #20]
 2b0:	4d14      	ldr	r5, [pc, #80]	; (304 <nvm_write_buffer+0x6c>)
 2b2:	07e4      	lsls	r4, r4, #31
 2b4:	d5fb      	bpl.n	2ae <nvm_write_buffer+0x16>

	/* Clear error flags */
	NVMCTRL->STATUS.reg &= ~NVMCTRL_STATUS_MASK;
 2b6:	8b2e      	ldrh	r6, [r5, #24]
 2b8:	4c14      	ldr	r4, [pc, #80]	; (30c <nvm_write_buffer+0x74>)

	uint32_t nvm_address = destination_address / 2;
 2ba:	0840      	lsrs	r0, r0, #1

	/* Check if the module is busy */
	while(!NVMCTRL->INTFLAG.bit.READY);

	/* Clear error flags */
	NVMCTRL->STATUS.reg &= ~NVMCTRL_STATUS_MASK;
 2bc:	4034      	ands	r4, r6
 2be:	832c      	strh	r4, [r5, #24]

	uint32_t nvm_address = destination_address / 2;

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t k = 0; k < length; k += 2) 
 2c0:	2400      	movs	r4, #0
 2c2:	0040      	lsls	r0, r0, #1
 2c4:	b2a5      	uxth	r5, r4
 2c6:	4295      	cmp	r5, r2
 2c8:	d210      	bcs.n	2ec <nvm_write_buffer+0x54>
	{
		uint16_t data;
		
		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[k];
 2ca:	b2a5      	uxth	r5, r4
		
		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (k < (length - 1)) {
 2cc:	1e57      	subs	r7, r2, #1
	for (uint16_t k = 0; k < length; k += 2) 
	{
		uint16_t data;
		
		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[k];
 2ce:	5d4e      	ldrb	r6, [r1, r5]
		
		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (k < (length - 1)) {
 2d0:	42bd      	cmp	r5, r7
 2d2:	db01      	blt.n	2d8 <nvm_write_buffer+0x40>
	for (uint16_t k = 0; k < length; k += 2) 
	{
		uint16_t data;
		
		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[k];
 2d4:	b2b5      	uxth	r5, r6
 2d6:	e003      	b.n	2e0 <nvm_write_buffer+0x48>
		
		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (k < (length - 1)) {
			data |= (buffer[k + 1] << 8);
 2d8:	194d      	adds	r5, r1, r5
 2da:	786d      	ldrb	r5, [r5, #1]
 2dc:	022d      	lsls	r5, r5, #8
 2de:	4335      	orrs	r5, r6
 2e0:	1826      	adds	r6, r4, r0
		}
		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
 2e2:	8035      	strh	r5, [r6, #0]
		NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_WP;
 2e4:	4d0a      	ldr	r5, [pc, #40]	; (310 <nvm_write_buffer+0x78>)
 2e6:	3402      	adds	r4, #2
 2e8:	801d      	strh	r5, [r3, #0]
 2ea:	e7eb      	b.n	2c4 <nvm_write_buffer+0x2c>
	}
	
	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == 0) && (length < NVMCTRL_PAGE_SIZE)) {
 2ec:	4909      	ldr	r1, [pc, #36]	; (314 <nvm_write_buffer+0x7c>)
 2ee:	7909      	ldrb	r1, [r1, #4]
 2f0:	2900      	cmp	r1, #0
 2f2:	d103      	bne.n	2fc <nvm_write_buffer+0x64>
 2f4:	2a3f      	cmp	r2, #63	; 0x3f
 2f6:	d801      	bhi.n	2fc <nvm_write_buffer+0x64>
		NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_WP;
 2f8:	4a05      	ldr	r2, [pc, #20]	; (310 <nvm_write_buffer+0x78>)
 2fa:	801a      	strh	r2, [r3, #0]
	}
	
	while(!NVMCTRL->INTFLAG.bit.READY);
 2fc:	7d1a      	ldrb	r2, [r3, #20]
 2fe:	07d2      	lsls	r2, r2, #31
 300:	d5fc      	bpl.n	2fc <nvm_write_buffer+0x64>
}
 302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 304:	41004000 	.word	0x41004000
 308:	ffffa544 	.word	0xffffa544
 30c:	fffffee0 	.word	0xfffffee0
 310:	ffffa504 	.word	0xffffa504
 314:	2000006c 	.word	0x2000006c

00000318 <setup_ptrs>:
}

void setup_ptrs()
{
		//set values, for flash pointers.
		dest_addr = APP_START;
 318:	2380      	movs	r3, #128	; 0x80
 31a:	4a05      	ldr	r2, [pc, #20]	; (330 <setup_ptrs+0x18>)
 31c:	011b      	lsls	r3, r3, #4
 31e:	6013      	str	r3, [r2, #0]
		flash_ptr = APP_START;
 320:	4a04      	ldr	r2, [pc, #16]	; (334 <setup_ptrs+0x1c>)
		app_start_address = *flash_ptr;
 322:	6819      	ldr	r1, [r3, #0]

void setup_ptrs()
{
		//set values, for flash pointers.
		dest_addr = APP_START;
		flash_ptr = APP_START;
 324:	6013      	str	r3, [r2, #0]
		app_start_address = *flash_ptr;
 326:	4a04      	ldr	r2, [pc, #16]	; (338 <setup_ptrs+0x20>)
 328:	6011      	str	r1, [r2, #0]
		flash_byte_ptr = APP_START;
 32a:	4a04      	ldr	r2, [pc, #16]	; (33c <setup_ptrs+0x24>)
 32c:	6013      	str	r3, [r2, #0]
}
 32e:	4770      	bx	lr
 330:	20000074 	.word	0x20000074
 334:	20000080 	.word	0x20000080
 338:	20000088 	.word	0x20000088
 33c:	20000084 	.word	0x20000084

00000340 <info>:

void info()
{
 340:	b510      	push	{r4, lr}
 342:	2400      	movs	r4, #0
	uint8_t i;
	
	for(i = 0;i<=78-1;i++)
	{
		uart_write_byte(aVER[i]);
 344:	4b03      	ldr	r3, [pc, #12]	; (354 <info+0x14>)
 346:	5ce0      	ldrb	r0, [r4, r3]
 348:	4b03      	ldr	r3, [pc, #12]	; (358 <info+0x18>)
 34a:	3401      	adds	r4, #1
 34c:	4798      	blx	r3

void info()
{
	uint8_t i;
	
	for(i = 0;i<=78-1;i++)
 34e:	2c4e      	cmp	r4, #78	; 0x4e
 350:	d1f8      	bne.n	344 <info+0x4>
	{
		uart_write_byte(aVER[i]);
	}
}
 352:	bd10      	pop	{r4, pc}
 354:	20000000 	.word	0x20000000
 358:	0000023d 	.word	0x0000023d

0000035c <main>:
	while(!NVMCTRL->INTFLAG.bit.READY);
}

int main(void)
{ 
	PORT->Group[BOOT_PORT].PINCFG[BOOT_PIN].reg = PORT_PINCFG_INEN | PORT_PINCFG_PULLEN;
 35c:	2106      	movs	r1, #6
	
	while(!NVMCTRL->INTFLAG.bit.READY);
}

int main(void)
{ 
 35e:	b5f0      	push	{r4, r5, r6, r7, lr}
	PORT->Group[BOOT_PORT].PINCFG[BOOT_PIN].reg = PORT_PINCFG_INEN | PORT_PINCFG_PULLEN;
 360:	4a4c      	ldr	r2, [pc, #304]	; (494 <STACK_SIZE+0x94>)
 362:	4b4d      	ldr	r3, [pc, #308]	; (498 <STACK_SIZE+0x98>)
 364:	7011      	strb	r1, [r2, #0]
	if ((PORT->Group[BOOT_PORT].IN.reg & (1u << BOOT_PIN)))
 366:	6a1a      	ldr	r2, [r3, #32]
	
	while(!NVMCTRL->INTFLAG.bit.READY);
}

int main(void)
{ 
 368:	b085      	sub	sp, #20
 36a:	af00      	add	r7, sp, #0
	PORT->Group[BOOT_PORT].PINCFG[BOOT_PIN].reg = PORT_PINCFG_INEN | PORT_PINCFG_PULLEN;
	if ((PORT->Group[BOOT_PORT].IN.reg & (1u << BOOT_PIN)))
 36c:	0412      	lsls	r2, r2, #16
 36e:	d50d      	bpl.n	38c <main+0x30>
	{
		/*Get the entry point for our new app*/
		app_start_address = *(uint32_t *)(APP_START + 4);
		
		/* Rebase the Stack Pointer */
		__set_MSP(*(uint32_t *) APP_START + 4);
 370:	2080      	movs	r0, #128	; 0x80
{ 
	PORT->Group[BOOT_PORT].PINCFG[BOOT_PIN].reg = PORT_PINCFG_INEN | PORT_PINCFG_PULLEN;
	if ((PORT->Group[BOOT_PORT].IN.reg & (1u << BOOT_PIN)))
	{
		/*Get the entry point for our new app*/
		app_start_address = *(uint32_t *)(APP_START + 4);
 372:	4a4a      	ldr	r2, [pc, #296]	; (49c <STACK_SIZE+0x9c>)
 374:	494a      	ldr	r1, [pc, #296]	; (4a0 <STACK_SIZE+0xa0>)
 376:	6812      	ldr	r2, [r2, #0]
		
		/* Rebase the Stack Pointer */
		__set_MSP(*(uint32_t *) APP_START + 4);
 378:	0100      	lsls	r0, r0, #4
{ 
	PORT->Group[BOOT_PORT].PINCFG[BOOT_PIN].reg = PORT_PINCFG_INEN | PORT_PINCFG_PULLEN;
	if ((PORT->Group[BOOT_PORT].IN.reg & (1u << BOOT_PIN)))
	{
		/*Get the entry point for our new app*/
		app_start_address = *(uint32_t *)(APP_START + 4);
 37a:	600a      	str	r2, [r1, #0]
		
		/* Rebase the Stack Pointer */
		__set_MSP(*(uint32_t *) APP_START + 4);
 37c:	6802      	ldr	r2, [r0, #0]
 37e:	3204      	adds	r2, #4

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 380:	f382 8808 	msr	MSP, r2

		/* Rebase the vector table base address */
		SCB->VTOR = ((uint32_t) APP_START & SCB_VTOR_TBLOFF_Msk);
 384:	4a47      	ldr	r2, [pc, #284]	; (4a4 <STACK_SIZE+0xa4>)
 386:	6090      	str	r0, [r2, #8]

		/* Jump to application Reset Handler in the application */
		asm("bx %0"::"r"(app_start_address));
 388:	680a      	ldr	r2, [r1, #0]
 38a:	4710      	bx	r2
	}
	/*set PA14 LED to output and turn on, now we know we are in bootloader mode.*/
	REG_PORT_DIR0 |= (1 << 14);
 38c:	2180      	movs	r1, #128	; 0x80
 38e:	681a      	ldr	r2, [r3, #0]
 390:	01c9      	lsls	r1, r1, #7
 392:	430a      	orrs	r2, r1
 394:	601a      	str	r2, [r3, #0]
	REG_PORT_OUT0 |= (1<<14);
 396:	4a44      	ldr	r2, [pc, #272]	; (4a8 <STACK_SIZE+0xa8>)
 398:	6813      	ldr	r3, [r2, #0]
 39a:	430b      	orrs	r3, r1
 39c:	6013      	str	r3, [r2, #0]
	
	/* Make CPU to run at 8MHz by clearing prescalar bits */ 
    SYSCTRL->OSC8M.bit.PRESC = 0;
 39e:	4a43      	ldr	r2, [pc, #268]	; (4ac <STACK_SIZE+0xac>)
 3a0:	4b43      	ldr	r3, [pc, #268]	; (4b0 <STACK_SIZE+0xb0>)
 3a2:	6a11      	ldr	r1, [r2, #32]
 3a4:	400b      	ands	r3, r1
	NVMCTRL->CTRLB.bit.CACHEDIS = 1;
 3a6:	2180      	movs	r1, #128	; 0x80
	/*set PA14 LED to output and turn on, now we know we are in bootloader mode.*/
	REG_PORT_DIR0 |= (1 << 14);
	REG_PORT_OUT0 |= (1<<14);
	
	/* Make CPU to run at 8MHz by clearing prescalar bits */ 
    SYSCTRL->OSC8M.bit.PRESC = 0;
 3a8:	6213      	str	r3, [r2, #32]
	NVMCTRL->CTRLB.bit.CACHEDIS = 1;
 3aa:	4a42      	ldr	r2, [pc, #264]	; (4b4 <STACK_SIZE+0xb4>)
 3ac:	02c9      	lsls	r1, r1, #11
 3ae:	6853      	ldr	r3, [r2, #4]
 3b0:	430b      	orrs	r3, r1
 3b2:	6053      	str	r3, [r2, #4]
	
	/*get NVM configureation*/
	nvm_get_config();
 3b4:	4b40      	ldr	r3, [pc, #256]	; (4b8 <STACK_SIZE+0xb8>)
 3b6:	4798      	blx	r3
	/* Config Usart */
	UART_sercom_init();
 3b8:	4b40      	ldr	r3, [pc, #256]	; (4bc <STACK_SIZE+0xbc>)
 3ba:	4798      	blx	r3
	
	/* Flash page size is 64 bytes */
	#define PAGE_SIZE	_nvm_dev.page_size	//used to read and write to flash.
	uint8_t page_buffer[PAGE_SIZE];
 3bc:	466a      	mov	r2, sp
 3be:	4b40      	ldr	r3, [pc, #256]	; (4c0 <STACK_SIZE+0xc0>)
 3c0:	881c      	ldrh	r4, [r3, #0]
 3c2:	1de3      	adds	r3, r4, #7
 3c4:	08db      	lsrs	r3, r3, #3
 3c6:	00db      	lsls	r3, r3, #3
 3c8:	1ad3      	subs	r3, r2, r3
 3ca:	469d      	mov	sp, r3
 3cc:	60fb      	str	r3, [r7, #12]
	
    while (1) 
    {
        data_8 = uart_read_byte();
 3ce:	4d3d      	ldr	r5, [pc, #244]	; (4c4 <STACK_SIZE+0xc4>)
 3d0:	47a8      	blx	r5
 3d2:	4b3d      	ldr	r3, [pc, #244]	; (4c8 <STACK_SIZE+0xc8>)
 3d4:	60bd      	str	r5, [r7, #8]
 3d6:	7018      	strb	r0, [r3, #0]
		//data_8 = UART_sercom_simpleRead(SERCOM1);
		if (data_8 == '#')
 3d8:	2823      	cmp	r0, #35	; 0x23
 3da:	d105      	bne.n	3e8 <main+0x8c>
		{
			uart_write_byte('s');
 3dc:	3050      	adds	r0, #80	; 0x50
 3de:	4d3b      	ldr	r5, [pc, #236]	; (4cc <STACK_SIZE+0xcc>)
 3e0:	47a8      	blx	r5
			uart_write_byte((uint8_t)APP_SIZE);
 3e2:	200d      	movs	r0, #13
 3e4:	47a8      	blx	r5
 3e6:	e7f2      	b.n	3ce <main+0x72>
		}
		else if (data_8 == 'e')
 3e8:	2865      	cmp	r0, #101	; 0x65
 3ea:	d112      	bne.n	412 <STACK_SIZE+0x12>
		{
			/*erase NVM from 0x800 (starting point) to top of NVM*/
			//erase from 0x800 to the top of nvm.
			for(i = APP_START; i < FLASH_SIZE; i = i + 256)
 3ec:	2380      	movs	r3, #128	; 0x80
 3ee:	4d38      	ldr	r5, [pc, #224]	; (4d0 <STACK_SIZE+0xd0>)
 3f0:	011b      	lsls	r3, r3, #4
 3f2:	602b      	str	r3, [r5, #0]
 3f4:	6828      	ldr	r0, [r5, #0]
 3f6:	4b37      	ldr	r3, [pc, #220]	; (4d4 <STACK_SIZE+0xd4>)
 3f8:	4298      	cmp	r0, r3
 3fa:	d806      	bhi.n	40a <STACK_SIZE+0xa>
			{
				nvm_erase_row(i,PAGE_SIZE);
 3fc:	4b36      	ldr	r3, [pc, #216]	; (4d8 <STACK_SIZE+0xd8>)
 3fe:	1c21      	adds	r1, r4, #0
 400:	4798      	blx	r3
		}
		else if (data_8 == 'e')
		{
			/*erase NVM from 0x800 (starting point) to top of NVM*/
			//erase from 0x800 to the top of nvm.
			for(i = APP_START; i < FLASH_SIZE; i = i + 256)
 402:	682b      	ldr	r3, [r5, #0]
 404:	3301      	adds	r3, #1
 406:	33ff      	adds	r3, #255	; 0xff
 408:	e7f3      	b.n	3f2 <main+0x96>
			{
				nvm_erase_row(i,PAGE_SIZE);
			}
			uart_write_byte('s');
 40a:	2073      	movs	r0, #115	; 0x73
 40c:	4b2f      	ldr	r3, [pc, #188]	; (4cc <STACK_SIZE+0xcc>)
 40e:	4798      	blx	r3
 410:	e7dd      	b.n	3ce <main+0x72>
		}
		else if (data_8 == 'p')
 412:	2870      	cmp	r0, #112	; 0x70
 414:	d122      	bne.n	45c <STACK_SIZE+0x5c>
		{
			
			uart_write_byte('s');
 416:	4e2d      	ldr	r6, [pc, #180]	; (4cc <STACK_SIZE+0xcc>)
 418:	3003      	adds	r0, #3
 41a:	47b0      	blx	r6

			for (i = 0; i < _nvm_dev.page_size; i++)
 41c:	2300      	movs	r3, #0
 41e:	4d2c      	ldr	r5, [pc, #176]	; (4d0 <STACK_SIZE+0xd0>)
 420:	607e      	str	r6, [r7, #4]
 422:	602b      	str	r3, [r5, #0]
 424:	682e      	ldr	r6, [r5, #0]
 426:	42a6      	cmp	r6, r4
 428:	d207      	bcs.n	43a <STACK_SIZE+0x3a>
			{
				page_buffer[i] = uart_read_byte();
 42a:	68bb      	ldr	r3, [r7, #8]
 42c:	4798      	blx	r3
 42e:	68fb      	ldr	r3, [r7, #12]
 430:	5598      	strb	r0, [r3, r6]
		else if (data_8 == 'p')
		{
			
			uart_write_byte('s');

			for (i = 0; i < _nvm_dev.page_size; i++)
 432:	682b      	ldr	r3, [r5, #0]
 434:	3301      	adds	r3, #1
 436:	602b      	str	r3, [r5, #0]
 438:	e7f4      	b.n	424 <STACK_SIZE+0x24>
			{
				page_buffer[i] = uart_read_byte();
				//page_buffer[i] = UART_sercom_simpleRead(SERCOM1);
			}
			nvm_write_buffer(dest_addr, page_buffer, _nvm_dev.page_size);
 43a:	4d28      	ldr	r5, [pc, #160]	; (4dc <STACK_SIZE+0xdc>)
 43c:	1c22      	adds	r2, r4, #0
 43e:	6828      	ldr	r0, [r5, #0]
 440:	68f9      	ldr	r1, [r7, #12]
 442:	4b27      	ldr	r3, [pc, #156]	; (4e0 <STACK_SIZE+0xe0>)
 444:	4798      	blx	r3
			dest_addr += _nvm_dev.page_size;
 446:	682b      	ldr	r3, [r5, #0]

			uart_write_byte('s');
 448:	2073      	movs	r0, #115	; 0x73
			{
				page_buffer[i] = uart_read_byte();
				//page_buffer[i] = UART_sercom_simpleRead(SERCOM1);
			}
			nvm_write_buffer(dest_addr, page_buffer, _nvm_dev.page_size);
			dest_addr += _nvm_dev.page_size;
 44a:	18e3      	adds	r3, r4, r3
 44c:	602b      	str	r3, [r5, #0]

			uart_write_byte('s');
 44e:	687b      	ldr	r3, [r7, #4]
 450:	4798      	blx	r3
			REG_PORT_OUTTGL0 = (1 << 14); //blinks light
 452:	2280      	movs	r2, #128	; 0x80
 454:	4b23      	ldr	r3, [pc, #140]	; (4e4 <STACK_SIZE+0xe4>)
 456:	01d2      	lsls	r2, r2, #7
 458:	601a      	str	r2, [r3, #0]
 45a:	e7b8      	b.n	3ce <main+0x72>

		}
		else if (data_8 == 'v')
 45c:	2876      	cmp	r0, #118	; 0x76
 45e:	d111      	bne.n	484 <STACK_SIZE+0x84>
		{
			uart_write_byte('s');
 460:	3803      	subs	r0, #3
 462:	4e1a      	ldr	r6, [pc, #104]	; (4cc <STACK_SIZE+0xcc>)
 464:	47b0      	blx	r6
			for (i = 0; i < (_nvm_dev.page_size); i++)
 466:	2300      	movs	r3, #0
 468:	4d19      	ldr	r5, [pc, #100]	; (4d0 <STACK_SIZE+0xd0>)
 46a:	602b      	str	r3, [r5, #0]
 46c:	682b      	ldr	r3, [r5, #0]
 46e:	42a3      	cmp	r3, r4
 470:	d2ad      	bcs.n	3ce <main+0x72>
			{	
				//++ after pointer post increments by 1
				uart_write_byte(* flash_byte_ptr++);
 472:	4a1d      	ldr	r2, [pc, #116]	; (4e8 <STACK_SIZE+0xe8>)
 474:	6813      	ldr	r3, [r2, #0]
 476:	1c59      	adds	r1, r3, #1
 478:	6011      	str	r1, [r2, #0]
 47a:	7818      	ldrb	r0, [r3, #0]
 47c:	47b0      	blx	r6

		}
		else if (data_8 == 'v')
		{
			uart_write_byte('s');
			for (i = 0; i < (_nvm_dev.page_size); i++)
 47e:	682b      	ldr	r3, [r5, #0]
 480:	3301      	adds	r3, #1
 482:	e7f2      	b.n	46a <STACK_SIZE+0x6a>
				
			}
		}
		else if (data_8 == 'm')
		{
			setup_ptrs();
 484:	4b19      	ldr	r3, [pc, #100]	; (4ec <STACK_SIZE+0xec>)
				//++ after pointer post increments by 1
				uart_write_byte(* flash_byte_ptr++);
				
			}
		}
		else if (data_8 == 'm')
 486:	286d      	cmp	r0, #109	; 0x6d
 488:	d002      	beq.n	490 <STACK_SIZE+0x90>
		{
			setup_ptrs();
		}
		else if (data_8 == 'i')
 48a:	2869      	cmp	r0, #105	; 0x69
 48c:	d19f      	bne.n	3ce <main+0x72>
		{
			info();
 48e:	4b18      	ldr	r3, [pc, #96]	; (4f0 <STACK_SIZE+0xf0>)
 490:	4798      	blx	r3
 492:	e79c      	b.n	3ce <main+0x72>
 494:	4100444f 	.word	0x4100444f
 498:	41004400 	.word	0x41004400
 49c:	00000804 	.word	0x00000804
 4a0:	20000088 	.word	0x20000088
 4a4:	e000ed00 	.word	0xe000ed00
 4a8:	41004410 	.word	0x41004410
 4ac:	40000800 	.word	0x40000800
 4b0:	fffffcff 	.word	0xfffffcff
 4b4:	41004000 	.word	0x41004000
 4b8:	00000199 	.word	0x00000199
 4bc:	000001bd 	.word	0x000001bd
 4c0:	2000006c 	.word	0x2000006c
 4c4:	00000251 	.word	0x00000251
 4c8:	2000004e 	.word	0x2000004e
 4cc:	0000023d 	.word	0x0000023d
 4d0:	20000078 	.word	0x20000078
 4d4:	00003fff 	.word	0x00003fff
 4d8:	00000265 	.word	0x00000265
 4dc:	20000074 	.word	0x20000074
 4e0:	00000299 	.word	0x00000299
 4e4:	4100441c 	.word	0x4100441c
 4e8:	20000084 	.word	0x20000084
 4ec:	00000319 	.word	0x00000319
 4f0:	00000341 	.word	0x00000341

000004f4 <__libc_init_array>:
 4f4:	4b0e      	ldr	r3, [pc, #56]	; (530 <__libc_init_array+0x3c>)
 4f6:	b570      	push	{r4, r5, r6, lr}
 4f8:	2500      	movs	r5, #0
 4fa:	1c1e      	adds	r6, r3, #0
 4fc:	4c0d      	ldr	r4, [pc, #52]	; (534 <__libc_init_array+0x40>)
 4fe:	1ae4      	subs	r4, r4, r3
 500:	10a4      	asrs	r4, r4, #2
 502:	42a5      	cmp	r5, r4
 504:	d004      	beq.n	510 <__libc_init_array+0x1c>
 506:	00ab      	lsls	r3, r5, #2
 508:	58f3      	ldr	r3, [r6, r3]
 50a:	4798      	blx	r3
 50c:	3501      	adds	r5, #1
 50e:	e7f8      	b.n	502 <__libc_init_array+0xe>
 510:	f000 f816 	bl	540 <_init>
 514:	4b08      	ldr	r3, [pc, #32]	; (538 <__libc_init_array+0x44>)
 516:	2500      	movs	r5, #0
 518:	1c1e      	adds	r6, r3, #0
 51a:	4c08      	ldr	r4, [pc, #32]	; (53c <__libc_init_array+0x48>)
 51c:	1ae4      	subs	r4, r4, r3
 51e:	10a4      	asrs	r4, r4, #2
 520:	42a5      	cmp	r5, r4
 522:	d004      	beq.n	52e <__libc_init_array+0x3a>
 524:	00ab      	lsls	r3, r5, #2
 526:	58f3      	ldr	r3, [r6, r3]
 528:	4798      	blx	r3
 52a:	3501      	adds	r5, #1
 52c:	e7f8      	b.n	520 <__libc_init_array+0x2c>
 52e:	bd70      	pop	{r4, r5, r6, pc}
 530:	0000054c 	.word	0x0000054c
 534:	0000054c 	.word	0x0000054c
 538:	0000054c 	.word	0x0000054c
 53c:	00000550 	.word	0x00000550

00000540 <_init>:
 540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 542:	46c0      	nop			; (mov r8, r8)
 544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 546:	bc08      	pop	{r3}
 548:	469e      	mov	lr, r3
 54a:	4770      	bx	lr

0000054c <__init_array_start>:
 54c:	000000b5 	.word	0x000000b5

00000550 <_fini>:
 550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 552:	46c0      	nop			; (mov r8, r8)
 554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 556:	bc08      	pop	{r3}
 558:	469e      	mov	lr, r3
 55a:	4770      	bx	lr

0000055c <__fini_array_start>:
 55c:	0000008d 	.word	0x0000008d
