
UART_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005fc  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000050  20000000  000005fc  00010000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000038  20000050  0000064c  00010050  2**2
                  ALLOC
  3 .stack        00000400  20000088  00000684  00010050  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010050  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010078  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000657d  00000000  00000000  000100d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000064f  00000000  00000000  00016650  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000002da  00000000  00000000  00016c9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000000a0  00000000  00000000  00016f79  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000c8  00000000  00000000  00017019  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000a316  00000000  00000000  000170e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00000d6d  00000000  00000000  000213f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0004121a  00000000  00000000  00022164  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000178  00000000  00000000  00063380  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
   0:	20000488 	.word	0x20000488
   4:	000000f5 	.word	0x000000f5
   8:	000000ed 	.word	0x000000ed
   c:	000000ed 	.word	0x000000ed
	...
  2c:	000000ed 	.word	0x000000ed
	...
  38:	000000ed 	.word	0x000000ed
  3c:	000000ed 	.word	0x000000ed
  40:	000000ed 	.word	0x000000ed
  44:	000000ed 	.word	0x000000ed
  48:	000000ed 	.word	0x000000ed
  4c:	000000ed 	.word	0x000000ed
  50:	000000ed 	.word	0x000000ed
  54:	000000ed 	.word	0x000000ed
  58:	000000ed 	.word	0x000000ed
  5c:	00000000 	.word	0x00000000
  60:	000000ed 	.word	0x000000ed
  64:	000000ed 	.word	0x000000ed
  68:	0000023d 	.word	0x0000023d
	...
  74:	000000ed 	.word	0x000000ed
  78:	000000ed 	.word	0x000000ed
  7c:	000000ed 	.word	0x000000ed
	...
  88:	000000ed 	.word	0x000000ed

0000008c <__do_global_dtors_aux>:
  8c:	b510      	push	{r4, lr}
  8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
  90:	7823      	ldrb	r3, [r4, #0]
  92:	2b00      	cmp	r3, #0
  94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
  96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
  98:	2b00      	cmp	r3, #0
  9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
  9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
  9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
  a0:	bf00      	nop
  a2:	2301      	movs	r3, #1
  a4:	7023      	strb	r3, [r4, #0]
  a6:	bd10      	pop	{r4, pc}
  a8:	20000050 	.word	0x20000050
  ac:	00000000 	.word	0x00000000
  b0:	000005fc 	.word	0x000005fc

000000b4 <frame_dummy>:
  b4:	b508      	push	{r3, lr}
  b6:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
  b8:	2b00      	cmp	r3, #0
  ba:	d003      	beq.n	c4 <frame_dummy+0x10>
  bc:	4807      	ldr	r0, [pc, #28]	; (dc <frame_dummy+0x28>)
  be:	4908      	ldr	r1, [pc, #32]	; (e0 <frame_dummy+0x2c>)
  c0:	e000      	b.n	c4 <frame_dummy+0x10>
  c2:	bf00      	nop
  c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
  c6:	6803      	ldr	r3, [r0, #0]
  c8:	2b00      	cmp	r3, #0
  ca:	d100      	bne.n	ce <frame_dummy+0x1a>
  cc:	bd08      	pop	{r3, pc}
  ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
  d0:	2b00      	cmp	r3, #0
  d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
  d4:	4798      	blx	r3
  d6:	e7f9      	b.n	cc <frame_dummy+0x18>
  d8:	00000000 	.word	0x00000000
  dc:	000005fc 	.word	0x000005fc
  e0:	20000054 	.word	0x20000054
  e4:	000005fc 	.word	0x000005fc
  e8:	00000000 	.word	0x00000000

000000ec <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
			asm("bx %0"::"r"(0x00));
  ec:	2300      	movs	r3, #0
  ee:	4718      	bx	r3
        }
  f0:	e7fc      	b.n	ec <Dummy_Handler>
	...

000000f4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  f4:	481c      	ldr	r0, [pc, #112]	; (168 <Reset_Handler+0x74>)
  f6:	491d      	ldr	r1, [pc, #116]	; (16c <Reset_Handler+0x78>)
  f8:	b510      	push	{r4, lr}
  fa:	2300      	movs	r3, #0

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  fc:	4288      	cmp	r0, r1
  fe:	d101      	bne.n	104 <Reset_Handler+0x10>
 100:	4b1b      	ldr	r3, [pc, #108]	; (170 <Reset_Handler+0x7c>)
 102:	e007      	b.n	114 <Reset_Handler+0x20>
                for (; pDest < &_erelocate;) {
 104:	4c1b      	ldr	r4, [pc, #108]	; (174 <Reset_Handler+0x80>)
 106:	18ca      	adds	r2, r1, r3
 108:	42a2      	cmp	r2, r4
 10a:	d2f9      	bcs.n	100 <Reset_Handler+0xc>
                        *pDest++ = *pSrc++;
 10c:	58c4      	ldr	r4, [r0, r3]
 10e:	3304      	adds	r3, #4
 110:	6014      	str	r4, [r2, #0]
 112:	e7f7      	b.n	104 <Reset_Handler+0x10>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 114:	4a18      	ldr	r2, [pc, #96]	; (178 <Reset_Handler+0x84>)
 116:	4293      	cmp	r3, r2
 118:	d202      	bcs.n	120 <Reset_Handler+0x2c>
                *pDest++ = 0;
 11a:	2200      	movs	r2, #0
 11c:	c304      	stmia	r3!, {r2}
 11e:	e7f9      	b.n	114 <Reset_Handler+0x20>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 120:	21ff      	movs	r1, #255	; 0xff

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 122:	2002      	movs	r0, #2
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 124:	4b15      	ldr	r3, [pc, #84]	; (17c <Reset_Handler+0x88>)
 126:	4a16      	ldr	r2, [pc, #88]	; (180 <Reset_Handler+0x8c>)
 128:	438b      	bics	r3, r1
 12a:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
 12c:	2230      	movs	r2, #48	; 0x30
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 12e:	4b15      	ldr	r3, [pc, #84]	; (184 <Reset_Handler+0x90>)
 130:	6258      	str	r0, [r3, #36]	; 0x24
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
 132:	4b15      	ldr	r3, [pc, #84]	; (188 <Reset_Handler+0x94>)
 134:	7b99      	ldrb	r1, [r3, #14]
 136:	4391      	bics	r1, r2
 138:	3a10      	subs	r2, #16
 13a:	4311      	orrs	r1, r2
 13c:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 13e:	7b99      	ldrb	r1, [r3, #14]
 140:	3a14      	subs	r2, #20
 142:	4391      	bics	r1, r2
 144:	3a04      	subs	r2, #4
 146:	4311      	orrs	r1, r2
 148:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 14a:	2103      	movs	r1, #3
 14c:	7b9a      	ldrb	r2, [r3, #14]
 14e:	438a      	bics	r2, r1
 150:	4302      	orrs	r2, r0
 152:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
 154:	4a0d      	ldr	r2, [pc, #52]	; (18c <Reset_Handler+0x98>)
 156:	317d      	adds	r1, #125	; 0x7d
 158:	6853      	ldr	r3, [r2, #4]
 15a:	430b      	orrs	r3, r1
 15c:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
 15e:	4b0c      	ldr	r3, [pc, #48]	; (190 <Reset_Handler+0x9c>)
 160:	4798      	blx	r3

        /* Branch to main function */
        main();
 162:	4b0c      	ldr	r3, [pc, #48]	; (194 <Reset_Handler+0xa0>)
 164:	4798      	blx	r3

        /* Infinite loop */
        while (1);
 166:	e7fe      	b.n	166 <Reset_Handler+0x72>
 168:	000005fc 	.word	0x000005fc
 16c:	20000000 	.word	0x20000000
 170:	20000050 	.word	0x20000050
 174:	20000050 	.word	0x20000050
 178:	20000088 	.word	0x20000088
 17c:	00000000 	.word	0x00000000
 180:	e000ed00 	.word	0xe000ed00
 184:	410070fc 	.word	0x410070fc
 188:	41004800 	.word	0x41004800
 18c:	41004000 	.word	0x41004000
 190:	00000591 	.word	0x00000591
 194:	000003cd 	.word	0x000003cd

00000198 <nvm_get_config>:
	
	/*get a pointer to the module hardware instance.*/
	Nvmctrl *const nvm_module = NVMCTRL;
	
	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
 198:	2108      	movs	r1, #8
 19a:	4a06      	ldr	r2, [pc, #24]	; (1b4 <nvm_get_config+0x1c>)
 19c:	4806      	ldr	r0, [pc, #24]	; (1b8 <nvm_get_config+0x20>)
 19e:	6893      	ldr	r3, [r2, #8]
 1a0:	035b      	lsls	r3, r3, #13
 1a2:	0f5b      	lsrs	r3, r3, #29
 1a4:	4099      	lsls	r1, r3
 1a6:	8001      	strh	r1, [r0, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
 1a8:	6893      	ldr	r3, [r2, #8]
 1aa:	8043      	strh	r3, [r0, #2]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
 1ac:	8b13      	ldrh	r3, [r2, #24]
		return STATUS_FAIL;
 1ae:	2001      	movs	r0, #1
	}
};
 1b0:	4770      	bx	lr
 1b2:	46c0      	nop			; (mov r8, r8)
 1b4:	41004000 	.word	0x41004000
 1b8:	2000006c 	.word	0x2000006c

000001bc <UART_sercom_init>:
    */
    uint16_t pad = pinmux >> 16;    // get pad (port+pin)
    uint8_t port = pad >> 5;        // get port
    uint8_t pin  = pad & 0x1F;      // get number of pin - no port information anymore
    
    PORT->Group[port].PINCFG[pin].bit.PMUXEN =1;
 1bc:	4a18      	ldr	r2, [pc, #96]	; (220 <UART_sercom_init+0x64>)
    PORT->Group[port].PMUX[pin/2].reg |=  ( (uint8_t)( (pinmux&0xFFFF) <<(4*(pin&1)) ) ); 
}

/*init USART module on SERCOM1*/
void UART_sercom_init()
{
 1be:	b530      	push	{r4, r5, lr}
    */
    uint16_t pad = pinmux >> 16;    // get pad (port+pin)
    uint8_t port = pad >> 5;        // get port
    uint8_t pin  = pad & 0x1F;      // get number of pin - no port information anymore
    
    PORT->Group[port].PINCFG[pin].bit.PMUXEN =1;
 1c0:	1c11      	adds	r1, r2, #0
 1c2:	2501      	movs	r5, #1
 1c4:	3159      	adds	r1, #89	; 0x59
 1c6:	780b      	ldrb	r3, [r1, #0]
    
    /* each pinmux register is for two pins! with pin/2 you can get the index of the needed pinmux register
       the p mux resiter is 8Bit   (7:4 odd pin; 3:0 evan bit)  */
    // reset pinmux values.                             VV shift if pin is odd (if evan:  (4*(pin & 1))==0  )
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
 1c8:	240f      	movs	r4, #15
    */
    uint16_t pad = pinmux >> 16;    // get pad (port+pin)
    uint8_t port = pad >> 5;        // get port
    uint8_t pin  = pad & 0x1F;      // get number of pin - no port information anymore
    
    PORT->Group[port].PINCFG[pin].bit.PMUXEN =1;
 1ca:	432b      	orrs	r3, r5
 1cc:	700b      	strb	r3, [r1, #0]
    
    /* each pinmux register is for two pins! with pin/2 you can get the index of the needed pinmux register
       the p mux resiter is 8Bit   (7:4 odd pin; 3:0 evan bit)  */
    // reset pinmux values.                             VV shift if pin is odd (if evan:  (4*(pin & 1))==0  )
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
 1ce:	1c13      	adds	r3, r2, #0
                    //          
    // set new values
    PORT->Group[port].PMUX[pin/2].reg |=  ( (uint8_t)( (pinmux&0xFFFF) <<(4*(pin&1)) ) ); 
 1d0:	2120      	movs	r1, #32
    PORT->Group[port].PINCFG[pin].bit.PMUXEN =1;
    
    /* each pinmux register is for two pins! with pin/2 you can get the index of the needed pinmux register
       the p mux resiter is 8Bit   (7:4 odd pin; 3:0 evan bit)  */
    // reset pinmux values.                             VV shift if pin is odd (if evan:  (4*(pin & 1))==0  )
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
 1d2:	333c      	adds	r3, #60	; 0x3c
 1d4:	7818      	ldrb	r0, [r3, #0]
    */
    uint16_t pad = pinmux >> 16;    // get pad (port+pin)
    uint8_t port = pad >> 5;        // get port
    uint8_t pin  = pad & 0x1F;      // get number of pin - no port information anymore
    
    PORT->Group[port].PINCFG[pin].bit.PMUXEN =1;
 1d6:	3258      	adds	r2, #88	; 0x58
    
    /* each pinmux register is for two pins! with pin/2 you can get the index of the needed pinmux register
       the p mux resiter is 8Bit   (7:4 odd pin; 3:0 evan bit)  */
    // reset pinmux values.                             VV shift if pin is odd (if evan:  (4*(pin & 1))==0  )
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
 1d8:	4020      	ands	r0, r4
 1da:	7018      	strb	r0, [r3, #0]
                    //          
    // set new values
    PORT->Group[port].PMUX[pin/2].reg |=  ( (uint8_t)( (pinmux&0xFFFF) <<(4*(pin&1)) ) ); 
 1dc:	7818      	ldrb	r0, [r3, #0]
 1de:	4308      	orrs	r0, r1
 1e0:	7018      	strb	r0, [r3, #0]
 1e2:	2002      	movs	r0, #2
    */
    uint16_t pad = pinmux >> 16;    // get pad (port+pin)
    uint8_t port = pad >> 5;        // get port
    uint8_t pin  = pad & 0x1F;      // get number of pin - no port information anymore
    
    PORT->Group[port].PINCFG[pin].bit.PMUXEN =1;
 1e4:	7811      	ldrb	r1, [r2, #0]
 1e6:	4329      	orrs	r1, r5
 1e8:	7011      	strb	r1, [r2, #0]
    
    /* each pinmux register is for two pins! with pin/2 you can get the index of the needed pinmux register
       the p mux resiter is 8Bit   (7:4 odd pin; 3:0 evan bit)  */
    // reset pinmux values.                             VV shift if pin is odd (if evan:  (4*(pin & 1))==0  )
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
 1ea:	781a      	ldrb	r2, [r3, #0]
 1ec:	43a2      	bics	r2, r4
 1ee:	701a      	strb	r2, [r3, #0]
                    //          
    // set new values
    PORT->Group[port].PMUX[pin/2].reg |=  ( (uint8_t)( (pinmux&0xFFFF) <<(4*(pin&1)) ) ); 
 1f0:	7819      	ldrb	r1, [r3, #0]
	//Pmux eve = n/1, odd = (n-1)/2
	pin_set_peripheral_function(PINMUX_PA25C_SERCOM1_PAD3); // SAMD09 TX
	pin_set_peripheral_function(PINMUX_PA24C_SERCOM1_PAD2); // SAMD09 RX
	
	//apbcmak
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM1;
 1f2:	4a0c      	ldr	r2, [pc, #48]	; (224 <UART_sercom_init+0x68>)
       the p mux resiter is 8Bit   (7:4 odd pin; 3:0 evan bit)  */
    // reset pinmux values.                             VV shift if pin is odd (if evan:  (4*(pin & 1))==0  )
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
                    //          
    // set new values
    PORT->Group[port].PMUX[pin/2].reg |=  ( (uint8_t)( (pinmux&0xFFFF) <<(4*(pin&1)) ) ); 
 1f4:	4301      	orrs	r1, r0
 1f6:	7019      	strb	r1, [r3, #0]
	//Pmux eve = n/1, odd = (n-1)/2
	pin_set_peripheral_function(PINMUX_PA25C_SERCOM1_PAD3); // SAMD09 TX
	pin_set_peripheral_function(PINMUX_PA24C_SERCOM1_PAD2); // SAMD09 RX
	
	//apbcmak
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM1;
 1f8:	2108      	movs	r1, #8
 1fa:	6a13      	ldr	r3, [r2, #32]
 1fc:	430b      	orrs	r3, r1
 1fe:	6213      	str	r3, [r2, #32]
	
	//gclk config
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM1_GCLK_ID_CORE) | GCLK_CLKCTRL_GEN(0) | GCLK_CLKCTRL_CLKEN;
 200:	4a09      	ldr	r2, [pc, #36]	; (228 <UART_sercom_init+0x6c>)
 202:	4b0a      	ldr	r3, [pc, #40]	; (22c <UART_sercom_init+0x70>)
 204:	805a      	strh	r2, [r3, #2]
	
	//Config SERCOM1 module for UART
	SERCOM1->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK | SERCOM_USART_CTRLA_DORD | SERCOM_USART_CTRLA_RXPO(0x3) | SERCOM_USART_CTRLA_TXPO(0x1);
 206:	4b0a      	ldr	r3, [pc, #40]	; (230 <UART_sercom_init+0x74>)
 208:	4a0a      	ldr	r2, [pc, #40]	; (234 <UART_sercom_init+0x78>)
 20a:	601a      	str	r2, [r3, #0]
	
	SERCOM1->USART.CTRLB.reg = SERCOM_USART_CTRLB_RXEN | SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_CHSIZE(0);
 20c:	22c0      	movs	r2, #192	; 0xc0
 20e:	0292      	lsls	r2, r2, #10
 210:	605a      	str	r2, [r3, #4]
	
	/*configure baud rate at 115200*/
	SERCOM1->USART.BAUD.reg = BAUD_VAL;
 212:	4a09      	ldr	r2, [pc, #36]	; (238 <UART_sercom_init+0x7c>)
 214:	819a      	strh	r2, [r3, #12]
	
	SERCOM1->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
 216:	681a      	ldr	r2, [r3, #0]
 218:	4302      	orrs	r2, r0
 21a:	601a      	str	r2, [r3, #0]
	
}
 21c:	bd30      	pop	{r4, r5, pc}
 21e:	46c0      	nop			; (mov r8, r8)
 220:	41004400 	.word	0x41004400
 224:	40000400 	.word	0x40000400
 228:	0000400f 	.word	0x0000400f
 22c:	40000c00 	.word	0x40000c00
 230:	42000c00 	.word	0x42000c00
 234:	40310004 	.word	0x40310004
 238:	ffffc504 	.word	0xffffc504

0000023c <SERCOM1_Handler>:
#if 1
/* interrupt handler for Sercom1 USART used with simplewrite.*/
void SERCOM1_Handler()  // SERCOM1 ISR
{
	uint8_t buffer;
	buffer  = SERCOM1->USART.DATA.reg;
 23c:	4b06      	ldr	r3, [pc, #24]	; (258 <SERCOM1_Handler+0x1c>)
 23e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 240:	b292      	uxth	r2, r2
	while(!(SERCOM1->USART.INTFLAG.reg & 1)); // wait UART module ready to receive data
 242:	7e19      	ldrb	r1, [r3, #24]
 244:	07c9      	lsls	r1, r1, #31
 246:	d5fc      	bpl.n	242 <SERCOM1_Handler+0x6>
	SERCOM1->USART.DATA.reg = buffer;               // just sent that byte aback
 248:	4903      	ldr	r1, [pc, #12]	; (258 <SERCOM1_Handler+0x1c>)
 24a:	b2d2      	uxtb	r2, r2
 24c:	850a      	strh	r2, [r1, #40]	; 0x28
	while(!(SERCOM1->USART.INTFLAG.reg & 2)); // wait until TX complete;
 24e:	7e1a      	ldrb	r2, [r3, #24]
 250:	0792      	lsls	r2, r2, #30
 252:	d5fc      	bpl.n	24e <SERCOM1_Handler+0x12>
}	
 254:	4770      	bx	lr
 256:	46c0      	nop			; (mov r8, r8)
 258:	42000c00 	.word	0x42000c00

0000025c <uart_write_byte>:
#endif

//this will be replaced with UART_sercom_simpleWrite function.
void uart_write_byte(uint8_t data)
{
	while(!BOOT_SERCOM->USART.INTFLAG.bit.DRE);
 25c:	4b03      	ldr	r3, [pc, #12]	; (26c <uart_write_byte+0x10>)
 25e:	7e1a      	ldrb	r2, [r3, #24]
 260:	07d2      	lsls	r2, r2, #31
 262:	d5fb      	bpl.n	25c <uart_write_byte>
	BOOT_SERCOM->USART.DATA.reg = (uint16_t)data;
 264:	b280      	uxth	r0, r0
 266:	8518      	strh	r0, [r3, #40]	; 0x28
	
}
 268:	4770      	bx	lr
 26a:	46c0      	nop			; (mov r8, r8)
 26c:	42000c00 	.word	0x42000c00

00000270 <UART_sercom_simpleWrite>:

#if 1
void UART_sercom_simpleWrite(Sercom *const sercom_module, uint8_t data)
{
	while(!(sercom_module->USART.INTFLAG.reg & 1)); //wait UART module ready to receive data
 270:	7e03      	ldrb	r3, [r0, #24]
 272:	07db      	lsls	r3, r3, #31
 274:	d5fc      	bpl.n	270 <UART_sercom_simpleWrite>
	sercom_module->USART.DATA.reg = data;
 276:	b289      	uxth	r1, r1
 278:	8501      	strh	r1, [r0, #40]	; 0x28
	while(!(sercom_module->USART.INTFLAG.reg & 2)); //wait until TX complete;
 27a:	7e03      	ldrb	r3, [r0, #24]
 27c:	079b      	lsls	r3, r3, #30
 27e:	d5fc      	bpl.n	27a <UART_sercom_simpleWrite+0xa>
}
 280:	4770      	bx	lr
	...

00000284 <uart_read_byte>:
#endif

//this will be replaced with UART_sercom_simpleRead function.
uint8_t uart_read_byte(void)
{
	while(!BOOT_SERCOM->USART.INTFLAG.bit.RXC);
 284:	4b03      	ldr	r3, [pc, #12]	; (294 <uart_read_byte+0x10>)
 286:	7e1a      	ldrb	r2, [r3, #24]
 288:	0752      	lsls	r2, r2, #29
 28a:	d5fb      	bpl.n	284 <uart_read_byte>
	return((uint8_t)(BOOT_SERCOM->USART.DATA.reg & 0x00FF));
 28c:	8d18      	ldrh	r0, [r3, #40]	; 0x28
 28e:	b2c0      	uxtb	r0, r0
}
 290:	4770      	bx	lr
 292:	46c0      	nop			; (mov r8, r8)
 294:	42000c00 	.word	0x42000c00

00000298 <nvm_erase_row>:


void nvm_erase_row(const uint32_t row_address, uint32_t PAGE_SIZE)
{
	/* Check if the address to erase is not aligned to the start of a row */
	if(row_address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages))
 298:	4a0e      	ldr	r2, [pc, #56]	; (2d4 <nvm_erase_row+0x3c>)
 29a:	8813      	ldrh	r3, [r2, #0]
 29c:	8852      	ldrh	r2, [r2, #2]
 29e:	435a      	muls	r2, r3
 2a0:	4290      	cmp	r0, r2
 2a2:	d816      	bhi.n	2d2 <nvm_erase_row+0x3a>
	{
		return 0;
	}

	/* Get a pointer to the module hardware instance */
	if(row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES)-1))
 2a4:	009b      	lsls	r3, r3, #2
 2a6:	3b01      	subs	r3, #1
 2a8:	4218      	tst	r0, r3
 2aa:	d112      	bne.n	2d2 <nvm_erase_row+0x3a>
		return 0;
	}
	
	
	/* Check if the module is busy */
	while(!NVMCTRL->INTFLAG.bit.READY);
 2ac:	4b0a      	ldr	r3, [pc, #40]	; (2d8 <nvm_erase_row+0x40>)
 2ae:	7d1a      	ldrb	r2, [r3, #20]
 2b0:	07d2      	lsls	r2, r2, #31
 2b2:	d5fb      	bpl.n	2ac <nvm_erase_row+0x14>
	
	/* Clear error flags */
	NVMCTRL->STATUS.reg &= ~NVMCTRL_STATUS_MASK;
 2b4:	8b19      	ldrh	r1, [r3, #24]
 2b6:	4a09      	ldr	r2, [pc, #36]	; (2dc <nvm_erase_row+0x44>)
 2b8:	400a      	ands	r2, r1
 2ba:	831a      	strh	r2, [r3, #24]
	
	while(!(NVMCTRL->INTFLAG.bit.READY));
 2bc:	7d19      	ldrb	r1, [r3, #20]
 2be:	4a06      	ldr	r2, [pc, #24]	; (2d8 <nvm_erase_row+0x40>)
 2c0:	07c9      	lsls	r1, r1, #31
 2c2:	d5fb      	bpl.n	2bc <nvm_erase_row+0x24>
	
	/* Set address and command */	
	NVMCTRL->ADDR.reg = (row_address / 2);
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_ER;
 2c4:	4906      	ldr	r1, [pc, #24]	; (2e0 <nvm_erase_row+0x48>)
	NVMCTRL->STATUS.reg &= ~NVMCTRL_STATUS_MASK;
	
	while(!(NVMCTRL->INTFLAG.bit.READY));
	
	/* Set address and command */	
	NVMCTRL->ADDR.reg = (row_address / 2);
 2c6:	0840      	lsrs	r0, r0, #1
 2c8:	61d0      	str	r0, [r2, #28]
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_ER;
 2ca:	8011      	strh	r1, [r2, #0]
	while(!(NVMCTRL->INTFLAG.bit.READY));
 2cc:	7d1a      	ldrb	r2, [r3, #20]
 2ce:	07d2      	lsls	r2, r2, #31
 2d0:	d5fc      	bpl.n	2cc <nvm_erase_row+0x34>
	
	return 1;
}
 2d2:	4770      	bx	lr
 2d4:	2000006c 	.word	0x2000006c
 2d8:	41004000 	.word	0x41004000
 2dc:	fffffee0 	.word	0xfffffee0
 2e0:	ffffa502 	.word	0xffffa502

000002e4 <nvm_write_buffer>:


void nvm_write_buffer(uint32_t destination_address, const uint8_t *buffer, uint16_t length)
{
 2e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	
	/* Check if the destination address is valid */
	if (destination_address >
	((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
 2e6:	4c20      	ldr	r4, [pc, #128]	; (368 <nvm_write_buffer+0x84>)
 2e8:	8865      	ldrh	r5, [r4, #2]
 2ea:	8823      	ldrh	r3, [r4, #0]
 2ec:	9401      	str	r4, [sp, #4]
 2ee:	435d      	muls	r5, r3

void nvm_write_buffer(uint32_t destination_address, const uint8_t *buffer, uint16_t length)
{
	
	/* Check if the destination address is valid */
	if (destination_address >
 2f0:	42a8      	cmp	r0, r5
 2f2:	d838      	bhi.n	366 <nvm_write_buffer+0x82>
	((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
		return 0;
	}
	
	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
 2f4:	1e5d      	subs	r5, r3, #1
 2f6:	4205      	tst	r5, r0
 2f8:	d135      	bne.n	366 <nvm_write_buffer+0x82>
		return 0;
	}
	
	/* Check if the write length is longer than a NVM page */
	if (length > _nvm_dev.page_size) {
 2fa:	429a      	cmp	r2, r3
 2fc:	d833      	bhi.n	366 <nvm_write_buffer+0x82>
		return 0;
	}

	/* Check if the module is busy */
	while(!NVMCTRL->INTFLAG.bit.READY);
 2fe:	4b1b      	ldr	r3, [pc, #108]	; (36c <nvm_write_buffer+0x88>)
 300:	7d1d      	ldrb	r5, [r3, #20]
 302:	07ec      	lsls	r4, r5, #31
 304:	d5fb      	bpl.n	2fe <nvm_write_buffer+0x1a>
	
	//set auto page writes
	NVMCTRL->CTRLB.bit.MANW = 0;
 306:	2680      	movs	r6, #128	; 0x80
 308:	685d      	ldr	r5, [r3, #4]
 30a:	43b5      	bics	r5, r6
 30c:	605d      	str	r5, [r3, #4]

	/* Erase the page buffer before buffering new data */
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_PBC | NVMCTRL_CTRLA_CMDEX_KEY;
 30e:	4d18      	ldr	r5, [pc, #96]	; (370 <nvm_write_buffer+0x8c>)
 310:	801d      	strh	r5, [r3, #0]

	/* Check if the module is busy */
	while(!NVMCTRL->INTFLAG.bit.READY);
 312:	7d1d      	ldrb	r5, [r3, #20]
 314:	4e15      	ldr	r6, [pc, #84]	; (36c <nvm_write_buffer+0x88>)
 316:	07ec      	lsls	r4, r5, #31
 318:	d5fb      	bpl.n	312 <nvm_write_buffer+0x2e>

	/* Clear error flags */
	NVMCTRL->STATUS.reg &= ~NVMCTRL_STATUS_MASK;
 31a:	8b37      	ldrh	r7, [r6, #24]
 31c:	4d15      	ldr	r5, [pc, #84]	; (374 <nvm_write_buffer+0x90>)

	uint32_t nvm_address = destination_address / 2;
 31e:	0840      	lsrs	r0, r0, #1

	/* Check if the module is busy */
	while(!NVMCTRL->INTFLAG.bit.READY);

	/* Clear error flags */
	NVMCTRL->STATUS.reg &= ~NVMCTRL_STATUS_MASK;
 320:	403d      	ands	r5, r7
 322:	8335      	strh	r5, [r6, #24]

	uint32_t nvm_address = destination_address / 2;
 324:	2500      	movs	r5, #0
 326:	0040      	lsls	r0, r0, #1

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t k = 0; k < length; k += 2) 
 328:	b2ae      	uxth	r6, r5
 32a:	4296      	cmp	r6, r2
 32c:	d210      	bcs.n	350 <nvm_write_buffer+0x6c>
	{
		uint16_t data;
		
		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[k];
 32e:	b2ae      	uxth	r6, r5
		
		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (k < (length - 1)) {
 330:	1e54      	subs	r4, r2, #1
	for (uint16_t k = 0; k < length; k += 2) 
	{
		uint16_t data;
		
		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[k];
 332:	5d8f      	ldrb	r7, [r1, r6]
		
		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (k < (length - 1)) {
 334:	42a6      	cmp	r6, r4
 336:	db01      	blt.n	33c <nvm_write_buffer+0x58>
	for (uint16_t k = 0; k < length; k += 2) 
	{
		uint16_t data;
		
		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[k];
 338:	b2be      	uxth	r6, r7
 33a:	e003      	b.n	344 <nvm_write_buffer+0x60>
		
		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (k < (length - 1)) {
			data |= (buffer[k + 1] << 8);
 33c:	198e      	adds	r6, r1, r6
 33e:	7876      	ldrb	r6, [r6, #1]
 340:	0236      	lsls	r6, r6, #8
 342:	433e      	orrs	r6, r7
 344:	182f      	adds	r7, r5, r0
		}
		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
 346:	803e      	strh	r6, [r7, #0]
		NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_WP;
 348:	4e0b      	ldr	r6, [pc, #44]	; (378 <nvm_write_buffer+0x94>)
 34a:	3502      	adds	r5, #2
 34c:	801e      	strh	r6, [r3, #0]
 34e:	e7eb      	b.n	328 <nvm_write_buffer+0x44>
	}
	
	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == 0) && (length < NVMCTRL_PAGE_SIZE)) {
 350:	9901      	ldr	r1, [sp, #4]
 352:	7909      	ldrb	r1, [r1, #4]
 354:	2900      	cmp	r1, #0
 356:	d103      	bne.n	360 <nvm_write_buffer+0x7c>
 358:	2a3f      	cmp	r2, #63	; 0x3f
 35a:	d801      	bhi.n	360 <nvm_write_buffer+0x7c>
		NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_WP;
 35c:	4a06      	ldr	r2, [pc, #24]	; (378 <nvm_write_buffer+0x94>)
 35e:	801a      	strh	r2, [r3, #0]
	}
	
	while(!NVMCTRL->INTFLAG.bit.READY);
 360:	7d1a      	ldrb	r2, [r3, #20]
 362:	07d2      	lsls	r2, r2, #31
 364:	d5fc      	bpl.n	360 <nvm_write_buffer+0x7c>
}
 366:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 368:	2000006c 	.word	0x2000006c
 36c:	41004000 	.word	0x41004000
 370:	ffffa544 	.word	0xffffa544
 374:	fffffee0 	.word	0xfffffee0
 378:	ffffa504 	.word	0xffffa504

0000037c <set_ptr>:
    }
}

void set_ptr()
{
	if(data_8 == 'z'){
 37c:	4b07      	ldr	r3, [pc, #28]	; (39c <set_ptr+0x20>)
 37e:	781a      	ldrb	r2, [r3, #0]
 380:	4b07      	ldr	r3, [pc, #28]	; (3a0 <set_ptr+0x24>)
 382:	2a7a      	cmp	r2, #122	; 0x7a
 384:	d105      	bne.n	392 <set_ptr+0x16>
		//set values, for flash pointer.
		flash_ptr = APP_START;
 386:	2280      	movs	r2, #128	; 0x80
 388:	0112      	lsls	r2, r2, #4
 38a:	601a      	str	r2, [r3, #0]
		app_start_address = *flash_ptr;
 38c:	6812      	ldr	r2, [r2, #0]
 38e:	4b05      	ldr	r3, [pc, #20]	; (3a4 <set_ptr+0x28>)
 390:	e001      	b.n	396 <set_ptr+0x1a>
	}
	else{
		flash_ptr++;
 392:	681a      	ldr	r2, [r3, #0]
 394:	3204      	adds	r2, #4
 396:	601a      	str	r2, [r3, #0]
	}
	
}
 398:	4770      	bx	lr
 39a:	46c0      	nop			; (mov r8, r8)
 39c:	2000004e 	.word	0x2000004e
 3a0:	2000007c 	.word	0x2000007c
 3a4:	20000080 	.word	0x20000080

000003a8 <info>:

void info()
{
 3a8:	b510      	push	{r4, lr}
 3aa:	2400      	movs	r4, #0
	uint8_t i;
	
	for(i = 0;i<=78-1;i++)
	{
		UART_sercom_simpleWrite(SERCOM1,aVER[i]);	
 3ac:	4b04      	ldr	r3, [pc, #16]	; (3c0 <info+0x18>)
 3ae:	4805      	ldr	r0, [pc, #20]	; (3c4 <info+0x1c>)
 3b0:	5ce1      	ldrb	r1, [r4, r3]
 3b2:	4b05      	ldr	r3, [pc, #20]	; (3c8 <info+0x20>)
 3b4:	3401      	adds	r4, #1
 3b6:	4798      	blx	r3

void info()
{
	uint8_t i;
	
	for(i = 0;i<=78-1;i++)
 3b8:	2c4e      	cmp	r4, #78	; 0x4e
 3ba:	d1f7      	bne.n	3ac <info+0x4>
	{
		UART_sercom_simpleWrite(SERCOM1,aVER[i]);	
	}
}
 3bc:	bd10      	pop	{r4, pc}
 3be:	46c0      	nop			; (mov r8, r8)
 3c0:	20000000 	.word	0x20000000
 3c4:	42000c00 	.word	0x42000c00
 3c8:	00000271 	.word	0x00000271

000003cc <main>:
	while(!NVMCTRL->INTFLAG.bit.READY);
}

int main(void)
{ 
	PORT->Group[BOOT_PORT].PINCFG[BOOT_PIN].reg = PORT_PINCFG_INEN | PORT_PINCFG_PULLEN;
 3cc:	2106      	movs	r1, #6
	
	while(!NVMCTRL->INTFLAG.bit.READY);
}

int main(void)
{ 
 3ce:	b5f0      	push	{r4, r5, r6, r7, lr}
	PORT->Group[BOOT_PORT].PINCFG[BOOT_PIN].reg = PORT_PINCFG_INEN | PORT_PINCFG_PULLEN;
 3d0:	4a57      	ldr	r2, [pc, #348]	; (530 <STACK_SIZE+0x130>)
 3d2:	4b58      	ldr	r3, [pc, #352]	; (534 <STACK_SIZE+0x134>)
 3d4:	7011      	strb	r1, [r2, #0]
	if ((PORT->Group[BOOT_PORT].IN.reg & (1u << BOOT_PIN)))
 3d6:	6a1a      	ldr	r2, [r3, #32]
	
	while(!NVMCTRL->INTFLAG.bit.READY);
}

int main(void)
{ 
 3d8:	b085      	sub	sp, #20
 3da:	af00      	add	r7, sp, #0
	PORT->Group[BOOT_PORT].PINCFG[BOOT_PIN].reg = PORT_PINCFG_INEN | PORT_PINCFG_PULLEN;
	if ((PORT->Group[BOOT_PORT].IN.reg & (1u << BOOT_PIN)))
 3dc:	0412      	lsls	r2, r2, #16
 3de:	d50d      	bpl.n	3fc <main+0x30>
	{
		/*Get the entry point for our new app*/
		app_start_address = *(uint32_t *)(APP_START + 4);
		
		/* Rebase the Stack Pointer */
		__set_MSP(*(uint32_t *) APP_START + 4);
 3e0:	2080      	movs	r0, #128	; 0x80
{ 
	PORT->Group[BOOT_PORT].PINCFG[BOOT_PIN].reg = PORT_PINCFG_INEN | PORT_PINCFG_PULLEN;
	if ((PORT->Group[BOOT_PORT].IN.reg & (1u << BOOT_PIN)))
	{
		/*Get the entry point for our new app*/
		app_start_address = *(uint32_t *)(APP_START + 4);
 3e2:	4a55      	ldr	r2, [pc, #340]	; (538 <STACK_SIZE+0x138>)
 3e4:	4955      	ldr	r1, [pc, #340]	; (53c <STACK_SIZE+0x13c>)
 3e6:	6812      	ldr	r2, [r2, #0]
		
		/* Rebase the Stack Pointer */
		__set_MSP(*(uint32_t *) APP_START + 4);
 3e8:	0100      	lsls	r0, r0, #4
{ 
	PORT->Group[BOOT_PORT].PINCFG[BOOT_PIN].reg = PORT_PINCFG_INEN | PORT_PINCFG_PULLEN;
	if ((PORT->Group[BOOT_PORT].IN.reg & (1u << BOOT_PIN)))
	{
		/*Get the entry point for our new app*/
		app_start_address = *(uint32_t *)(APP_START + 4);
 3ea:	600a      	str	r2, [r1, #0]
		
		/* Rebase the Stack Pointer */
		__set_MSP(*(uint32_t *) APP_START + 4);
 3ec:	6802      	ldr	r2, [r0, #0]
 3ee:	3204      	adds	r2, #4

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 3f0:	f382 8808 	msr	MSP, r2

		/* Rebase the vector table base address */
		SCB->VTOR = ((uint32_t) APP_START & SCB_VTOR_TBLOFF_Msk);
 3f4:	4a52      	ldr	r2, [pc, #328]	; (540 <STACK_SIZE+0x140>)
 3f6:	6090      	str	r0, [r2, #8]
		/* Make CPU to run at 8MHz by clearing prescalar bits */ 
		//SYSCTRL->OSC8M.bit.PRESC = 0;
		//NVMCTRL->CTRLB.bit.CACHEDIS = 0;

		/* Jump to application Reset Handler in the application */
		asm("bx %0"::"r"(app_start_address));
 3f8:	680a      	ldr	r2, [r1, #0]
 3fa:	4710      	bx	r2
	}
	/*set PA14 LED to output and turn on, now we know we are in bootloader mode.*/
	REG_PORT_DIR0 |= (1 << 14);
 3fc:	2180      	movs	r1, #128	; 0x80
 3fe:	681a      	ldr	r2, [r3, #0]
 400:	01c9      	lsls	r1, r1, #7
 402:	430a      	orrs	r2, r1
	REG_PORT_OUT0 |= (1<<14);
 404:	4d4f      	ldr	r5, [pc, #316]	; (544 <STACK_SIZE+0x144>)

		/* Jump to application Reset Handler in the application */
		asm("bx %0"::"r"(app_start_address));
	}
	/*set PA14 LED to output and turn on, now we know we are in bootloader mode.*/
	REG_PORT_DIR0 |= (1 << 14);
 406:	601a      	str	r2, [r3, #0]
	REG_PORT_OUT0 |= (1<<14);
 408:	682b      	ldr	r3, [r5, #0]
	
	/* Make CPU to run at 8MHz by clearing prescalar bits */ 
    SYSCTRL->OSC8M.bit.PRESC = 0;
 40a:	4a4f      	ldr	r2, [pc, #316]	; (548 <STACK_SIZE+0x148>)
		/* Jump to application Reset Handler in the application */
		asm("bx %0"::"r"(app_start_address));
	}
	/*set PA14 LED to output and turn on, now we know we are in bootloader mode.*/
	REG_PORT_DIR0 |= (1 << 14);
	REG_PORT_OUT0 |= (1<<14);
 40c:	430b      	orrs	r3, r1
 40e:	602b      	str	r3, [r5, #0]
	
	/* Make CPU to run at 8MHz by clearing prescalar bits */ 
    SYSCTRL->OSC8M.bit.PRESC = 0;
 410:	6a11      	ldr	r1, [r2, #32]
 412:	4b4e      	ldr	r3, [pc, #312]	; (54c <STACK_SIZE+0x14c>)
 414:	400b      	ands	r3, r1
	NVMCTRL->CTRLB.bit.CACHEDIS = 1;
 416:	2180      	movs	r1, #128	; 0x80
	/*set PA14 LED to output and turn on, now we know we are in bootloader mode.*/
	REG_PORT_DIR0 |= (1 << 14);
	REG_PORT_OUT0 |= (1<<14);
	
	/* Make CPU to run at 8MHz by clearing prescalar bits */ 
    SYSCTRL->OSC8M.bit.PRESC = 0;
 418:	6213      	str	r3, [r2, #32]
	NVMCTRL->CTRLB.bit.CACHEDIS = 1;
 41a:	4a4d      	ldr	r2, [pc, #308]	; (550 <STACK_SIZE+0x150>)
 41c:	02c9      	lsls	r1, r1, #11
 41e:	6853      	ldr	r3, [r2, #4]
 420:	430b      	orrs	r3, r1
 422:	6053      	str	r3, [r2, #4]
	
	/*get NVM configureation*/
	nvm_get_config();
 424:	4b4b      	ldr	r3, [pc, #300]	; (554 <STACK_SIZE+0x154>)
 426:	4798      	blx	r3
	/* Config Usart */
	UART_sercom_init();
 428:	4b4b      	ldr	r3, [pc, #300]	; (558 <STACK_SIZE+0x158>)
 42a:	4798      	blx	r3
	
	/* Flash page size is 64 bytes */
	#define PAGE_SIZE	_nvm_dev.page_size	//used to read and write to flash.
	uint8_t page_buffer[PAGE_SIZE];
 42c:	466a      	mov	r2, sp
 42e:	4b4b      	ldr	r3, [pc, #300]	; (55c <STACK_SIZE+0x15c>)
 430:	607d      	str	r5, [r7, #4]
 432:	881c      	ldrh	r4, [r3, #0]
 434:	1de3      	adds	r3, r4, #7
 436:	08db      	lsrs	r3, r3, #3
 438:	00db      	lsls	r3, r3, #3
 43a:	1ad3      	subs	r3, r2, r3
 43c:	469d      	mov	sp, r3
 43e:	60bb      	str	r3, [r7, #8]
	

    while (1) 
    {
        data_8 = uart_read_byte();
 440:	4d47      	ldr	r5, [pc, #284]	; (560 <STACK_SIZE+0x160>)
 442:	47a8      	blx	r5
 444:	4b47      	ldr	r3, [pc, #284]	; (564 <STACK_SIZE+0x164>)
 446:	60fd      	str	r5, [r7, #12]
 448:	7018      	strb	r0, [r3, #0]
		if (data_8 == '#')
 44a:	2823      	cmp	r0, #35	; 0x23
 44c:	d105      	bne.n	45a <STACK_SIZE+0x5a>
		{
			uart_write_byte('s');
 44e:	3050      	adds	r0, #80	; 0x50
 450:	4d45      	ldr	r5, [pc, #276]	; (568 <STACK_SIZE+0x168>)
 452:	47a8      	blx	r5
			uart_write_byte((uint8_t)APP_SIZE);
 454:	200d      	movs	r0, #13
 456:	47a8      	blx	r5
 458:	e7f2      	b.n	440 <STACK_SIZE+0x40>
		}
		else if (data_8 == 'e')
 45a:	2865      	cmp	r0, #101	; 0x65
 45c:	d118      	bne.n	490 <STACK_SIZE+0x90>
		{
			/*erase NVM from 0x800 (starting point) to top of NVM*/
			//erase from 0x800 to the top of nvm.
			for(i = APP_START; i < FLASH_SIZE; i = i + 256)
 45e:	2380      	movs	r3, #128	; 0x80
 460:	4d42      	ldr	r5, [pc, #264]	; (56c <STACK_SIZE+0x16c>)
 462:	011b      	lsls	r3, r3, #4
 464:	602b      	str	r3, [r5, #0]
 466:	6828      	ldr	r0, [r5, #0]
 468:	4b41      	ldr	r3, [pc, #260]	; (570 <STACK_SIZE+0x170>)
 46a:	4298      	cmp	r0, r3
 46c:	d806      	bhi.n	47c <STACK_SIZE+0x7c>
			{
				nvm_erase_row(i,PAGE_SIZE);
 46e:	4b41      	ldr	r3, [pc, #260]	; (574 <STACK_SIZE+0x174>)
 470:	1c21      	adds	r1, r4, #0
 472:	4798      	blx	r3
		}
		else if (data_8 == 'e')
		{
			/*erase NVM from 0x800 (starting point) to top of NVM*/
			//erase from 0x800 to the top of nvm.
			for(i = APP_START; i < FLASH_SIZE; i = i + 256)
 474:	682b      	ldr	r3, [r5, #0]
 476:	3301      	adds	r3, #1
 478:	33ff      	adds	r3, #255	; 0xff
 47a:	e7f3      	b.n	464 <STACK_SIZE+0x64>
			{
				nvm_erase_row(i,PAGE_SIZE);
			}
			dest_addr = APP_START;
 47c:	2380      	movs	r3, #128	; 0x80
 47e:	4a3e      	ldr	r2, [pc, #248]	; (578 <STACK_SIZE+0x178>)
 480:	011b      	lsls	r3, r3, #4
 482:	6013      	str	r3, [r2, #0]
			flash_ptr = APP_START;
 484:	4a3d      	ldr	r2, [pc, #244]	; (57c <STACK_SIZE+0x17c>)
			uart_write_byte('s');
 486:	2073      	movs	r0, #115	; 0x73
			for(i = APP_START; i < FLASH_SIZE; i = i + 256)
			{
				nvm_erase_row(i,PAGE_SIZE);
			}
			dest_addr = APP_START;
			flash_ptr = APP_START;
 488:	6013      	str	r3, [r2, #0]
			uart_write_byte('s');
 48a:	4b37      	ldr	r3, [pc, #220]	; (568 <STACK_SIZE+0x168>)
 48c:	4798      	blx	r3
 48e:	e7d7      	b.n	440 <STACK_SIZE+0x40>
		}
		else if (data_8 == 'p')
 490:	2870      	cmp	r0, #112	; 0x70
 492:	d124      	bne.n	4de <STACK_SIZE+0xde>
		{
			
			uart_write_byte('s');
 494:	4e34      	ldr	r6, [pc, #208]	; (568 <STACK_SIZE+0x168>)
 496:	3003      	adds	r0, #3
 498:	47b0      	blx	r6

			for (i = 0; i < _nvm_dev.page_size; i++)
 49a:	2300      	movs	r3, #0
 49c:	4d33      	ldr	r5, [pc, #204]	; (56c <STACK_SIZE+0x16c>)
 49e:	603e      	str	r6, [r7, #0]
 4a0:	602b      	str	r3, [r5, #0]
 4a2:	682e      	ldr	r6, [r5, #0]
 4a4:	42a6      	cmp	r6, r4
 4a6:	d207      	bcs.n	4b8 <STACK_SIZE+0xb8>
			{
				page_buffer[i] = uart_read_byte();
 4a8:	68fb      	ldr	r3, [r7, #12]
 4aa:	4798      	blx	r3
 4ac:	68bb      	ldr	r3, [r7, #8]
 4ae:	5598      	strb	r0, [r3, r6]
		else if (data_8 == 'p')
		{
			
			uart_write_byte('s');

			for (i = 0; i < _nvm_dev.page_size; i++)
 4b0:	682b      	ldr	r3, [r5, #0]
 4b2:	3301      	adds	r3, #1
 4b4:	602b      	str	r3, [r5, #0]
 4b6:	e7f4      	b.n	4a2 <STACK_SIZE+0xa2>
			{
				page_buffer[i] = uart_read_byte();
			}
			nvm_write_buffer(dest_addr, page_buffer, _nvm_dev.page_size);
 4b8:	4d2f      	ldr	r5, [pc, #188]	; (578 <STACK_SIZE+0x178>)
 4ba:	1c22      	adds	r2, r4, #0
 4bc:	6828      	ldr	r0, [r5, #0]
 4be:	68b9      	ldr	r1, [r7, #8]
 4c0:	4b2f      	ldr	r3, [pc, #188]	; (580 <STACK_SIZE+0x180>)
 4c2:	4798      	blx	r3
			dest_addr += _nvm_dev.page_size;
 4c4:	682b      	ldr	r3, [r5, #0]

			uart_write_byte('s');
 4c6:	2073      	movs	r0, #115	; 0x73
			for (i = 0; i < _nvm_dev.page_size; i++)
			{
				page_buffer[i] = uart_read_byte();
			}
			nvm_write_buffer(dest_addr, page_buffer, _nvm_dev.page_size);
			dest_addr += _nvm_dev.page_size;
 4c8:	18e3      	adds	r3, r4, r3
 4ca:	602b      	str	r3, [r5, #0]

			uart_write_byte('s');
 4cc:	683b      	ldr	r3, [r7, #0]
 4ce:	4798      	blx	r3
			REG_PORT_OUT0 &= ~(1<<14); //blinks light
 4d0:	687b      	ldr	r3, [r7, #4]
 4d2:	681a      	ldr	r2, [r3, #0]
 4d4:	4b2b      	ldr	r3, [pc, #172]	; (584 <STACK_SIZE+0x184>)
 4d6:	4013      	ands	r3, r2
 4d8:	687a      	ldr	r2, [r7, #4]
 4da:	6013      	str	r3, [r2, #0]
 4dc:	e7b0      	b.n	440 <STACK_SIZE+0x40>

		}
		else if (data_8 == 'v')
 4de:	2876      	cmp	r0, #118	; 0x76
 4e0:	d11e      	bne.n	520 <STACK_SIZE+0x120>
		{
			uart_write_byte('s');
 4e2:	4e21      	ldr	r6, [pc, #132]	; (568 <STACK_SIZE+0x168>)
 4e4:	3803      	subs	r0, #3
 4e6:	47b0      	blx	r6
			for (i = 0; i < (_nvm_dev.page_size); i++)
 4e8:	2300      	movs	r3, #0
 4ea:	4d20      	ldr	r5, [pc, #128]	; (56c <STACK_SIZE+0x16c>)
 4ec:	60fe      	str	r6, [r7, #12]
 4ee:	602b      	str	r3, [r5, #0]
 4f0:	682b      	ldr	r3, [r5, #0]
 4f2:	42a3      	cmp	r3, r4
 4f4:	d2a4      	bcs.n	440 <STACK_SIZE+0x40>
			{	
				uart_write_byte((uint8_t)(app_start_address >> 8));
 4f6:	4e11      	ldr	r6, [pc, #68]	; (53c <STACK_SIZE+0x13c>)
 4f8:	68fb      	ldr	r3, [r7, #12]
 4fa:	6830      	ldr	r0, [r6, #0]
 4fc:	0a00      	lsrs	r0, r0, #8
 4fe:	b2c0      	uxtb	r0, r0
 500:	4798      	blx	r3
				uart_write_byte((uint8_t)(app_start_address >> 16));
 502:	6830      	ldr	r0, [r6, #0]
 504:	68fb      	ldr	r3, [r7, #12]
 506:	0c00      	lsrs	r0, r0, #16
 508:	b2c0      	uxtb	r0, r0
 50a:	4798      	blx	r3
				uart_write_byte((uint8_t)(app_start_address >> 24));
 50c:	6830      	ldr	r0, [r6, #0]
 50e:	68fb      	ldr	r3, [r7, #12]
 510:	0e00      	lsrs	r0, r0, #24
 512:	4798      	blx	r3
				set_ptr();
 514:	4b1c      	ldr	r3, [pc, #112]	; (588 <STACK_SIZE+0x188>)
 516:	4798      	blx	r3

		}
		else if (data_8 == 'v')
		{
			uart_write_byte('s');
			for (i = 0; i < (_nvm_dev.page_size); i++)
 518:	682b      	ldr	r3, [r5, #0]
 51a:	3301      	adds	r3, #1
 51c:	602b      	str	r3, [r5, #0]
 51e:	e7e7      	b.n	4f0 <STACK_SIZE+0xf0>
				set_ptr();
			}
		}
		else if (data_8 == 'z')
		{
			set_ptr();
 520:	4b19      	ldr	r3, [pc, #100]	; (588 <STACK_SIZE+0x188>)
				uart_write_byte((uint8_t)(app_start_address >> 16));
				uart_write_byte((uint8_t)(app_start_address >> 24));
				set_ptr();
			}
		}
		else if (data_8 == 'z')
 522:	287a      	cmp	r0, #122	; 0x7a
 524:	d002      	beq.n	52c <STACK_SIZE+0x12c>
		{
			set_ptr();
		}
		else if (data_8 == 'i')
 526:	2869      	cmp	r0, #105	; 0x69
 528:	d18a      	bne.n	440 <STACK_SIZE+0x40>
		{
			info();
 52a:	4b18      	ldr	r3, [pc, #96]	; (58c <STACK_SIZE+0x18c>)
 52c:	4798      	blx	r3
 52e:	e787      	b.n	440 <STACK_SIZE+0x40>
 530:	4100444f 	.word	0x4100444f
 534:	41004400 	.word	0x41004400
 538:	00000804 	.word	0x00000804
 53c:	20000080 	.word	0x20000080
 540:	e000ed00 	.word	0xe000ed00
 544:	41004410 	.word	0x41004410
 548:	40000800 	.word	0x40000800
 54c:	fffffcff 	.word	0xfffffcff
 550:	41004000 	.word	0x41004000
 554:	00000199 	.word	0x00000199
 558:	000001bd 	.word	0x000001bd
 55c:	2000006c 	.word	0x2000006c
 560:	00000285 	.word	0x00000285
 564:	2000004e 	.word	0x2000004e
 568:	0000025d 	.word	0x0000025d
 56c:	20000078 	.word	0x20000078
 570:	00003fff 	.word	0x00003fff
 574:	00000299 	.word	0x00000299
 578:	20000074 	.word	0x20000074
 57c:	2000007c 	.word	0x2000007c
 580:	000002e5 	.word	0x000002e5
 584:	ffffbfff 	.word	0xffffbfff
 588:	0000037d 	.word	0x0000037d
 58c:	000003a9 	.word	0x000003a9

00000590 <__libc_init_array>:
 590:	4b0e      	ldr	r3, [pc, #56]	; (5cc <__libc_init_array+0x3c>)
 592:	b570      	push	{r4, r5, r6, lr}
 594:	2500      	movs	r5, #0
 596:	1c1e      	adds	r6, r3, #0
 598:	4c0d      	ldr	r4, [pc, #52]	; (5d0 <__libc_init_array+0x40>)
 59a:	1ae4      	subs	r4, r4, r3
 59c:	10a4      	asrs	r4, r4, #2
 59e:	42a5      	cmp	r5, r4
 5a0:	d004      	beq.n	5ac <__libc_init_array+0x1c>
 5a2:	00ab      	lsls	r3, r5, #2
 5a4:	58f3      	ldr	r3, [r6, r3]
 5a6:	4798      	blx	r3
 5a8:	3501      	adds	r5, #1
 5aa:	e7f8      	b.n	59e <__libc_init_array+0xe>
 5ac:	f000 f816 	bl	5dc <_init>
 5b0:	4b08      	ldr	r3, [pc, #32]	; (5d4 <__libc_init_array+0x44>)
 5b2:	2500      	movs	r5, #0
 5b4:	1c1e      	adds	r6, r3, #0
 5b6:	4c08      	ldr	r4, [pc, #32]	; (5d8 <__libc_init_array+0x48>)
 5b8:	1ae4      	subs	r4, r4, r3
 5ba:	10a4      	asrs	r4, r4, #2
 5bc:	42a5      	cmp	r5, r4
 5be:	d004      	beq.n	5ca <__libc_init_array+0x3a>
 5c0:	00ab      	lsls	r3, r5, #2
 5c2:	58f3      	ldr	r3, [r6, r3]
 5c4:	4798      	blx	r3
 5c6:	3501      	adds	r5, #1
 5c8:	e7f8      	b.n	5bc <__libc_init_array+0x2c>
 5ca:	bd70      	pop	{r4, r5, r6, pc}
 5cc:	000005e8 	.word	0x000005e8
 5d0:	000005e8 	.word	0x000005e8
 5d4:	000005e8 	.word	0x000005e8
 5d8:	000005ec 	.word	0x000005ec

000005dc <_init>:
 5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 5de:	46c0      	nop			; (mov r8, r8)
 5e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 5e2:	bc08      	pop	{r3}
 5e4:	469e      	mov	lr, r3
 5e6:	4770      	bx	lr

000005e8 <__init_array_start>:
 5e8:	000000b5 	.word	0x000000b5

000005ec <_fini>:
 5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 5ee:	46c0      	nop			; (mov r8, r8)
 5f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 5f2:	bc08      	pop	{r3}
 5f4:	469e      	mov	lr, r3
 5f6:	4770      	bx	lr

000005f8 <__fini_array_start>:
 5f8:	0000008d 	.word	0x0000008d
