
SPI_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000050c  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000430  20000000  0000050c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  20000430  0000093c  00010430  2**2
                  ALLOC
  3 .stack        00000400  20000450  0000095c  00010430  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010430  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010458  2**0
                  CONTENTS, READONLY
  6 .debug_info   00004e61  00000000  00000000  000104b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000063a  00000000  00000000  00015314  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000223  00000000  00000000  0001594e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000000d8  00000000  00000000  00015b71  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000088  00000000  00000000  00015c49  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000a97e  00000000  00000000  00015cd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001d88  00000000  00000000  0002064f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00040cae  00000000  00000000  000223d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000250  00000000  00000000  00063088  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
   0:	20000850 	.word	0x20000850
   4:	000000f1 	.word	0x000000f1
   8:	000000ed 	.word	0x000000ed
   c:	000000ed 	.word	0x000000ed
	...
  2c:	000000ed 	.word	0x000000ed
	...
  38:	000000ed 	.word	0x000000ed
  3c:	000000ed 	.word	0x000000ed
  40:	000000ed 	.word	0x000000ed
  44:	000000ed 	.word	0x000000ed
  48:	000000ed 	.word	0x000000ed
  4c:	000000ed 	.word	0x000000ed
  50:	000000ed 	.word	0x000000ed
  54:	000000ed 	.word	0x000000ed
  58:	000000ed 	.word	0x000000ed
  5c:	00000000 	.word	0x00000000
  60:	000000ed 	.word	0x000000ed
  64:	000000ed 	.word	0x000000ed
  68:	000000ed 	.word	0x000000ed
	...
  74:	000000ed 	.word	0x000000ed
  78:	000000ed 	.word	0x000000ed
  7c:	000000ed 	.word	0x000000ed
	...
  88:	000000ed 	.word	0x000000ed

0000008c <__do_global_dtors_aux>:
  8c:	b510      	push	{r4, lr}
  8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
  90:	7823      	ldrb	r3, [r4, #0]
  92:	2b00      	cmp	r3, #0
  94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
  96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
  98:	2b00      	cmp	r3, #0
  9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
  9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
  9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
  a0:	bf00      	nop
  a2:	2301      	movs	r3, #1
  a4:	7023      	strb	r3, [r4, #0]
  a6:	bd10      	pop	{r4, pc}
  a8:	20000430 	.word	0x20000430
  ac:	00000000 	.word	0x00000000
  b0:	0000050c 	.word	0x0000050c

000000b4 <frame_dummy>:
  b4:	b508      	push	{r3, lr}
  b6:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
  b8:	2b00      	cmp	r3, #0
  ba:	d003      	beq.n	c4 <frame_dummy+0x10>
  bc:	4807      	ldr	r0, [pc, #28]	; (dc <frame_dummy+0x28>)
  be:	4908      	ldr	r1, [pc, #32]	; (e0 <frame_dummy+0x2c>)
  c0:	e000      	b.n	c4 <frame_dummy+0x10>
  c2:	bf00      	nop
  c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
  c6:	6803      	ldr	r3, [r0, #0]
  c8:	2b00      	cmp	r3, #0
  ca:	d100      	bne.n	ce <frame_dummy+0x1a>
  cc:	bd08      	pop	{r3, pc}
  ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
  d0:	2b00      	cmp	r3, #0
  d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
  d4:	4798      	blx	r3
  d6:	e7f9      	b.n	cc <frame_dummy+0x18>
  d8:	00000000 	.word	0x00000000
  dc:	0000050c 	.word	0x0000050c
  e0:	20000434 	.word	0x20000434
  e4:	0000050c 	.word	0x0000050c
  e8:	00000000 	.word	0x00000000

000000ec <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
  ec:	e7fe      	b.n	ec <Dummy_Handler>
  ee:	46c0      	nop			; (mov r8, r8)

000000f0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  f0:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  f2:	4b2b      	ldr	r3, [pc, #172]	; (1a0 <Reset_Handler+0xb0>)
  f4:	4a2b      	ldr	r2, [pc, #172]	; (1a4 <Reset_Handler+0xb4>)
  f6:	429a      	cmp	r2, r3
  f8:	d003      	beq.n	102 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
  fa:	4b2b      	ldr	r3, [pc, #172]	; (1a8 <Reset_Handler+0xb8>)
  fc:	4a28      	ldr	r2, [pc, #160]	; (1a0 <Reset_Handler+0xb0>)
  fe:	429a      	cmp	r2, r3
 100:	d304      	bcc.n	10c <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 102:	4b2a      	ldr	r3, [pc, #168]	; (1ac <Reset_Handler+0xbc>)
 104:	4a2a      	ldr	r2, [pc, #168]	; (1b0 <Reset_Handler+0xc0>)
 106:	429a      	cmp	r2, r3
 108:	d310      	bcc.n	12c <Reset_Handler+0x3c>
 10a:	e01e      	b.n	14a <Reset_Handler+0x5a>
 10c:	4a29      	ldr	r2, [pc, #164]	; (1b4 <Reset_Handler+0xc4>)
 10e:	4b26      	ldr	r3, [pc, #152]	; (1a8 <Reset_Handler+0xb8>)
 110:	3303      	adds	r3, #3
 112:	1a9b      	subs	r3, r3, r2
 114:	089b      	lsrs	r3, r3, #2
 116:	3301      	adds	r3, #1
 118:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 11a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 11c:	4820      	ldr	r0, [pc, #128]	; (1a0 <Reset_Handler+0xb0>)
 11e:	4921      	ldr	r1, [pc, #132]	; (1a4 <Reset_Handler+0xb4>)
 120:	588c      	ldr	r4, [r1, r2]
 122:	5084      	str	r4, [r0, r2]
 124:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 126:	429a      	cmp	r2, r3
 128:	d1fa      	bne.n	120 <Reset_Handler+0x30>
 12a:	e7ea      	b.n	102 <Reset_Handler+0x12>
 12c:	4a22      	ldr	r2, [pc, #136]	; (1b8 <Reset_Handler+0xc8>)
 12e:	4b1f      	ldr	r3, [pc, #124]	; (1ac <Reset_Handler+0xbc>)
 130:	3303      	adds	r3, #3
 132:	1a9b      	subs	r3, r3, r2
 134:	089b      	lsrs	r3, r3, #2
 136:	3301      	adds	r3, #1
 138:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 13a:	2200      	movs	r2, #0
                *pDest++ = 0;
 13c:	481c      	ldr	r0, [pc, #112]	; (1b0 <Reset_Handler+0xc0>)
 13e:	2100      	movs	r1, #0
 140:	1814      	adds	r4, r2, r0
 142:	6021      	str	r1, [r4, #0]
 144:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 146:	429a      	cmp	r2, r3
 148:	d1fa      	bne.n	140 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 14a:	4a1c      	ldr	r2, [pc, #112]	; (1bc <Reset_Handler+0xcc>)
 14c:	21ff      	movs	r1, #255	; 0xff
 14e:	4b1c      	ldr	r3, [pc, #112]	; (1c0 <Reset_Handler+0xd0>)
 150:	438b      	bics	r3, r1
 152:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 154:	39fd      	subs	r1, #253	; 0xfd
 156:	2390      	movs	r3, #144	; 0x90
 158:	005b      	lsls	r3, r3, #1
 15a:	4a1a      	ldr	r2, [pc, #104]	; (1c4 <Reset_Handler+0xd4>)
 15c:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
 15e:	4b1a      	ldr	r3, [pc, #104]	; (1c8 <Reset_Handler+0xd8>)
 160:	7b9a      	ldrb	r2, [r3, #14]
 162:	312e      	adds	r1, #46	; 0x2e
 164:	438a      	bics	r2, r1
 166:	1c11      	adds	r1, r2, #0
 168:	2220      	movs	r2, #32
 16a:	430a      	orrs	r2, r1
 16c:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 16e:	7b9a      	ldrb	r2, [r3, #14]
 170:	210c      	movs	r1, #12
 172:	438a      	bics	r2, r1
 174:	1c11      	adds	r1, r2, #0
 176:	2208      	movs	r2, #8
 178:	430a      	orrs	r2, r1
 17a:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 17c:	7b9a      	ldrb	r2, [r3, #14]
 17e:	2103      	movs	r1, #3
 180:	438a      	bics	r2, r1
 182:	1c11      	adds	r1, r2, #0
 184:	2202      	movs	r2, #2
 186:	430a      	orrs	r2, r1
 188:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
 18a:	4a10      	ldr	r2, [pc, #64]	; (1cc <Reset_Handler+0xdc>)
 18c:	6851      	ldr	r1, [r2, #4]
 18e:	2380      	movs	r3, #128	; 0x80
 190:	430b      	orrs	r3, r1
 192:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
 194:	4b0e      	ldr	r3, [pc, #56]	; (1d0 <Reset_Handler+0xe0>)
 196:	4798      	blx	r3

        /* Branch to main function */
        main();
 198:	4b0e      	ldr	r3, [pc, #56]	; (1d4 <Reset_Handler+0xe4>)
 19a:	4798      	blx	r3

        /* Infinite loop */
        while (1);
 19c:	e7fe      	b.n	19c <Reset_Handler+0xac>
 19e:	46c0      	nop			; (mov r8, r8)
 1a0:	20000000 	.word	0x20000000
 1a4:	0000050c 	.word	0x0000050c
 1a8:	20000430 	.word	0x20000430
 1ac:	20000450 	.word	0x20000450
 1b0:	20000430 	.word	0x20000430
 1b4:	20000004 	.word	0x20000004
 1b8:	20000434 	.word	0x20000434
 1bc:	e000ed00 	.word	0xe000ed00
 1c0:	00000000 	.word	0x00000000
 1c4:	41007000 	.word	0x41007000
 1c8:	41004800 	.word	0x41004800
 1cc:	41004000 	.word	0x41004000
 1d0:	00000369 	.word	0x00000369
 1d4:	00000235 	.word	0x00000235

000001d8 <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
 1d8:	4a01      	ldr	r2, [pc, #4]	; (1e0 <SystemInit+0x8>)
 1da:	4b02      	ldr	r3, [pc, #8]	; (1e4 <SystemInit+0xc>)
 1dc:	601a      	str	r2, [r3, #0]
	return;
}
 1de:	4770      	bx	lr
 1e0:	000f4240 	.word	0x000f4240
 1e4:	20000000 	.word	0x20000000

000001e8 <pin_set_peripheral_function>:
 */ 

#include "sam.h"

void pin_set_peripheral_function(uint32_t pinmux)
{
 1e8:	b570      	push	{r4, r5, r6, lr}
            31:21 : port information 0->PORTA, 1->PORTB
            20:16 : pin 0-31
        15:00 pin multiplex information
        there are defines for pinmux like: PINMUX_PA09D_SERCOM2_PAD1 
    */
    uint16_t pad = pinmux >> 16;    // get pad (port+pin)
 1ea:	0c04      	lsrs	r4, r0, #16
    uint8_t port = pad >> 5;        // get port
    uint8_t pin  = pad & 0x1F;      // get number of pin - no port information anymore
 1ec:	b2e2      	uxtb	r2, r4
 1ee:	231f      	movs	r3, #31
 1f0:	4013      	ands	r3, r2
            20:16 : pin 0-31
        15:00 pin multiplex information
        there are defines for pinmux like: PINMUX_PA09D_SERCOM2_PAD1 
    */
    uint16_t pad = pinmux >> 16;    // get pad (port+pin)
    uint8_t port = pad >> 5;        // get port
 1f2:	0964      	lsrs	r4, r4, #5
    uint8_t pin  = pad & 0x1F;      // get number of pin - no port information anymore
    
    PORT->Group[port].PINCFG[pin].bit.PMUXEN =1;
 1f4:	b2e1      	uxtb	r1, r4
 1f6:	01c9      	lsls	r1, r1, #7
 1f8:	4c0d      	ldr	r4, [pc, #52]	; (230 <pin_set_peripheral_function+0x48>)
 1fa:	46a4      	mov	ip, r4
 1fc:	4461      	add	r1, ip
 1fe:	18cc      	adds	r4, r1, r3
 200:	3440      	adds	r4, #64	; 0x40
 202:	7826      	ldrb	r6, [r4, #0]
 204:	2501      	movs	r5, #1
 206:	4335      	orrs	r5, r6
 208:	7025      	strb	r5, [r4, #0]
    
    /* each pinmux register is for two pins! with pin/2 you can get the index of the needed pinmux register
       the p mux resiter is 8Bit   (7:4 odd pin; 3:0 evan bit)  */
    // reset pinmux values.                             VV shift if pin is odd (if evan:  (4*(pin & 1))==0  )
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
 20a:	085b      	lsrs	r3, r3, #1
 20c:	18cb      	adds	r3, r1, r3
 20e:	3330      	adds	r3, #48	; 0x30
 210:	781c      	ldrb	r4, [r3, #0]
 212:	2101      	movs	r1, #1
 214:	400a      	ands	r2, r1
 216:	0091      	lsls	r1, r2, #2
 218:	220f      	movs	r2, #15
 21a:	408a      	lsls	r2, r1
 21c:	4394      	bics	r4, r2
 21e:	701c      	strb	r4, [r3, #0]
                    //          
    // set new values
    PORT->Group[port].PMUX[pin/2].reg |=  ( (uint8_t)( (pinmux&0xFFFF) <<(4*(pin&1)) ) ); 
 220:	781a      	ldrb	r2, [r3, #0]
 222:	0400      	lsls	r0, r0, #16
 224:	0c00      	lsrs	r0, r0, #16
 226:	4088      	lsls	r0, r1
 228:	4302      	orrs	r2, r0
 22a:	b2d2      	uxtb	r2, r2
 22c:	701a      	strb	r2, [r3, #0]
 22e:	bd70      	pop	{r4, r5, r6, pc}
 230:	41004400 	.word	0x41004400

00000234 <main>:
uint8_t data;
uint8_t temp;


int main(void)
{
 234:	b510      	push	{r4, lr}
    /* Initialize the SAM system */
    SystemInit();
 236:	4b0f      	ldr	r3, [pc, #60]	; (274 <main+0x40>)
 238:	4798      	blx	r3
	
	REG_PORT_DIR0 |= (1 << 5); //set /CS as output
 23a:	490f      	ldr	r1, [pc, #60]	; (278 <main+0x44>)
 23c:	680a      	ldr	r2, [r1, #0]
 23e:	2320      	movs	r3, #32
 240:	431a      	orrs	r2, r3
 242:	600a      	str	r2, [r1, #0]
	REG_PORT_OUT0 |= (1 << 5); //pull /CS HIGH.
 244:	4a0d      	ldr	r2, [pc, #52]	; (27c <main+0x48>)
 246:	6811      	ldr	r1, [r2, #0]
 248:	430b      	orrs	r3, r1
 24a:	6013      	str	r3, [r2, #0]
	
	pin_set_peripheral_function(PINMUX_PA06C_SERCOM0_PAD0); //MISO
 24c:	480c      	ldr	r0, [pc, #48]	; (280 <main+0x4c>)
 24e:	4c0d      	ldr	r4, [pc, #52]	; (284 <main+0x50>)
 250:	47a0      	blx	r4
	pin_set_peripheral_function(PINMUX_PA04C_SERCOM0_PAD2); //MOSI
 252:	480d      	ldr	r0, [pc, #52]	; (288 <main+0x54>)
 254:	47a0      	blx	r4
	pin_set_peripheral_function(PINMUX_PA07C_SERCOM0_PAD1); //SCLK
 256:	480d      	ldr	r0, [pc, #52]	; (28c <main+0x58>)
 258:	47a0      	blx	r4
	
	SPI_setup(0);
 25a:	2000      	movs	r0, #0
 25c:	4b0c      	ldr	r3, [pc, #48]	; (290 <main+0x5c>)
 25e:	4798      	blx	r3
	
	SPI_write_wait(0x90);
 260:	2090      	movs	r0, #144	; 0x90
 262:	4b0c      	ldr	r3, [pc, #48]	; (294 <main+0x60>)
 264:	4798      	blx	r3
	//SPI_read_RXBuffer(data);
	data = SPI_read_ID(0x90,0x0);
 266:	2090      	movs	r0, #144	; 0x90
 268:	2100      	movs	r1, #0
 26a:	4b0b      	ldr	r3, [pc, #44]	; (298 <main+0x64>)
 26c:	4798      	blx	r3
 26e:	4b0b      	ldr	r3, [pc, #44]	; (29c <main+0x68>)
 270:	7018      	strb	r0, [r3, #0]
	
	
    /* Replace with your application code */
    while (1) 
    {
    }
 272:	e7fe      	b.n	272 <main+0x3e>
 274:	000001d9 	.word	0x000001d9
 278:	41004400 	.word	0x41004400
 27c:	41004410 	.word	0x41004410
 280:	00060002 	.word	0x00060002
 284:	000001e9 	.word	0x000001e9
 288:	00040002 	.word	0x00040002
 28c:	00070002 	.word	0x00070002
 290:	000002a1 	.word	0x000002a1
 294:	00000311 	.word	0x00000311
 298:	00000325 	.word	0x00000325
 29c:	2000044d 	.word	0x2000044d

000002a0 <SPI_setup>:
*/
#include "spi.h"

void SPI_setup(uint8_t mode)
{
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0;    // APBCMASK
 2a0:	4a16      	ldr	r2, [pc, #88]	; (2fc <SPI_setup+0x5c>)
 2a2:	6a11      	ldr	r1, [r2, #32]
 2a4:	2304      	movs	r3, #4
 2a6:	430b      	orrs	r3, r1
 2a8:	6213      	str	r3, [r2, #32]
	GCLK->CLKCTRL.reg |= ((uint16_t)(   GCLK_CLKCTRL_GEN_GCLK0_Val|
 2aa:	4a15      	ldr	r2, [pc, #84]	; (300 <SPI_setup+0x60>)
 2ac:	8851      	ldrh	r1, [r2, #2]
 2ae:	4b15      	ldr	r3, [pc, #84]	; (304 <SPI_setup+0x64>)
 2b0:	430b      	orrs	r3, r1
 2b2:	8053      	strh	r3, [r2, #2]
	GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE)|
	GCLK_CLKCTRL_CLKEN ));
	
	SERCOM0->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
 2b4:	4a14      	ldr	r2, [pc, #80]	; (308 <SPI_setup+0x68>)
 2b6:	6811      	ldr	r1, [r2, #0]
 2b8:	2301      	movs	r3, #1
 2ba:	430b      	orrs	r3, r1
 2bc:	6013      	str	r3, [r2, #0]
	while(SERCOM0->SPI.SYNCBUSY.bit.SWRST);
 2be:	1c11      	adds	r1, r2, #0
 2c0:	2201      	movs	r2, #1
 2c2:	69cb      	ldr	r3, [r1, #28]
 2c4:	421a      	tst	r2, r3
 2c6:	d1fc      	bne.n	2c2 <SPI_setup+0x22>

	SERCOM0->SPI.CTRLA.reg = ( ((mode&3) <<SERCOM_SPI_CTRLA_CPHA_Pos)|
 2c8:	2303      	movs	r3, #3
 2ca:	4018      	ands	r0, r3
 2cc:	0700      	lsls	r0, r0, #28
	SERCOM_SPI_CTRLA_DOPO(0)|
	SERCOM_SPI_CTRLA_DIPO(2)|
	SERCOM_SPI_CTRLA_MODE_SPI_MASTER|
 2ce:	4b0f      	ldr	r3, [pc, #60]	; (30c <SPI_setup+0x6c>)
 2d0:	4318      	orrs	r0, r3
	GCLK_CLKCTRL_CLKEN ));
	
	SERCOM0->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
	while(SERCOM0->SPI.SYNCBUSY.bit.SWRST);

	SERCOM0->SPI.CTRLA.reg = ( ((mode&3) <<SERCOM_SPI_CTRLA_CPHA_Pos)|
 2d2:	4b0d      	ldr	r3, [pc, #52]	; (308 <SPI_setup+0x68>)
 2d4:	6018      	str	r0, [r3, #0]
	SERCOM_SPI_CTRLA_DOPO(0)|
	SERCOM_SPI_CTRLA_DIPO(2)|
	SERCOM_SPI_CTRLA_MODE_SPI_MASTER|
	SERCOM_SPI_CTRLA_RUNSTDBY);
	
	SERCOM0->SPI.CTRLB.bit.RXEN = 1;
 2d6:	685a      	ldr	r2, [r3, #4]
 2d8:	2180      	movs	r1, #128	; 0x80
 2da:	0289      	lsls	r1, r1, #10
 2dc:	430a      	orrs	r2, r1
 2de:	605a      	str	r2, [r3, #4]
	SERCOM0->SPI.BAUD.reg = ((uint16_t) SERCOM_SPI_BAUD_BAUD(SPI_BAUD_VALUE));
 2e0:	2200      	movs	r2, #0
 2e2:	731a      	strb	r2, [r3, #12]
	
	SERCOM0->SPI.CTRLA.bit.ENABLE = 1;
 2e4:	6819      	ldr	r1, [r3, #0]
 2e6:	3202      	adds	r2, #2
 2e8:	430a      	orrs	r2, r1
 2ea:	601a      	str	r2, [r3, #0]
	while(SERCOM0->SPI.SYNCBUSY.bit.ENABLE);
 2ec:	1c19      	adds	r1, r3, #0
 2ee:	2201      	movs	r2, #1
 2f0:	69cb      	ldr	r3, [r1, #28]
 2f2:	085b      	lsrs	r3, r3, #1
 2f4:	421a      	tst	r2, r3
 2f6:	d1fb      	bne.n	2f0 <SPI_setup+0x50>
}
 2f8:	4770      	bx	lr
 2fa:	46c0      	nop			; (mov r8, r8)
 2fc:	40000400 	.word	0x40000400
 300:	40000c00 	.word	0x40000c00
 304:	0000400e 	.word	0x0000400e
 308:	42000800 	.word	0x42000800
 30c:	0020008c 	.word	0x0020008c

00000310 <SPI_write_wait>:

void SPI_write_wait(uint8_t data)
{
	while(SERCOM0->SPI.INTFLAG.bit.DRE==0);			// wait for data register to get empty
 310:	4903      	ldr	r1, [pc, #12]	; (320 <SPI_write_wait+0x10>)
 312:	2201      	movs	r2, #1
 314:	7e0b      	ldrb	r3, [r1, #24]
 316:	421a      	tst	r2, r3
 318:	d0fc      	beq.n	314 <SPI_write_wait+0x4>
    SERCOM0->SPI.DATA.reg = data;
 31a:	4b01      	ldr	r3, [pc, #4]	; (320 <SPI_write_wait+0x10>)
 31c:	6298      	str	r0, [r3, #40]	; 0x28
    // there will be something new in the RX buffer now. 
}
 31e:	4770      	bx	lr
 320:	42000800 	.word	0x42000800

00000324 <SPI_read_ID>:
	while(SERCOM0->SPI.INTFLAG.bit.RXC==0);			// wait on receive to get ready
	return (uint8_t) SERCOM0->SPI.DATA.bit.DATA;
}

uint8_t SPI_read_ID(uint32_t CMD, uint32_t Address)
{
 324:	b510      	push	{r4, lr}
	REG_PORT_OUT0 &= (1 << 5);
 326:	4a0e      	ldr	r2, [pc, #56]	; (360 <SPI_read_ID+0x3c>)
 328:	6813      	ldr	r3, [r2, #0]
 32a:	2420      	movs	r4, #32
 32c:	4023      	ands	r3, r4
 32e:	6013      	str	r3, [r2, #0]
	while(SERCOM0->SPI.INTFLAG.bit.DRE==0);
 330:	4c0c      	ldr	r4, [pc, #48]	; (364 <SPI_read_ID+0x40>)
 332:	2201      	movs	r2, #1
 334:	7e23      	ldrb	r3, [r4, #24]
 336:	421a      	tst	r2, r3
 338:	d0fc      	beq.n	334 <SPI_read_ID+0x10>
	SERCOM0->SPI.DATA.reg = CMD | Address;
 33a:	4301      	orrs	r1, r0
 33c:	4b09      	ldr	r3, [pc, #36]	; (364 <SPI_read_ID+0x40>)
 33e:	6299      	str	r1, [r3, #40]	; 0x28
	REG_PORT_OUT0 |= (1 << 5);
 340:	4a07      	ldr	r2, [pc, #28]	; (360 <SPI_read_ID+0x3c>)
 342:	6811      	ldr	r1, [r2, #0]
 344:	2320      	movs	r3, #32
 346:	430b      	orrs	r3, r1
 348:	6013      	str	r3, [r2, #0]
	while(SERCOM0->SPI.INTFLAG.bit.RXC==0);
 34a:	4906      	ldr	r1, [pc, #24]	; (364 <SPI_read_ID+0x40>)
 34c:	2201      	movs	r2, #1
 34e:	7e0b      	ldrb	r3, [r1, #24]
 350:	089b      	lsrs	r3, r3, #2
 352:	421a      	tst	r2, r3
 354:	d0fb      	beq.n	34e <SPI_read_ID+0x2a>
	return (uint8_t) SERCOM0->SPI.DATA.bit.DATA;
 356:	4b03      	ldr	r3, [pc, #12]	; (364 <SPI_read_ID+0x40>)
 358:	6a98      	ldr	r0, [r3, #40]	; 0x28
 35a:	b2c0      	uxtb	r0, r0
 35c:	bd10      	pop	{r4, pc}
 35e:	46c0      	nop			; (mov r8, r8)
 360:	41004410 	.word	0x41004410
 364:	42000800 	.word	0x42000800

00000368 <__libc_init_array>:
 368:	b570      	push	{r4, r5, r6, lr}
 36a:	4e0d      	ldr	r6, [pc, #52]	; (3a0 <__libc_init_array+0x38>)
 36c:	4d0d      	ldr	r5, [pc, #52]	; (3a4 <__libc_init_array+0x3c>)
 36e:	2400      	movs	r4, #0
 370:	1bad      	subs	r5, r5, r6
 372:	10ad      	asrs	r5, r5, #2
 374:	d005      	beq.n	382 <__libc_init_array+0x1a>
 376:	00a3      	lsls	r3, r4, #2
 378:	58f3      	ldr	r3, [r6, r3]
 37a:	3401      	adds	r4, #1
 37c:	4798      	blx	r3
 37e:	42a5      	cmp	r5, r4
 380:	d1f9      	bne.n	376 <__libc_init_array+0xe>
 382:	f000 f8b1 	bl	4e8 <_init>
 386:	4e08      	ldr	r6, [pc, #32]	; (3a8 <__libc_init_array+0x40>)
 388:	4d08      	ldr	r5, [pc, #32]	; (3ac <__libc_init_array+0x44>)
 38a:	2400      	movs	r4, #0
 38c:	1bad      	subs	r5, r5, r6
 38e:	10ad      	asrs	r5, r5, #2
 390:	d005      	beq.n	39e <__libc_init_array+0x36>
 392:	00a3      	lsls	r3, r4, #2
 394:	58f3      	ldr	r3, [r6, r3]
 396:	3401      	adds	r4, #1
 398:	4798      	blx	r3
 39a:	42a5      	cmp	r5, r4
 39c:	d1f9      	bne.n	392 <__libc_init_array+0x2a>
 39e:	bd70      	pop	{r4, r5, r6, pc}
 3a0:	000004f4 	.word	0x000004f4
 3a4:	000004f4 	.word	0x000004f4
 3a8:	000004f4 	.word	0x000004f4
 3ac:	000004fc 	.word	0x000004fc

000003b0 <register_fini>:
 3b0:	b508      	push	{r3, lr}
 3b2:	4b03      	ldr	r3, [pc, #12]	; (3c0 <register_fini+0x10>)
 3b4:	2b00      	cmp	r3, #0
 3b6:	d002      	beq.n	3be <register_fini+0xe>
 3b8:	4802      	ldr	r0, [pc, #8]	; (3c4 <register_fini+0x14>)
 3ba:	f000 f805 	bl	3c8 <atexit>
 3be:	bd08      	pop	{r3, pc}
 3c0:	00000000 	.word	0x00000000
 3c4:	000003d9 	.word	0x000003d9

000003c8 <atexit>:
 3c8:	b508      	push	{r3, lr}
 3ca:	1c01      	adds	r1, r0, #0
 3cc:	2200      	movs	r2, #0
 3ce:	2000      	movs	r0, #0
 3d0:	2300      	movs	r3, #0
 3d2:	f000 f81b 	bl	40c <__register_exitproc>
 3d6:	bd08      	pop	{r3, pc}

000003d8 <__libc_fini_array>:
 3d8:	b538      	push	{r3, r4, r5, lr}
 3da:	4b09      	ldr	r3, [pc, #36]	; (400 <STACK_SIZE>)
 3dc:	4c09      	ldr	r4, [pc, #36]	; (404 <STACK_SIZE+0x4>)
 3de:	1ae4      	subs	r4, r4, r3
 3e0:	10a4      	asrs	r4, r4, #2
 3e2:	d009      	beq.n	3f8 <__libc_fini_array+0x20>
 3e4:	4a08      	ldr	r2, [pc, #32]	; (408 <STACK_SIZE+0x8>)
 3e6:	18a5      	adds	r5, r4, r2
 3e8:	00ad      	lsls	r5, r5, #2
 3ea:	18ed      	adds	r5, r5, r3
 3ec:	682b      	ldr	r3, [r5, #0]
 3ee:	3c01      	subs	r4, #1
 3f0:	4798      	blx	r3
 3f2:	3d04      	subs	r5, #4
 3f4:	2c00      	cmp	r4, #0
 3f6:	d1f9      	bne.n	3ec <__libc_fini_array+0x14>
 3f8:	f000 f880 	bl	4fc <_fini>
 3fc:	bd38      	pop	{r3, r4, r5, pc}
 3fe:	46c0      	nop			; (mov r8, r8)
 400:	00000508 	.word	0x00000508
 404:	0000050c 	.word	0x0000050c
 408:	3fffffff 	.word	0x3fffffff

0000040c <__register_exitproc>:
 40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 40e:	4644      	mov	r4, r8
 410:	465f      	mov	r7, fp
 412:	4656      	mov	r6, sl
 414:	464d      	mov	r5, r9
 416:	469b      	mov	fp, r3
 418:	4b2f      	ldr	r3, [pc, #188]	; (4d8 <__register_exitproc+0xcc>)
 41a:	b4f0      	push	{r4, r5, r6, r7}
 41c:	681c      	ldr	r4, [r3, #0]
 41e:	23a4      	movs	r3, #164	; 0xa4
 420:	005b      	lsls	r3, r3, #1
 422:	1c05      	adds	r5, r0, #0
 424:	58e0      	ldr	r0, [r4, r3]
 426:	1c0e      	adds	r6, r1, #0
 428:	4690      	mov	r8, r2
 42a:	2800      	cmp	r0, #0
 42c:	d04b      	beq.n	4c6 <__register_exitproc+0xba>
 42e:	6843      	ldr	r3, [r0, #4]
 430:	2b1f      	cmp	r3, #31
 432:	dc0d      	bgt.n	450 <__register_exitproc+0x44>
 434:	1c5c      	adds	r4, r3, #1
 436:	2d00      	cmp	r5, #0
 438:	d121      	bne.n	47e <__register_exitproc+0x72>
 43a:	3302      	adds	r3, #2
 43c:	009b      	lsls	r3, r3, #2
 43e:	6044      	str	r4, [r0, #4]
 440:	501e      	str	r6, [r3, r0]
 442:	2000      	movs	r0, #0
 444:	bc3c      	pop	{r2, r3, r4, r5}
 446:	4690      	mov	r8, r2
 448:	4699      	mov	r9, r3
 44a:	46a2      	mov	sl, r4
 44c:	46ab      	mov	fp, r5
 44e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 450:	4b22      	ldr	r3, [pc, #136]	; (4dc <__register_exitproc+0xd0>)
 452:	2b00      	cmp	r3, #0
 454:	d03c      	beq.n	4d0 <__register_exitproc+0xc4>
 456:	20c8      	movs	r0, #200	; 0xc8
 458:	0040      	lsls	r0, r0, #1
 45a:	e000      	b.n	45e <__register_exitproc+0x52>
 45c:	bf00      	nop
 45e:	2800      	cmp	r0, #0
 460:	d036      	beq.n	4d0 <__register_exitproc+0xc4>
 462:	22a4      	movs	r2, #164	; 0xa4
 464:	2300      	movs	r3, #0
 466:	0052      	lsls	r2, r2, #1
 468:	58a1      	ldr	r1, [r4, r2]
 46a:	6043      	str	r3, [r0, #4]
 46c:	6001      	str	r1, [r0, #0]
 46e:	50a0      	str	r0, [r4, r2]
 470:	3240      	adds	r2, #64	; 0x40
 472:	5083      	str	r3, [r0, r2]
 474:	3204      	adds	r2, #4
 476:	5083      	str	r3, [r0, r2]
 478:	2401      	movs	r4, #1
 47a:	2d00      	cmp	r5, #0
 47c:	d0dd      	beq.n	43a <__register_exitproc+0x2e>
 47e:	009a      	lsls	r2, r3, #2
 480:	4691      	mov	r9, r2
 482:	4481      	add	r9, r0
 484:	4642      	mov	r2, r8
 486:	2188      	movs	r1, #136	; 0x88
 488:	464f      	mov	r7, r9
 48a:	507a      	str	r2, [r7, r1]
 48c:	22c4      	movs	r2, #196	; 0xc4
 48e:	0052      	lsls	r2, r2, #1
 490:	4690      	mov	r8, r2
 492:	4480      	add	r8, r0
 494:	4642      	mov	r2, r8
 496:	3987      	subs	r1, #135	; 0x87
 498:	4099      	lsls	r1, r3
 49a:	6812      	ldr	r2, [r2, #0]
 49c:	468a      	mov	sl, r1
 49e:	430a      	orrs	r2, r1
 4a0:	4694      	mov	ip, r2
 4a2:	4642      	mov	r2, r8
 4a4:	4661      	mov	r1, ip
 4a6:	6011      	str	r1, [r2, #0]
 4a8:	2284      	movs	r2, #132	; 0x84
 4aa:	4649      	mov	r1, r9
 4ac:	465f      	mov	r7, fp
 4ae:	0052      	lsls	r2, r2, #1
 4b0:	508f      	str	r7, [r1, r2]
 4b2:	2d02      	cmp	r5, #2
 4b4:	d1c1      	bne.n	43a <__register_exitproc+0x2e>
 4b6:	1c02      	adds	r2, r0, #0
 4b8:	4655      	mov	r5, sl
 4ba:	328d      	adds	r2, #141	; 0x8d
 4bc:	32ff      	adds	r2, #255	; 0xff
 4be:	6811      	ldr	r1, [r2, #0]
 4c0:	430d      	orrs	r5, r1
 4c2:	6015      	str	r5, [r2, #0]
 4c4:	e7b9      	b.n	43a <__register_exitproc+0x2e>
 4c6:	1c20      	adds	r0, r4, #0
 4c8:	304d      	adds	r0, #77	; 0x4d
 4ca:	30ff      	adds	r0, #255	; 0xff
 4cc:	50e0      	str	r0, [r4, r3]
 4ce:	e7ae      	b.n	42e <__register_exitproc+0x22>
 4d0:	2001      	movs	r0, #1
 4d2:	4240      	negs	r0, r0
 4d4:	e7b6      	b.n	444 <__register_exitproc+0x38>
 4d6:	46c0      	nop			; (mov r8, r8)
 4d8:	000004e4 	.word	0x000004e4
 4dc:	00000000 	.word	0x00000000
 4e0:	00000043 	.word	0x00000043

000004e4 <_global_impure_ptr>:
 4e4:	20000008                                ... 

000004e8 <_init>:
 4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 4ea:	46c0      	nop			; (mov r8, r8)
 4ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 4ee:	bc08      	pop	{r3}
 4f0:	469e      	mov	lr, r3
 4f2:	4770      	bx	lr

000004f4 <__init_array_start>:
 4f4:	000003b1 	.word	0x000003b1

000004f8 <__frame_dummy_init_array_entry>:
 4f8:	000000b5                                ....

000004fc <_fini>:
 4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 4fe:	46c0      	nop			; (mov r8, r8)
 500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 502:	bc08      	pop	{r3}
 504:	469e      	mov	lr, r3
 506:	4770      	bx	lr

00000508 <__fini_array_start>:
 508:	0000008d 	.word	0x0000008d
