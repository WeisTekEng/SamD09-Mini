
EEpromTest24LC256.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005c0  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000430  20000000  000005c0  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000028  20000430  000009f0  00010430  2**2
                  ALLOC
  3 .stack        00000400  20000458  00000a18  00010430  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010430  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010458  2**0
                  CONTENTS, READONLY
  6 .debug_info   00008292  00000000  00000000  000104b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c3  00000000  00000000  00018745  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000002e3  00000000  00000000  00018f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000000e0  00000000  00000000  000191eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  000192cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000b6da  00000000  00000000  0001935b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001f29  00000000  00000000  00024a35  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00044320  00000000  00000000  0002695e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000026c  00000000  00000000  0006ac80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
   0:	20000858 	.word	0x20000858
   4:	000000f1 	.word	0x000000f1
   8:	000000ed 	.word	0x000000ed
   c:	000000ed 	.word	0x000000ed
	...
  2c:	000000ed 	.word	0x000000ed
	...
  38:	000000ed 	.word	0x000000ed
  3c:	000000ed 	.word	0x000000ed
  40:	000000ed 	.word	0x000000ed
  44:	000000ed 	.word	0x000000ed
  48:	000000ed 	.word	0x000000ed
  4c:	000000ed 	.word	0x000000ed
  50:	000000ed 	.word	0x000000ed
  54:	000000ed 	.word	0x000000ed
  58:	000000ed 	.word	0x000000ed
  5c:	00000000 	.word	0x00000000
  60:	000000ed 	.word	0x000000ed
  64:	000000ed 	.word	0x000000ed
  68:	000000ed 	.word	0x000000ed
	...
  74:	000000ed 	.word	0x000000ed
  78:	000000ed 	.word	0x000000ed
  7c:	000000ed 	.word	0x000000ed
	...
  88:	000000ed 	.word	0x000000ed

0000008c <__do_global_dtors_aux>:
  8c:	b510      	push	{r4, lr}
  8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
  90:	7823      	ldrb	r3, [r4, #0]
  92:	2b00      	cmp	r3, #0
  94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
  96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
  98:	2b00      	cmp	r3, #0
  9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
  9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
  9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
  a0:	bf00      	nop
  a2:	2301      	movs	r3, #1
  a4:	7023      	strb	r3, [r4, #0]
  a6:	bd10      	pop	{r4, pc}
  a8:	20000430 	.word	0x20000430
  ac:	00000000 	.word	0x00000000
  b0:	000005c0 	.word	0x000005c0

000000b4 <frame_dummy>:
  b4:	b508      	push	{r3, lr}
  b6:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
  b8:	2b00      	cmp	r3, #0
  ba:	d003      	beq.n	c4 <frame_dummy+0x10>
  bc:	4807      	ldr	r0, [pc, #28]	; (dc <frame_dummy+0x28>)
  be:	4908      	ldr	r1, [pc, #32]	; (e0 <frame_dummy+0x2c>)
  c0:	e000      	b.n	c4 <frame_dummy+0x10>
  c2:	bf00      	nop
  c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
  c6:	6803      	ldr	r3, [r0, #0]
  c8:	2b00      	cmp	r3, #0
  ca:	d100      	bne.n	ce <frame_dummy+0x1a>
  cc:	bd08      	pop	{r3, pc}
  ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
  d0:	2b00      	cmp	r3, #0
  d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
  d4:	4798      	blx	r3
  d6:	e7f9      	b.n	cc <frame_dummy+0x18>
  d8:	00000000 	.word	0x00000000
  dc:	000005c0 	.word	0x000005c0
  e0:	20000434 	.word	0x20000434
  e4:	000005c0 	.word	0x000005c0
  e8:	00000000 	.word	0x00000000

000000ec <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
  ec:	e7fe      	b.n	ec <Dummy_Handler>
  ee:	46c0      	nop			; (mov r8, r8)

000000f0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  f0:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  f2:	4b2b      	ldr	r3, [pc, #172]	; (1a0 <Reset_Handler+0xb0>)
  f4:	4a2b      	ldr	r2, [pc, #172]	; (1a4 <Reset_Handler+0xb4>)
  f6:	429a      	cmp	r2, r3
  f8:	d003      	beq.n	102 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
  fa:	4b2b      	ldr	r3, [pc, #172]	; (1a8 <Reset_Handler+0xb8>)
  fc:	4a28      	ldr	r2, [pc, #160]	; (1a0 <Reset_Handler+0xb0>)
  fe:	429a      	cmp	r2, r3
 100:	d304      	bcc.n	10c <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 102:	4b2a      	ldr	r3, [pc, #168]	; (1ac <Reset_Handler+0xbc>)
 104:	4a2a      	ldr	r2, [pc, #168]	; (1b0 <Reset_Handler+0xc0>)
 106:	429a      	cmp	r2, r3
 108:	d310      	bcc.n	12c <Reset_Handler+0x3c>
 10a:	e01e      	b.n	14a <Reset_Handler+0x5a>
 10c:	4a29      	ldr	r2, [pc, #164]	; (1b4 <Reset_Handler+0xc4>)
 10e:	4b26      	ldr	r3, [pc, #152]	; (1a8 <Reset_Handler+0xb8>)
 110:	3303      	adds	r3, #3
 112:	1a9b      	subs	r3, r3, r2
 114:	089b      	lsrs	r3, r3, #2
 116:	3301      	adds	r3, #1
 118:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 11a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 11c:	4820      	ldr	r0, [pc, #128]	; (1a0 <Reset_Handler+0xb0>)
 11e:	4921      	ldr	r1, [pc, #132]	; (1a4 <Reset_Handler+0xb4>)
 120:	588c      	ldr	r4, [r1, r2]
 122:	5084      	str	r4, [r0, r2]
 124:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 126:	429a      	cmp	r2, r3
 128:	d1fa      	bne.n	120 <Reset_Handler+0x30>
 12a:	e7ea      	b.n	102 <Reset_Handler+0x12>
 12c:	4a22      	ldr	r2, [pc, #136]	; (1b8 <Reset_Handler+0xc8>)
 12e:	4b1f      	ldr	r3, [pc, #124]	; (1ac <Reset_Handler+0xbc>)
 130:	3303      	adds	r3, #3
 132:	1a9b      	subs	r3, r3, r2
 134:	089b      	lsrs	r3, r3, #2
 136:	3301      	adds	r3, #1
 138:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 13a:	2200      	movs	r2, #0
                *pDest++ = 0;
 13c:	481c      	ldr	r0, [pc, #112]	; (1b0 <Reset_Handler+0xc0>)
 13e:	2100      	movs	r1, #0
 140:	1814      	adds	r4, r2, r0
 142:	6021      	str	r1, [r4, #0]
 144:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 146:	429a      	cmp	r2, r3
 148:	d1fa      	bne.n	140 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 14a:	4a1c      	ldr	r2, [pc, #112]	; (1bc <Reset_Handler+0xcc>)
 14c:	21ff      	movs	r1, #255	; 0xff
 14e:	4b1c      	ldr	r3, [pc, #112]	; (1c0 <Reset_Handler+0xd0>)
 150:	438b      	bics	r3, r1
 152:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 154:	39fd      	subs	r1, #253	; 0xfd
 156:	2390      	movs	r3, #144	; 0x90
 158:	005b      	lsls	r3, r3, #1
 15a:	4a1a      	ldr	r2, [pc, #104]	; (1c4 <Reset_Handler+0xd4>)
 15c:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
 15e:	4b1a      	ldr	r3, [pc, #104]	; (1c8 <Reset_Handler+0xd8>)
 160:	7b9a      	ldrb	r2, [r3, #14]
 162:	312e      	adds	r1, #46	; 0x2e
 164:	438a      	bics	r2, r1
 166:	1c11      	adds	r1, r2, #0
 168:	2220      	movs	r2, #32
 16a:	430a      	orrs	r2, r1
 16c:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 16e:	7b9a      	ldrb	r2, [r3, #14]
 170:	210c      	movs	r1, #12
 172:	438a      	bics	r2, r1
 174:	1c11      	adds	r1, r2, #0
 176:	2208      	movs	r2, #8
 178:	430a      	orrs	r2, r1
 17a:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 17c:	7b9a      	ldrb	r2, [r3, #14]
 17e:	2103      	movs	r1, #3
 180:	438a      	bics	r2, r1
 182:	1c11      	adds	r1, r2, #0
 184:	2202      	movs	r2, #2
 186:	430a      	orrs	r2, r1
 188:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
 18a:	4a10      	ldr	r2, [pc, #64]	; (1cc <Reset_Handler+0xdc>)
 18c:	6851      	ldr	r1, [r2, #4]
 18e:	2380      	movs	r3, #128	; 0x80
 190:	430b      	orrs	r3, r1
 192:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
 194:	4b0e      	ldr	r3, [pc, #56]	; (1d0 <Reset_Handler+0xe0>)
 196:	4798      	blx	r3

        /* Branch to main function */
        main();
 198:	4b0e      	ldr	r3, [pc, #56]	; (1d4 <Reset_Handler+0xe4>)
 19a:	4798      	blx	r3

        /* Infinite loop */
        while (1);
 19c:	e7fe      	b.n	19c <Reset_Handler+0xac>
 19e:	46c0      	nop			; (mov r8, r8)
 1a0:	20000000 	.word	0x20000000
 1a4:	000005c0 	.word	0x000005c0
 1a8:	20000430 	.word	0x20000430
 1ac:	20000458 	.word	0x20000458
 1b0:	20000430 	.word	0x20000430
 1b4:	20000004 	.word	0x20000004
 1b8:	20000434 	.word	0x20000434
 1bc:	e000ed00 	.word	0xe000ed00
 1c0:	00000000 	.word	0x00000000
 1c4:	41007000 	.word	0x41007000
 1c8:	41004800 	.word	0x41004800
 1cc:	41004000 	.word	0x41004000
 1d0:	0000041d 	.word	0x0000041d
 1d4:	0000036d 	.word	0x0000036d

000001d8 <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
 1d8:	4a01      	ldr	r2, [pc, #4]	; (1e0 <SystemInit+0x8>)
 1da:	4b02      	ldr	r3, [pc, #8]	; (1e4 <SystemInit+0xc>)
 1dc:	601a      	str	r2, [r3, #0]
	return;
}
 1de:	4770      	bx	lr
 1e0:	000f4240 	.word	0x000f4240
 1e4:	20000000 	.word	0x20000000

000001e8 <pin_set_peripheral_function>:


#include "includes.h"

void pin_set_peripheral_function(uint32_t pinmux)
{
 1e8:	b570      	push	{r4, r5, r6, lr}
            31:21 : port information 0->PORTA, 1->PORTB
            20:16 : pin 0-31
        15:00 pin multiplex information
        there are defines for pinmux like: PINMUX_PA09D_SERCOM2_PAD1 
    */
    uint16_t pad = pinmux >> 16;    // get pad (port+pin)
 1ea:	0c04      	lsrs	r4, r0, #16
    uint8_t port = pad >> 5;        // get port
    uint8_t pin  = pad & 0x1F;      // get number of pin - no port information anymore
 1ec:	b2e2      	uxtb	r2, r4
 1ee:	231f      	movs	r3, #31
 1f0:	4013      	ands	r3, r2
            20:16 : pin 0-31
        15:00 pin multiplex information
        there are defines for pinmux like: PINMUX_PA09D_SERCOM2_PAD1 
    */
    uint16_t pad = pinmux >> 16;    // get pad (port+pin)
    uint8_t port = pad >> 5;        // get port
 1f2:	0964      	lsrs	r4, r4, #5
    uint8_t pin  = pad & 0x1F;      // get number of pin - no port information anymore
    
    PORT->Group[port].PINCFG[pin].bit.PMUXEN =1;
 1f4:	b2e1      	uxtb	r1, r4
 1f6:	01c9      	lsls	r1, r1, #7
 1f8:	4c0d      	ldr	r4, [pc, #52]	; (230 <pin_set_peripheral_function+0x48>)
 1fa:	46a4      	mov	ip, r4
 1fc:	4461      	add	r1, ip
 1fe:	18cc      	adds	r4, r1, r3
 200:	3440      	adds	r4, #64	; 0x40
 202:	7826      	ldrb	r6, [r4, #0]
 204:	2501      	movs	r5, #1
 206:	4335      	orrs	r5, r6
 208:	7025      	strb	r5, [r4, #0]
    
    /* each pinmux register is for two pins! with pin/2 you can get the index of the needed pinmux register
       the p mux resiter is 8Bit   (7:4 odd pin; 3:0 evan bit)  */
    // reset pinmux values.                             VV shift if pin is odd (if evan:  (4*(pin & 1))==0  )
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
 20a:	085b      	lsrs	r3, r3, #1
 20c:	18cb      	adds	r3, r1, r3
 20e:	3330      	adds	r3, #48	; 0x30
 210:	781c      	ldrb	r4, [r3, #0]
 212:	2101      	movs	r1, #1
 214:	400a      	ands	r2, r1
 216:	0091      	lsls	r1, r2, #2
 218:	220f      	movs	r2, #15
 21a:	408a      	lsls	r2, r1
 21c:	4394      	bics	r4, r2
 21e:	701c      	strb	r4, [r3, #0]
                    //          
    // set new values
    PORT->Group[port].PMUX[pin/2].reg |=  ( (uint8_t)( (pinmux&0xFFFF) <<(4*(pin&1)) ) ); 
 220:	781a      	ldrb	r2, [r3, #0]
 222:	0400      	lsls	r0, r0, #16
 224:	0c00      	lsrs	r0, r0, #16
 226:	4088      	lsls	r0, r1
 228:	4302      	orrs	r2, r0
 22a:	b2d2      	uxtb	r2, r2
 22c:	701a      	strb	r2, [r3, #0]
 22e:	bd70      	pop	{r4, r5, r6, pc}
 230:	41004400 	.word	0x41004400

00000234 <i2c_setup>:
#include "includes.h"

void i2c_setup(Sercom *sercom)
{
	/*setup power management controler*/
	PM->APBCMASK.reg = PM_APBCMASK_SERCOM0;
 234:	2204      	movs	r2, #4
 236:	4b13      	ldr	r3, [pc, #76]	; (284 <i2c_setup+0x50>)
 238:	621a      	str	r2, [r3, #32]
	
	/*setup clocks*/
	
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE) |
 23a:	4a13      	ldr	r2, [pc, #76]	; (288 <i2c_setup+0x54>)
 23c:	8851      	ldrh	r1, [r2, #2]
 23e:	4b13      	ldr	r3, [pc, #76]	; (28c <i2c_setup+0x58>)
 240:	430b      	orrs	r3, r1
 242:	8053      	strh	r3, [r2, #2]
							GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(0);
							
	/*reset i2c module*/
	sercom->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_SWRST;
 244:	6802      	ldr	r2, [r0, #0]
 246:	2301      	movs	r3, #1
 248:	4313      	orrs	r3, r2
 24a:	6003      	str	r3, [r0, #0]
	
	sercom->I2CM.CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
 24c:	2380      	movs	r3, #128	; 0x80
 24e:	005b      	lsls	r3, r3, #1
 250:	6043      	str	r3, [r0, #4]
	while(sercom->I2CM.SYNCBUSY.reg);
 252:	69c3      	ldr	r3, [r0, #28]
 254:	2b00      	cmp	r3, #0
 256:	d1fc      	bne.n	252 <i2c_setup+0x1e>
	//int32_t tmp_baud = (int32_t)(div_ceil(numerator, denominator));
	//sercom->I2CM.BAUD.bit.BAUD = SERCOM_I2CM_BAUD_BAUD(tmp_baud);
	
    // Synchronous arithmetic baudrate
	//SERCOM0->I2CM.BAUD.bit.BAUD = SystemCoreClock / ( 2 * TWI_CLOCK) - 1 ;
	sercom->I2CM.BAUD.reg = SERCOM_I2CM_BAUD_BAUD(160);
 258:	33a0      	adds	r3, #160	; 0xa0
 25a:	60c3      	str	r3, [r0, #12]
	while (sercom->I2CM.SYNCBUSY.reg);
 25c:	69c3      	ldr	r3, [r0, #28]
 25e:	2b00      	cmp	r3, #0
 260:	d1fc      	bne.n	25c <i2c_setup+0x28>
	
	/*setup module*/
	SERCOM0->I2CM.CTRLA.reg =    SERCOM_I2CM_CTRLA_ENABLE | /* enable module */
 262:	4a0b      	ldr	r2, [pc, #44]	; (290 <i2c_setup+0x5c>)
 264:	4b0b      	ldr	r3, [pc, #44]	; (294 <i2c_setup+0x60>)
 266:	601a      	str	r2, [r3, #0]
	SERCOM_I2CM_CTRLA_MODE_I2C_MASTER |    /* i2c master mode */
	SERCOM_I2CM_CTRLA_SDAHOLD(3);        /* SDA hold time to 600ns */
	while (sercom->I2CM.SYNCBUSY.bit.ENABLE);
 268:	2201      	movs	r2, #1
 26a:	69c3      	ldr	r3, [r0, #28]
 26c:	085b      	lsrs	r3, r3, #1
 26e:	421a      	tst	r2, r3
 270:	d1fb      	bne.n	26a <i2c_setup+0x36>
	
	sercom->I2CM.STATUS.reg |= SERCOM_I2CM_STATUS_BUSSTATE(1);
 272:	8b42      	ldrh	r2, [r0, #26]
 274:	2310      	movs	r3, #16
 276:	4313      	orrs	r3, r2
 278:	8343      	strh	r3, [r0, #26]
	while(sercom->I2CM.SYNCBUSY.reg);
 27a:	69c3      	ldr	r3, [r0, #28]
 27c:	2b00      	cmp	r3, #0
 27e:	d1fc      	bne.n	27a <i2c_setup+0x46>
		//{
			//sercom->I2CM.STATUS.reg |= SERCOM_I2CM_STATUS_BUSSTATE(1); /* set to idle state */
		//}
	//}
	
}
 280:	4770      	bx	lr
 282:	46c0      	nop			; (mov r8, r8)
 284:	40000400 	.word	0x40000400
 288:	40000c00 	.word	0x40000c00
 28c:	0000400e 	.word	0x0000400e
 290:	00300016 	.word	0x00300016
 294:	42000800 	.word	0x42000800

00000298 <i2c_read>:

uint8_t i2c_read(Sercom *sercom, uint8_t *data, int size, uint8_t address)
{
 298:	b5f0      	push	{r4, r5, r6, r7, lr}
	sercom->I2CM.ADDR.reg = (address << 0x1ul) | 1;//| 0x0ul; //i2c transfer read = 1
 29a:	005b      	lsls	r3, r3, #1
 29c:	2401      	movs	r4, #1
 29e:	4323      	orrs	r3, r4
 2a0:	6243      	str	r3, [r0, #36]	; 0x24
	
	//while (0==(sercom->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB));
	
	if(sercom->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
 2a2:	8b43      	ldrh	r3, [r0, #26]
 2a4:	075b      	lsls	r3, r3, #29
 2a6:	d506      	bpl.n	2b6 <i2c_read+0x1e>
	{
		sercom->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
 2a8:	6843      	ldr	r3, [r0, #4]
 2aa:	22c0      	movs	r2, #192	; 0xc0
 2ac:	0292      	lsls	r2, r2, #10
 2ae:	4313      	orrs	r3, r2
 2b0:	6043      	str	r3, [r0, #4]
		return False;
 2b2:	2000      	movs	r0, #0
 2b4:	e024      	b.n	300 <i2c_read+0x68>
	}
	
	sercom->I2CM.CTRLB.reg &= -SERCOM_I2CM_CTRLB_ACKACT;
 2b6:	6843      	ldr	r3, [r0, #4]
 2b8:	0c9b      	lsrs	r3, r3, #18
 2ba:	049b      	lsls	r3, r3, #18
 2bc:	6043      	str	r3, [r0, #4]
	
	for(int i = 0;i < size-1;i++)
 2be:	1e53      	subs	r3, r2, #1
 2c0:	2b00      	cmp	r3, #0
 2c2:	dd0b      	ble.n	2dc <i2c_read+0x44>
 2c4:	1c0d      	adds	r5, r1, #0
 2c6:	18ce      	adds	r6, r1, r3
	{
		data[i] = sercom->I2CM.DATA.reg;
 2c8:	2728      	movs	r7, #40	; 0x28
		while (0==(sercom->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB));
 2ca:	2402      	movs	r4, #2
	
	sercom->I2CM.CTRLB.reg &= -SERCOM_I2CM_CTRLB_ACKACT;
	
	for(int i = 0;i < size-1;i++)
	{
		data[i] = sercom->I2CM.DATA.reg;
 2cc:	5dc3      	ldrb	r3, [r0, r7]
 2ce:	702b      	strb	r3, [r5, #0]
		while (0==(sercom->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB));
 2d0:	7e03      	ldrb	r3, [r0, #24]
 2d2:	4223      	tst	r3, r4
 2d4:	d0fc      	beq.n	2d0 <i2c_read+0x38>
 2d6:	3501      	adds	r5, #1
		return False;
	}
	
	sercom->I2CM.CTRLB.reg &= -SERCOM_I2CM_CTRLB_ACKACT;
	
	for(int i = 0;i < size-1;i++)
 2d8:	42b5      	cmp	r5, r6
 2da:	d1f7      	bne.n	2cc <i2c_read+0x34>
	{
		data[i] = sercom->I2CM.DATA.reg;
		while (0==(sercom->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB));
	}
	
	if(size)
 2dc:	2a00      	cmp	r2, #0
 2de:	d00e      	beq.n	2fe <i2c_read+0x66>
	{
		sercom->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
 2e0:	6843      	ldr	r3, [r0, #4]
 2e2:	2480      	movs	r4, #128	; 0x80
 2e4:	02e4      	lsls	r4, r4, #11
 2e6:	4323      	orrs	r3, r4
 2e8:	6043      	str	r3, [r0, #4]
		sercom->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
 2ea:	6843      	ldr	r3, [r0, #4]
 2ec:	24c0      	movs	r4, #192	; 0xc0
 2ee:	02a4      	lsls	r4, r4, #10
 2f0:	4323      	orrs	r3, r4
 2f2:	6043      	str	r3, [r0, #4]
		data[size-1] = sercom->I2CM.DATA.reg;
 2f4:	2328      	movs	r3, #40	; 0x28
 2f6:	5cc3      	ldrb	r3, [r0, r3]
 2f8:	188a      	adds	r2, r1, r2
 2fa:	3a01      	subs	r2, #1
 2fc:	7013      	strb	r3, [r2, #0]
	}
	return *data;
 2fe:	7808      	ldrb	r0, [r1, #0]
}
 300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 302:	46c0      	nop			; (mov r8, r8)

00000304 <startTransmissionWire>:
		// Wait the SYSOP bit from SYNCBUSY coming back to 0
	}
}

uint8_t startTransmissionWire(uint8_t address, SercomWireReadWriteFlag flag)
{
 304:	b510      	push	{r4, lr}
	// 7-bits address + 1-bits R/W
	address = (0x50 << 0x1ul) | flag;
 306:	24a0      	movs	r4, #160	; 0xa0
 308:	430c      	orrs	r4, r1
	}
}

uint8_t isBusIdleWIRE( void )
{
	return SERCOM0->I2CM.STATUS.bit.BUSSTATE == WIRE_IDLE_STATE;
 30a:	4817      	ldr	r0, [pc, #92]	; (368 <startTransmissionWire+0x64>)
 30c:	2203      	movs	r2, #3
 30e:	8b43      	ldrh	r3, [r0, #26]
 310:	091b      	lsrs	r3, r3, #4
 312:	4013      	ands	r3, r2
{
	// 7-bits address + 1-bits R/W
	address = (0x50 << 0x1ul) | flag;

	// Wait idle or owner bus mode
	while ( !isBusIdleWIRE() && !isBusOwnerWIRE() );
 314:	2b01      	cmp	r3, #1
 316:	d004      	beq.n	322 <startTransmissionWire+0x1e>
	return SERCOM0->I2CM.STATUS.bit.BUSSTATE == WIRE_IDLE_STATE;
}

uint8_t isBusOwnerWIRE( void )
{
	return SERCOM0->I2CM.STATUS.bit.BUSSTATE == WIRE_OWNER_STATE;
 318:	8b43      	ldrh	r3, [r0, #26]
 31a:	091b      	lsrs	r3, r3, #4
 31c:	4013      	ands	r3, r2
{
	// 7-bits address + 1-bits R/W
	address = (0x50 << 0x1ul) | flag;

	// Wait idle or owner bus mode
	while ( !isBusIdleWIRE() && !isBusOwnerWIRE() );
 31e:	2b02      	cmp	r3, #2
 320:	d1f5      	bne.n	30e <startTransmissionWire+0xa>

	// Send start and address
	//SERCOM0->I2CM.ADDR.bit.ADDR = address;
	
	SERCOM0->I2CM.ADDR.reg = address;//| 0x0ul; //i2c transfer read = 1
 322:	4b11      	ldr	r3, [pc, #68]	; (368 <startTransmissionWire+0x64>)
 324:	625c      	str	r4, [r3, #36]	; 0x24


	// Address Transmitted
	if ( flag == WIRE_WRITE_FLAG ) // Write mode
 326:	2900      	cmp	r1, #0
 328:	d110      	bne.n	34c <startTransmissionWire+0x48>
	{
		while( !SERCOM0->I2CM.INTFLAG.bit.MB )
 32a:	1c19      	adds	r1, r3, #0
 32c:	2201      	movs	r2, #1
 32e:	7e0b      	ldrb	r3, [r1, #24]
 330:	421a      	tst	r2, r3
 332:	d0fc      	beq.n	32e <startTransmissionWire+0x2a>
 334:	e010      	b.n	358 <startTransmissionWire+0x54>
	{
		while( !SERCOM0->I2CM.INTFLAG.bit.SB )
		{
			// If the slave NACKS the address, the MB bit will be set.
			// In that case, send a stop condition and return False.
			if (SERCOM0->I2CM.INTFLAG.bit.MB) {
 336:	7e0b      	ldrb	r3, [r1, #24]
 338:	421a      	tst	r2, r3
 33a:	d009      	beq.n	350 <startTransmissionWire+0x4c>
				SERCOM0->I2CM.CTRLB.bit.CMD = 3; // Stop condition
 33c:	4a0a      	ldr	r2, [pc, #40]	; (368 <startTransmissionWire+0x64>)
 33e:	6853      	ldr	r3, [r2, #4]
 340:	21c0      	movs	r1, #192	; 0xc0
 342:	0289      	lsls	r1, r1, #10
 344:	430b      	orrs	r3, r1
 346:	6053      	str	r3, [r2, #4]
				return False;
 348:	2000      	movs	r0, #0
 34a:	e00b      	b.n	364 <startTransmissionWire+0x60>
			// Wait transmission complete
		}
	}
	else  // Read mode
	{
		while( !SERCOM0->I2CM.INTFLAG.bit.SB )
 34c:	4906      	ldr	r1, [pc, #24]	; (368 <startTransmissionWire+0x64>)
 34e:	2201      	movs	r2, #1
 350:	7e0b      	ldrb	r3, [r1, #24]
 352:	085b      	lsrs	r3, r3, #1
 354:	421a      	tst	r2, r3
 356:	d0ee      	beq.n	336 <startTransmissionWire+0x32>
		//sercom->I2CM.INTFLAG.bit.SB = 0x1ul;
	}


	//ACK received (0: ACK, 1: NACK)
	if(SERCOM0->I2CM.STATUS.bit.RXNACK)
 358:	4b03      	ldr	r3, [pc, #12]	; (368 <startTransmissionWire+0x64>)
 35a:	8b58      	ldrh	r0, [r3, #26]
 35c:	0740      	lsls	r0, r0, #29
 35e:	0fc0      	lsrs	r0, r0, #31
 360:	2301      	movs	r3, #1
		{
			// If the slave NACKS the address, the MB bit will be set.
			// In that case, send a stop condition and return False.
			if (SERCOM0->I2CM.INTFLAG.bit.MB) {
				SERCOM0->I2CM.CTRLB.bit.CMD = 3; // Stop condition
				return False;
 362:	4058      	eors	r0, r3
	}
	else
	{
		return True;
	}
}
 364:	bd10      	pop	{r4, pc}
 366:	46c0      	nop			; (mov r8, r8)
 368:	42000800 	.word	0x42000800

0000036c <main>:
uint8_t Size = 8;
uint8_t found = 0;
uint32_t addr;

int main(void)
{
 36c:	b5f0      	push	{r4, r5, r6, r7, lr}
 36e:	b083      	sub	sp, #12
    /* Initialize the SAM system */
    SystemInit();
 370:	4b1d      	ldr	r3, [pc, #116]	; (3e8 <main+0x7c>)
 372:	4798      	blx	r3
	
	/* Make CPU to run at 8MHz by clearing prescalar bits */
	SYSCTRL->OSC8M.bit.PRESC = 0;
 374:	4a1d      	ldr	r2, [pc, #116]	; (3ec <main+0x80>)
 376:	6a11      	ldr	r1, [r2, #32]
 378:	4b1d      	ldr	r3, [pc, #116]	; (3f0 <main+0x84>)
 37a:	400b      	ands	r3, r1
 37c:	6213      	str	r3, [r2, #32]
	NVMCTRL->CTRLB.bit.CACHEDIS = 1;
 37e:	4a1d      	ldr	r2, [pc, #116]	; (3f4 <main+0x88>)
 380:	6853      	ldr	r3, [r2, #4]
 382:	2180      	movs	r1, #128	; 0x80
 384:	02c9      	lsls	r1, r1, #11
 386:	430b      	orrs	r3, r1
 388:	6053      	str	r3, [r2, #4]
	
	//PORT->Group[BOOT_PORT].OUTSET.reg = (1>>14);
	//PORT->Group[BOOT_PORT].OUTSET.reg = (1>>15);  
	
	/*setup pinmux for i2c*/
	pin_set_peripheral_function(SDA);
 38a:	481b      	ldr	r0, [pc, #108]	; (3f8 <main+0x8c>)
 38c:	4c1b      	ldr	r4, [pc, #108]	; (3fc <main+0x90>)
 38e:	47a0      	blx	r4
	pin_set_peripheral_function(SCL);
 390:	481b      	ldr	r0, [pc, #108]	; (400 <STACK_SIZE>)
 392:	47a0      	blx	r4
	
	/*init USART*/
	//UART_sercom_init();
	
	/*init I2C*/
	i2c_setup(SERCOM0); /*this works*/
 394:	481b      	ldr	r0, [pc, #108]	; (404 <STACK_SIZE+0x4>)
 396:	4b1c      	ldr	r3, [pc, #112]	; (408 <STACK_SIZE+0x8>)
 398:	4798      	blx	r3
	
	/*search for device. eeprom should be at 0x50*/
	for(uint32_t y = 0;y<= 0x65;y++)
 39a:	2400      	movs	r4, #0
	{
		uint8_t stuff = startTransmissionWire(y,0x0ul);
 39c:	4e1b      	ldr	r6, [pc, #108]	; (40c <STACK_SIZE+0xc>)
		if(stuff !=0)
		{
			found = 1;
 39e:	4d1c      	ldr	r5, [pc, #112]	; (410 <STACK_SIZE+0x10>)
			addr = y;
 3a0:	4f1c      	ldr	r7, [pc, #112]	; (414 <STACK_SIZE+0x14>)
	i2c_setup(SERCOM0); /*this works*/
	
	/*search for device. eeprom should be at 0x50*/
	for(uint32_t y = 0;y<= 0x65;y++)
	{
		uint8_t stuff = startTransmissionWire(y,0x0ul);
 3a2:	b2e0      	uxtb	r0, r4
 3a4:	2100      	movs	r1, #0
 3a6:	47b0      	blx	r6
		if(stuff !=0)
 3a8:	2800      	cmp	r0, #0
 3aa:	d002      	beq.n	3b2 <main+0x46>
		{
			found = 1;
 3ac:	2301      	movs	r3, #1
 3ae:	702b      	strb	r3, [r5, #0]
			addr = y;
 3b0:	603c      	str	r4, [r7, #0]
	
	/*init I2C*/
	i2c_setup(SERCOM0); /*this works*/
	
	/*search for device. eeprom should be at 0x50*/
	for(uint32_t y = 0;y<= 0x65;y++)
 3b2:	3401      	adds	r4, #1
 3b4:	2c66      	cmp	r4, #102	; 0x66
 3b6:	d1f4      	bne.n	3a2 <main+0x36>
			found = 1;
			addr = y;
		} 
	}
	
	startTransmissionWire(0x50,0x1ul);
 3b8:	2050      	movs	r0, #80	; 0x50
 3ba:	2101      	movs	r1, #1
 3bc:	4b13      	ldr	r3, [pc, #76]	; (40c <STACK_SIZE+0xc>)
 3be:	4798      	blx	r3
	
	volatile uint8_t stuff;
	stuff = i2c_read(SERCOM0,data,8,&addr); //this at least gives some data. 0xff
 3c0:	4c14      	ldr	r4, [pc, #80]	; (414 <STACK_SIZE+0x14>)
 3c2:	b2e4      	uxtb	r4, r4
 3c4:	4d12      	ldr	r5, [pc, #72]	; (410 <STACK_SIZE+0x10>)
 3c6:	3504      	adds	r5, #4
 3c8:	480e      	ldr	r0, [pc, #56]	; (404 <STACK_SIZE+0x4>)
 3ca:	1c29      	adds	r1, r5, #0
 3cc:	2208      	movs	r2, #8
 3ce:	1c23      	adds	r3, r4, #0
 3d0:	4f11      	ldr	r7, [pc, #68]	; (418 <STACK_SIZE+0x18>)
 3d2:	47b8      	blx	r7
 3d4:	466b      	mov	r3, sp
 3d6:	1dde      	adds	r6, r3, #7
 3d8:	71d8      	strb	r0, [r3, #7]
	stuff = i2c_read(SERCOM0,data,8,&addr);
 3da:	480a      	ldr	r0, [pc, #40]	; (404 <STACK_SIZE+0x4>)
 3dc:	1c29      	adds	r1, r5, #0
 3de:	2208      	movs	r2, #8
 3e0:	1c23      	adds	r3, r4, #0
 3e2:	47b8      	blx	r7
 3e4:	7030      	strb	r0, [r6, #0]
	//send_string(aHello,i);
    while (1) 
    {
    }
 3e6:	e7fe      	b.n	3e6 <main+0x7a>
 3e8:	000001d9 	.word	0x000001d9
 3ec:	40000800 	.word	0x40000800
 3f0:	fffffcff 	.word	0xfffffcff
 3f4:	41004000 	.word	0x41004000
 3f8:	000e0002 	.word	0x000e0002
 3fc:	000001e9 	.word	0x000001e9
 400:	000f0002 	.word	0x000f0002
 404:	42000800 	.word	0x42000800
 408:	00000235 	.word	0x00000235
 40c:	00000305 	.word	0x00000305
 410:	2000044c 	.word	0x2000044c
 414:	20000454 	.word	0x20000454
 418:	00000299 	.word	0x00000299

0000041c <__libc_init_array>:
 41c:	b570      	push	{r4, r5, r6, lr}
 41e:	4e0d      	ldr	r6, [pc, #52]	; (454 <__libc_init_array+0x38>)
 420:	4d0d      	ldr	r5, [pc, #52]	; (458 <__libc_init_array+0x3c>)
 422:	2400      	movs	r4, #0
 424:	1bad      	subs	r5, r5, r6
 426:	10ad      	asrs	r5, r5, #2
 428:	d005      	beq.n	436 <__libc_init_array+0x1a>
 42a:	00a3      	lsls	r3, r4, #2
 42c:	58f3      	ldr	r3, [r6, r3]
 42e:	3401      	adds	r4, #1
 430:	4798      	blx	r3
 432:	42a5      	cmp	r5, r4
 434:	d1f9      	bne.n	42a <__libc_init_array+0xe>
 436:	f000 f8b1 	bl	59c <_init>
 43a:	4e08      	ldr	r6, [pc, #32]	; (45c <__libc_init_array+0x40>)
 43c:	4d08      	ldr	r5, [pc, #32]	; (460 <__libc_init_array+0x44>)
 43e:	2400      	movs	r4, #0
 440:	1bad      	subs	r5, r5, r6
 442:	10ad      	asrs	r5, r5, #2
 444:	d005      	beq.n	452 <__libc_init_array+0x36>
 446:	00a3      	lsls	r3, r4, #2
 448:	58f3      	ldr	r3, [r6, r3]
 44a:	3401      	adds	r4, #1
 44c:	4798      	blx	r3
 44e:	42a5      	cmp	r5, r4
 450:	d1f9      	bne.n	446 <__libc_init_array+0x2a>
 452:	bd70      	pop	{r4, r5, r6, pc}
 454:	000005a8 	.word	0x000005a8
 458:	000005a8 	.word	0x000005a8
 45c:	000005a8 	.word	0x000005a8
 460:	000005b0 	.word	0x000005b0

00000464 <register_fini>:
 464:	b508      	push	{r3, lr}
 466:	4b03      	ldr	r3, [pc, #12]	; (474 <register_fini+0x10>)
 468:	2b00      	cmp	r3, #0
 46a:	d002      	beq.n	472 <register_fini+0xe>
 46c:	4802      	ldr	r0, [pc, #8]	; (478 <register_fini+0x14>)
 46e:	f000 f805 	bl	47c <atexit>
 472:	bd08      	pop	{r3, pc}
 474:	00000000 	.word	0x00000000
 478:	0000048d 	.word	0x0000048d

0000047c <atexit>:
 47c:	b508      	push	{r3, lr}
 47e:	1c01      	adds	r1, r0, #0
 480:	2200      	movs	r2, #0
 482:	2000      	movs	r0, #0
 484:	2300      	movs	r3, #0
 486:	f000 f81b 	bl	4c0 <__register_exitproc>
 48a:	bd08      	pop	{r3, pc}

0000048c <__libc_fini_array>:
 48c:	b538      	push	{r3, r4, r5, lr}
 48e:	4b09      	ldr	r3, [pc, #36]	; (4b4 <__libc_fini_array+0x28>)
 490:	4c09      	ldr	r4, [pc, #36]	; (4b8 <__libc_fini_array+0x2c>)
 492:	1ae4      	subs	r4, r4, r3
 494:	10a4      	asrs	r4, r4, #2
 496:	d009      	beq.n	4ac <__libc_fini_array+0x20>
 498:	4a08      	ldr	r2, [pc, #32]	; (4bc <__libc_fini_array+0x30>)
 49a:	18a5      	adds	r5, r4, r2
 49c:	00ad      	lsls	r5, r5, #2
 49e:	18ed      	adds	r5, r5, r3
 4a0:	682b      	ldr	r3, [r5, #0]
 4a2:	3c01      	subs	r4, #1
 4a4:	4798      	blx	r3
 4a6:	3d04      	subs	r5, #4
 4a8:	2c00      	cmp	r4, #0
 4aa:	d1f9      	bne.n	4a0 <__libc_fini_array+0x14>
 4ac:	f000 f880 	bl	5b0 <_fini>
 4b0:	bd38      	pop	{r3, r4, r5, pc}
 4b2:	46c0      	nop			; (mov r8, r8)
 4b4:	000005bc 	.word	0x000005bc
 4b8:	000005c0 	.word	0x000005c0
 4bc:	3fffffff 	.word	0x3fffffff

000004c0 <__register_exitproc>:
 4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 4c2:	4644      	mov	r4, r8
 4c4:	465f      	mov	r7, fp
 4c6:	4656      	mov	r6, sl
 4c8:	464d      	mov	r5, r9
 4ca:	469b      	mov	fp, r3
 4cc:	4b2f      	ldr	r3, [pc, #188]	; (58c <__register_exitproc+0xcc>)
 4ce:	b4f0      	push	{r4, r5, r6, r7}
 4d0:	681c      	ldr	r4, [r3, #0]
 4d2:	23a4      	movs	r3, #164	; 0xa4
 4d4:	005b      	lsls	r3, r3, #1
 4d6:	1c05      	adds	r5, r0, #0
 4d8:	58e0      	ldr	r0, [r4, r3]
 4da:	1c0e      	adds	r6, r1, #0
 4dc:	4690      	mov	r8, r2
 4de:	2800      	cmp	r0, #0
 4e0:	d04b      	beq.n	57a <__register_exitproc+0xba>
 4e2:	6843      	ldr	r3, [r0, #4]
 4e4:	2b1f      	cmp	r3, #31
 4e6:	dc0d      	bgt.n	504 <__register_exitproc+0x44>
 4e8:	1c5c      	adds	r4, r3, #1
 4ea:	2d00      	cmp	r5, #0
 4ec:	d121      	bne.n	532 <__register_exitproc+0x72>
 4ee:	3302      	adds	r3, #2
 4f0:	009b      	lsls	r3, r3, #2
 4f2:	6044      	str	r4, [r0, #4]
 4f4:	501e      	str	r6, [r3, r0]
 4f6:	2000      	movs	r0, #0
 4f8:	bc3c      	pop	{r2, r3, r4, r5}
 4fa:	4690      	mov	r8, r2
 4fc:	4699      	mov	r9, r3
 4fe:	46a2      	mov	sl, r4
 500:	46ab      	mov	fp, r5
 502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 504:	4b22      	ldr	r3, [pc, #136]	; (590 <__register_exitproc+0xd0>)
 506:	2b00      	cmp	r3, #0
 508:	d03c      	beq.n	584 <__register_exitproc+0xc4>
 50a:	20c8      	movs	r0, #200	; 0xc8
 50c:	0040      	lsls	r0, r0, #1
 50e:	e000      	b.n	512 <__register_exitproc+0x52>
 510:	bf00      	nop
 512:	2800      	cmp	r0, #0
 514:	d036      	beq.n	584 <__register_exitproc+0xc4>
 516:	22a4      	movs	r2, #164	; 0xa4
 518:	2300      	movs	r3, #0
 51a:	0052      	lsls	r2, r2, #1
 51c:	58a1      	ldr	r1, [r4, r2]
 51e:	6043      	str	r3, [r0, #4]
 520:	6001      	str	r1, [r0, #0]
 522:	50a0      	str	r0, [r4, r2]
 524:	3240      	adds	r2, #64	; 0x40
 526:	5083      	str	r3, [r0, r2]
 528:	3204      	adds	r2, #4
 52a:	5083      	str	r3, [r0, r2]
 52c:	2401      	movs	r4, #1
 52e:	2d00      	cmp	r5, #0
 530:	d0dd      	beq.n	4ee <__register_exitproc+0x2e>
 532:	009a      	lsls	r2, r3, #2
 534:	4691      	mov	r9, r2
 536:	4481      	add	r9, r0
 538:	4642      	mov	r2, r8
 53a:	2188      	movs	r1, #136	; 0x88
 53c:	464f      	mov	r7, r9
 53e:	507a      	str	r2, [r7, r1]
 540:	22c4      	movs	r2, #196	; 0xc4
 542:	0052      	lsls	r2, r2, #1
 544:	4690      	mov	r8, r2
 546:	4480      	add	r8, r0
 548:	4642      	mov	r2, r8
 54a:	3987      	subs	r1, #135	; 0x87
 54c:	4099      	lsls	r1, r3
 54e:	6812      	ldr	r2, [r2, #0]
 550:	468a      	mov	sl, r1
 552:	430a      	orrs	r2, r1
 554:	4694      	mov	ip, r2
 556:	4642      	mov	r2, r8
 558:	4661      	mov	r1, ip
 55a:	6011      	str	r1, [r2, #0]
 55c:	2284      	movs	r2, #132	; 0x84
 55e:	4649      	mov	r1, r9
 560:	465f      	mov	r7, fp
 562:	0052      	lsls	r2, r2, #1
 564:	508f      	str	r7, [r1, r2]
 566:	2d02      	cmp	r5, #2
 568:	d1c1      	bne.n	4ee <__register_exitproc+0x2e>
 56a:	1c02      	adds	r2, r0, #0
 56c:	4655      	mov	r5, sl
 56e:	328d      	adds	r2, #141	; 0x8d
 570:	32ff      	adds	r2, #255	; 0xff
 572:	6811      	ldr	r1, [r2, #0]
 574:	430d      	orrs	r5, r1
 576:	6015      	str	r5, [r2, #0]
 578:	e7b9      	b.n	4ee <__register_exitproc+0x2e>
 57a:	1c20      	adds	r0, r4, #0
 57c:	304d      	adds	r0, #77	; 0x4d
 57e:	30ff      	adds	r0, #255	; 0xff
 580:	50e0      	str	r0, [r4, r3]
 582:	e7ae      	b.n	4e2 <__register_exitproc+0x22>
 584:	2001      	movs	r0, #1
 586:	4240      	negs	r0, r0
 588:	e7b6      	b.n	4f8 <__register_exitproc+0x38>
 58a:	46c0      	nop			; (mov r8, r8)
 58c:	00000598 	.word	0x00000598
 590:	00000000 	.word	0x00000000
 594:	00000043 	.word	0x00000043

00000598 <_global_impure_ptr>:
 598:	20000008                                ... 

0000059c <_init>:
 59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 59e:	46c0      	nop			; (mov r8, r8)
 5a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 5a2:	bc08      	pop	{r3}
 5a4:	469e      	mov	lr, r3
 5a6:	4770      	bx	lr

000005a8 <__init_array_start>:
 5a8:	00000465 	.word	0x00000465

000005ac <__frame_dummy_init_array_entry>:
 5ac:	000000b5                                ....

000005b0 <_fini>:
 5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 5b2:	46c0      	nop			; (mov r8, r8)
 5b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 5b6:	bc08      	pop	{r3}
 5b8:	469e      	mov	lr, r3
 5ba:	4770      	bx	lr

000005bc <__fini_array_start>:
 5bc:	0000008d 	.word	0x0000008d
