
EEpromTest24LC256.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008d0  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000450  20000000  000008d0  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  20000450  00000d20  00010450  2**2
                  ALLOC
  3 .stack        00000404  2000047c  00000d4c  00010450  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010450  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010478  2**0
                  CONTENTS, READONLY
  6 .debug_info   00008945  00000000  00000000  000104d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b9f  00000000  00000000  00018e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000001b8  00000000  00000000  000199b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000180  00000000  00000000  00019b6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0000bb02  00000000  00000000  00019cef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000333a  00000000  00000000  000257f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0004395e  00000000  00000000  00028b2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000414  00000000  00000000  0006c48c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000764  00000000  00000000  0006c8a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
   0:	20000880 	.word	0x20000880
   4:	00000195 	.word	0x00000195
   8:	00000191 	.word	0x00000191
   c:	00000191 	.word	0x00000191
	...
  2c:	00000191 	.word	0x00000191
	...
  38:	00000191 	.word	0x00000191
  3c:	00000191 	.word	0x00000191
  40:	00000191 	.word	0x00000191
  44:	00000191 	.word	0x00000191
  48:	00000191 	.word	0x00000191
  4c:	00000191 	.word	0x00000191
  50:	00000191 	.word	0x00000191
  54:	00000191 	.word	0x00000191
  58:	00000191 	.word	0x00000191
  5c:	00000000 	.word	0x00000000
  60:	00000191 	.word	0x00000191
  64:	00000191 	.word	0x00000191
  68:	00000191 	.word	0x00000191
	...
  74:	00000191 	.word	0x00000191
  78:	00000191 	.word	0x00000191
  7c:	00000191 	.word	0x00000191
	...
  88:	00000191 	.word	0x00000191

0000008c <__do_global_dtors_aux>:
  8c:	b510      	push	{r4, lr}
  8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
  90:	7823      	ldrb	r3, [r4, #0]
  92:	2b00      	cmp	r3, #0
  94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
  96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
  98:	2b00      	cmp	r3, #0
  9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
  9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
  9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
  a0:	bf00      	nop
  a2:	2301      	movs	r3, #1
  a4:	7023      	strb	r3, [r4, #0]
  a6:	bd10      	pop	{r4, pc}
  a8:	20000450 	.word	0x20000450
  ac:	00000000 	.word	0x00000000
  b0:	000008d0 	.word	0x000008d0

000000b4 <frame_dummy>:
  b4:	b508      	push	{r3, lr}
  b6:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
  b8:	2b00      	cmp	r3, #0
  ba:	d003      	beq.n	c4 <frame_dummy+0x10>
  bc:	4807      	ldr	r0, [pc, #28]	; (dc <frame_dummy+0x28>)
  be:	4908      	ldr	r1, [pc, #32]	; (e0 <frame_dummy+0x2c>)
  c0:	e000      	b.n	c4 <frame_dummy+0x10>
  c2:	bf00      	nop
  c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
  c6:	6803      	ldr	r3, [r0, #0]
  c8:	2b00      	cmp	r3, #0
  ca:	d100      	bne.n	ce <frame_dummy+0x1a>
  cc:	bd08      	pop	{r3, pc}
  ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
  d0:	2b00      	cmp	r3, #0
  d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
  d4:	4798      	blx	r3
  d6:	e7f9      	b.n	cc <frame_dummy+0x18>
  d8:	00000000 	.word	0x00000000
  dc:	000008d0 	.word	0x000008d0
  e0:	20000454 	.word	0x20000454
  e4:	000008d0 	.word	0x000008d0
  e8:	00000000 	.word	0x00000000

000000ec <init_clocks>:
void init_clocks(void)
{
	/************************************************************************/
	/* 1) remove prescalers from OSC8M so we run at 8Mhz					*/
	/************************************************************************/
	SYSCTRL->OSC8M.bit.PRESC = 0;
  ec:	4a20      	ldr	r2, [pc, #128]	; (170 <init_clocks+0x84>)
  ee:	6a11      	ldr	r1, [r2, #32]
  f0:	4b20      	ldr	r3, [pc, #128]	; (174 <init_clocks+0x88>)
  f2:	400b      	ands	r3, r1
  f4:	6213      	str	r3, [r2, #32]
	NVMCTRL->CTRLB.bit.CACHEDIS = 1;
  f6:	4a20      	ldr	r2, [pc, #128]	; (178 <init_clocks+0x8c>)
  f8:	6853      	ldr	r3, [r2, #4]
  fa:	2180      	movs	r1, #128	; 0x80
  fc:	02c9      	lsls	r1, r1, #11
  fe:	430b      	orrs	r3, r1
 100:	6053      	str	r3, [r2, #4]
	
	/************************************************************************/
	/*2.1)Select Gen(0) set source as OSC8M no Div and enable clock         */
	/* Main clock															*/
	/************************************************************************/
	GCLK->GENDIV.reg = GCLK_GENDIV_ID(GEN_CLOCK_DIV_ZERO);
 102:	2200      	movs	r2, #0
 104:	4b1d      	ldr	r3, [pc, #116]	; (17c <init_clocks+0x90>)
 106:	609a      	str	r2, [r3, #8]
	/*wait for sync*/
	while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
 108:	1c1a      	adds	r2, r3, #0
 10a:	7853      	ldrb	r3, [r2, #1]
 10c:	b25b      	sxtb	r3, r3
 10e:	2b00      	cmp	r3, #0
 110:	dbfb      	blt.n	10a <init_clocks+0x1e>
	
	/*write the Gen clock 0 configureation*/
	GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(GEN_CLOCK_GENERATOR_ZERO) |
 112:	2283      	movs	r2, #131	; 0x83
 114:	0252      	lsls	r2, r2, #9
 116:	4b19      	ldr	r3, [pc, #100]	; (17c <init_clocks+0x90>)
 118:	605a      	str	r2, [r3, #4]
						GCLK_GENCTRL_SRC_OSC8M | 
						GCLK_GENCTRL_GENEN;
						
	/*wait for sync*/
	while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
 11a:	1c1a      	adds	r2, r3, #0
 11c:	7853      	ldrb	r3, [r2, #1]
 11e:	b25b      	sxtb	r3, r3
 120:	2b00      	cmp	r3, #0
 122:	dbfb      	blt.n	11c <init_clocks+0x30>
	
	/************************************************************************/
	/*2.2) Select Gen(1) set source as OSC8M no Div and enable clock        */
	/************************************************************************/
	GCLK->GENDIV.reg = GCLK_GENDIV_ID(GEN_CLOCK_DIV_ZERO);
 124:	2200      	movs	r2, #0
 126:	4b15      	ldr	r3, [pc, #84]	; (17c <init_clocks+0x90>)
 128:	609a      	str	r2, [r3, #8]
	/*wait for sync*/
	while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
 12a:	1c1a      	adds	r2, r3, #0
 12c:	7853      	ldrb	r3, [r2, #1]
 12e:	b25b      	sxtb	r3, r3
 130:	2b00      	cmp	r3, #0
 132:	dbfb      	blt.n	12c <init_clocks+0x40>
	
	/*write the Gen clock 0 configureation*/
	GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(GEN_CLOCK_GENERATOR_ONE) |
 134:	4a12      	ldr	r2, [pc, #72]	; (180 <init_clocks+0x94>)
 136:	4b11      	ldr	r3, [pc, #68]	; (17c <init_clocks+0x90>)
 138:	605a      	str	r2, [r3, #4]
	GCLK_GENCTRL_SRC_OSC8M |
	GCLK_GENCTRL_GENEN;
	
	/*wait for sync*/
	while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
 13a:	1c1a      	adds	r2, r3, #0
 13c:	7853      	ldrb	r3, [r2, #1]
 13e:	b25b      	sxtb	r3, r3
 140:	2b00      	cmp	r3, #0
 142:	dbfb      	blt.n	13c <init_clocks+0x50>
	
	
	/************************************************************************/
	/*3) I2C clocks SERCOM0 GEN0                                            */
	/************************************************************************/				
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE) |
 144:	4a0d      	ldr	r2, [pc, #52]	; (17c <init_clocks+0x90>)
 146:	8851      	ldrh	r1, [r2, #2]
 148:	4b0e      	ldr	r3, [pc, #56]	; (184 <init_clocks+0x98>)
 14a:	430b      	orrs	r3, r1
 14c:	8053      	strh	r3, [r2, #2]
	GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(0);		
	
	/*wait for sync*/
	while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
 14e:	7853      	ldrb	r3, [r2, #1]
 150:	b25b      	sxtb	r3, r3
 152:	2b00      	cmp	r3, #0
 154:	dbfb      	blt.n	14e <init_clocks+0x62>
	
	/************************************************************************/
	/*4) USART clocks SERCOM1 GEN(1)                                        */
	/************************************************************************/	
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM1_GCLK_ID_CORE) | 
 156:	4a0c      	ldr	r2, [pc, #48]	; (188 <init_clocks+0x9c>)
 158:	4b08      	ldr	r3, [pc, #32]	; (17c <init_clocks+0x90>)
 15a:	805a      	strh	r2, [r3, #2]
						GCLK_CLKCTRL_GEN(1) | 
						GCLK_CLKCTRL_CLKEN;
						
	/*wait for sync*/
	while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
 15c:	1c1a      	adds	r2, r3, #0
 15e:	7853      	ldrb	r3, [r2, #1]
 160:	b25b      	sxtb	r3, r3
 162:	2b00      	cmp	r3, #0
 164:	dbfb      	blt.n	15e <init_clocks+0x72>
	
	/************************************************************************/
	/*5) APBx masks APBCMASK is setup for SERCOM0 and SERCOM1                                                           
	/************************************************************************/
	PM->APBCMASK.reg = PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1;
 166:	220c      	movs	r2, #12
 168:	4b08      	ldr	r3, [pc, #32]	; (18c <init_clocks+0xa0>)
 16a:	621a      	str	r2, [r3, #32]
				
							
 16c:	4770      	bx	lr
 16e:	46c0      	nop			; (mov r8, r8)
 170:	40000800 	.word	0x40000800
 174:	fffffcff 	.word	0xfffffcff
 178:	41004000 	.word	0x41004000
 17c:	40000c00 	.word	0x40000c00
 180:	00010601 	.word	0x00010601
 184:	0000400e 	.word	0x0000400e
 188:	0000410f 	.word	0x0000410f
 18c:	40000400 	.word	0x40000400

00000190 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
 190:	e7fe      	b.n	190 <Dummy_Handler>
 192:	46c0      	nop			; (mov r8, r8)

00000194 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
 194:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
 196:	4b2b      	ldr	r3, [pc, #172]	; (244 <Reset_Handler+0xb0>)
 198:	4a2b      	ldr	r2, [pc, #172]	; (248 <Reset_Handler+0xb4>)
 19a:	429a      	cmp	r2, r3
 19c:	d003      	beq.n	1a6 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
 19e:	4b2b      	ldr	r3, [pc, #172]	; (24c <Reset_Handler+0xb8>)
 1a0:	4a28      	ldr	r2, [pc, #160]	; (244 <Reset_Handler+0xb0>)
 1a2:	429a      	cmp	r2, r3
 1a4:	d304      	bcc.n	1b0 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 1a6:	4b2a      	ldr	r3, [pc, #168]	; (250 <Reset_Handler+0xbc>)
 1a8:	4a2a      	ldr	r2, [pc, #168]	; (254 <Reset_Handler+0xc0>)
 1aa:	429a      	cmp	r2, r3
 1ac:	d310      	bcc.n	1d0 <Reset_Handler+0x3c>
 1ae:	e01e      	b.n	1ee <Reset_Handler+0x5a>
 1b0:	4a29      	ldr	r2, [pc, #164]	; (258 <Reset_Handler+0xc4>)
 1b2:	4b26      	ldr	r3, [pc, #152]	; (24c <Reset_Handler+0xb8>)
 1b4:	3303      	adds	r3, #3
 1b6:	1a9b      	subs	r3, r3, r2
 1b8:	089b      	lsrs	r3, r3, #2
 1ba:	3301      	adds	r3, #1
 1bc:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 1be:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 1c0:	4820      	ldr	r0, [pc, #128]	; (244 <Reset_Handler+0xb0>)
 1c2:	4921      	ldr	r1, [pc, #132]	; (248 <Reset_Handler+0xb4>)
 1c4:	588c      	ldr	r4, [r1, r2]
 1c6:	5084      	str	r4, [r0, r2]
 1c8:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 1ca:	429a      	cmp	r2, r3
 1cc:	d1fa      	bne.n	1c4 <Reset_Handler+0x30>
 1ce:	e7ea      	b.n	1a6 <Reset_Handler+0x12>
 1d0:	4a22      	ldr	r2, [pc, #136]	; (25c <Reset_Handler+0xc8>)
 1d2:	4b1f      	ldr	r3, [pc, #124]	; (250 <Reset_Handler+0xbc>)
 1d4:	3303      	adds	r3, #3
 1d6:	1a9b      	subs	r3, r3, r2
 1d8:	089b      	lsrs	r3, r3, #2
 1da:	3301      	adds	r3, #1
 1dc:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 1de:	2200      	movs	r2, #0
                *pDest++ = 0;
 1e0:	481c      	ldr	r0, [pc, #112]	; (254 <Reset_Handler+0xc0>)
 1e2:	2100      	movs	r1, #0
 1e4:	1814      	adds	r4, r2, r0
 1e6:	6021      	str	r1, [r4, #0]
 1e8:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 1ea:	429a      	cmp	r2, r3
 1ec:	d1fa      	bne.n	1e4 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 1ee:	4a1c      	ldr	r2, [pc, #112]	; (260 <Reset_Handler+0xcc>)
 1f0:	21ff      	movs	r1, #255	; 0xff
 1f2:	4b1c      	ldr	r3, [pc, #112]	; (264 <Reset_Handler+0xd0>)
 1f4:	438b      	bics	r3, r1
 1f6:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 1f8:	39fd      	subs	r1, #253	; 0xfd
 1fa:	2390      	movs	r3, #144	; 0x90
 1fc:	005b      	lsls	r3, r3, #1
 1fe:	4a1a      	ldr	r2, [pc, #104]	; (268 <Reset_Handler+0xd4>)
 200:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
 202:	4b1a      	ldr	r3, [pc, #104]	; (26c <Reset_Handler+0xd8>)
 204:	7b9a      	ldrb	r2, [r3, #14]
 206:	312e      	adds	r1, #46	; 0x2e
 208:	438a      	bics	r2, r1
 20a:	1c11      	adds	r1, r2, #0
 20c:	2220      	movs	r2, #32
 20e:	430a      	orrs	r2, r1
 210:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 212:	7b9a      	ldrb	r2, [r3, #14]
 214:	210c      	movs	r1, #12
 216:	438a      	bics	r2, r1
 218:	1c11      	adds	r1, r2, #0
 21a:	2208      	movs	r2, #8
 21c:	430a      	orrs	r2, r1
 21e:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 220:	7b9a      	ldrb	r2, [r3, #14]
 222:	2103      	movs	r1, #3
 224:	438a      	bics	r2, r1
 226:	1c11      	adds	r1, r2, #0
 228:	2202      	movs	r2, #2
 22a:	430a      	orrs	r2, r1
 22c:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
 22e:	4a10      	ldr	r2, [pc, #64]	; (270 <Reset_Handler+0xdc>)
 230:	6851      	ldr	r1, [r2, #4]
 232:	2380      	movs	r3, #128	; 0x80
 234:	430b      	orrs	r3, r1
 236:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
 238:	4b0e      	ldr	r3, [pc, #56]	; (274 <Reset_Handler+0xe0>)
 23a:	4798      	blx	r3

        /* Branch to main function */
        main();
 23c:	4b0e      	ldr	r3, [pc, #56]	; (278 <Reset_Handler+0xe4>)
 23e:	4798      	blx	r3

        /* Infinite loop */
        while (1);
 240:	e7fe      	b.n	240 <Reset_Handler+0xac>
 242:	46c0      	nop			; (mov r8, r8)
 244:	20000000 	.word	0x20000000
 248:	000008d0 	.word	0x000008d0
 24c:	20000450 	.word	0x20000450
 250:	2000047c 	.word	0x2000047c
 254:	20000450 	.word	0x20000450
 258:	20000004 	.word	0x20000004
 25c:	20000454 	.word	0x20000454
 260:	e000ed00 	.word	0xe000ed00
 264:	00000000 	.word	0x00000000
 268:	41007000 	.word	0x41007000
 26c:	41004800 	.word	0x41004800
 270:	41004000 	.word	0x41004000
 274:	000006fd 	.word	0x000006fd
 278:	000005d1 	.word	0x000005d1

0000027c <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
 27c:	4a01      	ldr	r2, [pc, #4]	; (284 <SystemInit+0x8>)
 27e:	4b02      	ldr	r3, [pc, #8]	; (288 <SystemInit+0xc>)
 280:	601a      	str	r2, [r3, #0]
	return;
}
 282:	4770      	bx	lr
 284:	000f4240 	.word	0x000f4240
 288:	20000000 	.word	0x20000000

0000028c <split_address>:
	/*clear the address range*/
	address_high = 0x00;
	address_low = 0x00;
	
	//Split
	ua = (uint16_t) (address >> 16);
 28c:	0c03      	lsrs	r3, r0, #16
 28e:	4a04      	ldr	r2, [pc, #16]	; (2a0 <split_address+0x14>)
 290:	8013      	strh	r3, [r2, #0]
	ub = (uint16_t) (address & 0x0000FFFFuL);
 292:	4a04      	ldr	r2, [pc, #16]	; (2a4 <split_address+0x18>)
 294:	8010      	strh	r0, [r2, #0]
	address_high = (int16_t)ua;
 296:	4a04      	ldr	r2, [pc, #16]	; (2a8 <split_address+0x1c>)
 298:	8013      	strh	r3, [r2, #0]
	address_low = (int16_t)ub;
 29a:	4b04      	ldr	r3, [pc, #16]	; (2ac <split_address+0x20>)
 29c:	8018      	strh	r0, [r3, #0]
 29e:	4770      	bx	lr
 2a0:	20000474 	.word	0x20000474
 2a4:	20000470 	.word	0x20000470
 2a8:	20000472 	.word	0x20000472
 2ac:	2000046c 	.word	0x2000046c

000002b0 <eeprom_write_word>:
	i2c_init(address);
}

/*write data*/
void eeprom_write_word(uint16_t data,uint32_t address)
{
 2b0:	b538      	push	{r3, r4, r5, lr}
 2b2:	1c05      	adds	r5, r0, #0
	split_address(address);
 2b4:	1c08      	adds	r0, r1, #0
 2b6:	4b0a      	ldr	r3, [pc, #40]	; (2e0 <eeprom_write_word+0x30>)
 2b8:	4798      	blx	r3
	
	/*this is how you write 16 bytes [a word] to the eeprom.*/
	/*this has to be repeated for each 16bit word, or you need*/
	/*to do a page write.. working on it.*/
	i2c_write_start();
 2ba:	4b0a      	ldr	r3, [pc, #40]	; (2e4 <eeprom_write_word+0x34>)
 2bc:	4798      	blx	r3
	i2c_write_byte(address_high); //data address high byte.
 2be:	4b0a      	ldr	r3, [pc, #40]	; (2e8 <eeprom_write_word+0x38>)
 2c0:	7818      	ldrb	r0, [r3, #0]
 2c2:	4c0a      	ldr	r4, [pc, #40]	; (2ec <eeprom_write_word+0x3c>)
 2c4:	47a0      	blx	r4
	i2c_write_byte(address_low); //data address low byte.
 2c6:	4b0a      	ldr	r3, [pc, #40]	; (2f0 <eeprom_write_word+0x40>)
 2c8:	7818      	ldrb	r0, [r3, #0]
 2ca:	47a0      	blx	r4
	i2c_write_byte(data); //test data.
 2cc:	b2e8      	uxtb	r0, r5
 2ce:	47a0      	blx	r4
	i2c_write_stop();
 2d0:	4b08      	ldr	r3, [pc, #32]	; (2f4 <eeprom_write_word+0x44>)
 2d2:	4798      	blx	r3
	
	/*bash the eeprom until it no longer sends a nack*/
	while(!0==(i2c_busy()));
 2d4:	4c08      	ldr	r4, [pc, #32]	; (2f8 <eeprom_write_word+0x48>)
 2d6:	47a0      	blx	r4
 2d8:	2800      	cmp	r0, #0
 2da:	d1fc      	bne.n	2d6 <eeprom_write_word+0x26>
}
 2dc:	bd38      	pop	{r3, r4, r5, pc}
 2de:	46c0      	nop			; (mov r8, r8)
 2e0:	0000028d 	.word	0x0000028d
 2e4:	00000461 	.word	0x00000461
 2e8:	20000472 	.word	0x20000472
 2ec:	00000499 	.word	0x00000499
 2f0:	2000046c 	.word	0x2000046c
 2f4:	000004c9 	.word	0x000004c9
 2f8:	000005a1 	.word	0x000005a1

000002fc <eeprom_page_write>:
{
	
}

void eeprom_page_write(uint8_t *data,uint32_t address)
{
 2fc:	b570      	push	{r4, r5, r6, lr}
 2fe:	1c05      	adds	r5, r0, #0
	split_address(address);
 300:	1c08      	adds	r0, r1, #0
 302:	4b0d      	ldr	r3, [pc, #52]	; (338 <eeprom_page_write+0x3c>)
 304:	4798      	blx	r3
	
	i2c_write_start();
 306:	4b0d      	ldr	r3, [pc, #52]	; (33c <eeprom_page_write+0x40>)
 308:	4798      	blx	r3
	i2c_write_byte(address_high);
 30a:	4b0d      	ldr	r3, [pc, #52]	; (340 <eeprom_page_write+0x44>)
 30c:	7818      	ldrb	r0, [r3, #0]
 30e:	4c0d      	ldr	r4, [pc, #52]	; (344 <eeprom_page_write+0x48>)
 310:	47a0      	blx	r4
	i2c_write_byte(address_low);
 312:	4b0d      	ldr	r3, [pc, #52]	; (348 <eeprom_page_write+0x4c>)
 314:	7818      	ldrb	r0, [r3, #0]
 316:	47a0      	blx	r4
 318:	1c2c      	adds	r4, r5, #0
 31a:	3505      	adds	r5, #5
	for(int x = 0;x<=sizeof(data);x++)
	{
		i2c_write_byte(data[x]);
 31c:	4e09      	ldr	r6, [pc, #36]	; (344 <eeprom_page_write+0x48>)
 31e:	7820      	ldrb	r0, [r4, #0]
 320:	47b0      	blx	r6
 322:	3401      	adds	r4, #1
	split_address(address);
	
	i2c_write_start();
	i2c_write_byte(address_high);
	i2c_write_byte(address_low);
	for(int x = 0;x<=sizeof(data);x++)
 324:	42ac      	cmp	r4, r5
 326:	d1fa      	bne.n	31e <eeprom_page_write+0x22>
	{
		i2c_write_byte(data[x]);
	}
	i2c_write_stop();
 328:	4b08      	ldr	r3, [pc, #32]	; (34c <eeprom_page_write+0x50>)
 32a:	4798      	blx	r3
	while(!0==(i2c_busy()));
 32c:	4c08      	ldr	r4, [pc, #32]	; (350 <eeprom_page_write+0x54>)
 32e:	47a0      	blx	r4
 330:	2800      	cmp	r0, #0
 332:	d1fc      	bne.n	32e <eeprom_page_write+0x32>
	
}
 334:	bd70      	pop	{r4, r5, r6, pc}
 336:	46c0      	nop			; (mov r8, r8)
 338:	0000028d 	.word	0x0000028d
 33c:	00000461 	.word	0x00000461
 340:	20000472 	.word	0x20000472
 344:	00000499 	.word	0x00000499
 348:	2000046c 	.word	0x2000046c
 34c:	000004c9 	.word	0x000004c9
 350:	000005a1 	.word	0x000005a1

00000354 <eeprom_read_word>:

/*read data*/
void eeprom_read_word(uint16_t *data,uint32_t address)
{
 354:	b538      	push	{r3, r4, r5, lr}
 356:	1c05      	adds	r5, r0, #0
	split_address(address);
 358:	1c08      	adds	r0, r1, #0
 35a:	4b0a      	ldr	r3, [pc, #40]	; (384 <eeprom_read_word+0x30>)
 35c:	4798      	blx	r3
		
		/*read the contents of address 0x0000 [1x16byte word]*/
		//send a stop bit to clear the line..
		i2c_write_stop();
 35e:	4b0a      	ldr	r3, [pc, #40]	; (388 <eeprom_read_word+0x34>)
 360:	4798      	blx	r3
		i2c_write_start(); //send start bit + address + w bit
 362:	4b0a      	ldr	r3, [pc, #40]	; (38c <eeprom_read_word+0x38>)
 364:	4798      	blx	r3
		i2c_write_byte(address_high); //data address high byte
 366:	4b0a      	ldr	r3, [pc, #40]	; (390 <eeprom_read_word+0x3c>)
 368:	7818      	ldrb	r0, [r3, #0]
 36a:	4c0a      	ldr	r4, [pc, #40]	; (394 <eeprom_read_word+0x40>)
 36c:	47a0      	blx	r4
		i2c_write_byte(address_low); //data address low byte
 36e:	4b0a      	ldr	r3, [pc, #40]	; (398 <eeprom_read_word+0x44>)
 370:	7818      	ldrb	r0, [r3, #0]
 372:	47a0      	blx	r4
		//need to make a dedicated i2c_read_start() function.
		i2c_read_start();
 374:	4b09      	ldr	r3, [pc, #36]	; (39c <eeprom_read_word+0x48>)
 376:	4798      	blx	r3
		i2c_read(data,1);
 378:	1c28      	adds	r0, r5, #0
 37a:	2101      	movs	r1, #1
 37c:	4b08      	ldr	r3, [pc, #32]	; (3a0 <eeprom_read_word+0x4c>)
 37e:	4798      	blx	r3
}
 380:	bd38      	pop	{r3, r4, r5, pc}
 382:	46c0      	nop			; (mov r8, r8)
 384:	0000028d 	.word	0x0000028d
 388:	000004c9 	.word	0x000004c9
 38c:	00000461 	.word	0x00000461
 390:	20000472 	.word	0x20000472
 394:	00000499 	.word	0x00000499
 398:	2000046c 	.word	0x2000046c
 39c:	000004dd 	.word	0x000004dd
 3a0:	00000535 	.word	0x00000535

000003a4 <pin_set_peripheral_function>:
 */

#include "includes.h"

void pin_set_peripheral_function(uint32_t pinmux)
{
 3a4:	b570      	push	{r4, r5, r6, lr}
            31:21 : port information 0->PORTA, 1->PORTB
            20:16 : pin 0-31
        15:00 pin multiplex information
        there are defines for pinmux like: PINMUX_PA09D_SERCOM2_PAD1 
    */
    uint16_t pad = pinmux >> 16;    // get pad (port+pin)
 3a6:	0c04      	lsrs	r4, r0, #16
    uint8_t port = pad >> 5;        // get port
    uint8_t pin  = pad & 0x1F;      // get number of pin - no port information anymore
 3a8:	b2e2      	uxtb	r2, r4
 3aa:	231f      	movs	r3, #31
 3ac:	4013      	ands	r3, r2
            20:16 : pin 0-31
        15:00 pin multiplex information
        there are defines for pinmux like: PINMUX_PA09D_SERCOM2_PAD1 
    */
    uint16_t pad = pinmux >> 16;    // get pad (port+pin)
    uint8_t port = pad >> 5;        // get port
 3ae:	0964      	lsrs	r4, r4, #5
    uint8_t pin  = pad & 0x1F;      // get number of pin - no port information anymore
    
    PORT->Group[port].PINCFG[pin].bit.PMUXEN =1;
 3b0:	b2e1      	uxtb	r1, r4
 3b2:	01c9      	lsls	r1, r1, #7
 3b4:	4c0d      	ldr	r4, [pc, #52]	; (3ec <pin_set_peripheral_function+0x48>)
 3b6:	46a4      	mov	ip, r4
 3b8:	4461      	add	r1, ip
 3ba:	18cc      	adds	r4, r1, r3
 3bc:	3440      	adds	r4, #64	; 0x40
 3be:	7826      	ldrb	r6, [r4, #0]
 3c0:	2501      	movs	r5, #1
 3c2:	4335      	orrs	r5, r6
 3c4:	7025      	strb	r5, [r4, #0]
    
    /* each pinmux register is for two pins! with pin/2 you can get the index of the needed pinmux register
       the p mux resiter is 8Bit   (7:4 odd pin; 3:0 evan bit)  */
    // reset pinmux values.                             VV shift if pin is odd (if evan:  (4*(pin & 1))==0  )
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
 3c6:	085b      	lsrs	r3, r3, #1
 3c8:	18cb      	adds	r3, r1, r3
 3ca:	3330      	adds	r3, #48	; 0x30
 3cc:	781c      	ldrb	r4, [r3, #0]
 3ce:	2101      	movs	r1, #1
 3d0:	400a      	ands	r2, r1
 3d2:	0091      	lsls	r1, r2, #2
 3d4:	220f      	movs	r2, #15
 3d6:	408a      	lsls	r2, r1
 3d8:	4394      	bics	r4, r2
 3da:	701c      	strb	r4, [r3, #0]
                    //          
    // set new values
    PORT->Group[port].PMUX[pin/2].reg |=  ( (uint8_t)( (pinmux&0xFFFF) <<(4*(pin&1)) ) ); 
 3dc:	781a      	ldrb	r2, [r3, #0]
 3de:	0400      	lsls	r0, r0, #16
 3e0:	0c00      	lsrs	r0, r0, #16
 3e2:	4088      	lsls	r0, r1
 3e4:	4302      	orrs	r2, r0
 3e6:	b2d2      	uxtb	r2, r2
 3e8:	701a      	strb	r2, [r3, #0]
 3ea:	bd70      	pop	{r4, r5, r6, pc}
 3ec:	41004400 	.word	0x41004400

000003f0 <i2c_init>:
};

uint32_t i2c_address;

void i2c_init(uint32_t address)
{
 3f0:	b510      	push	{r4, lr}
	i2c_address = address;
 3f2:	4b15      	ldr	r3, [pc, #84]	; (448 <STACK_SIZE+0x48>)
 3f4:	6018      	str	r0, [r3, #0]
	
	///*setup pinmux for i2c*/
	pin_set_peripheral_function(SDA);
 3f6:	4815      	ldr	r0, [pc, #84]	; (44c <STACK_SIZE+0x4c>)
 3f8:	4c15      	ldr	r4, [pc, #84]	; (450 <STACK_SIZE+0x50>)
 3fa:	47a0      	blx	r4
	pin_set_peripheral_function(SCL);
 3fc:	4815      	ldr	r0, [pc, #84]	; (454 <STACK_SIZE+0x54>)
 3fe:	47a0      	blx	r4
	
	I2C_SERCOM->I2CM.CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
 400:	2280      	movs	r2, #128	; 0x80
 402:	0052      	lsls	r2, r2, #1
 404:	4b14      	ldr	r3, [pc, #80]	; (458 <STACK_SIZE+0x58>)
 406:	605a      	str	r2, [r3, #4]
	while(I2C_SERCOM->I2CM.SYNCBUSY.reg);
 408:	1c1a      	adds	r2, r3, #0
 40a:	69d3      	ldr	r3, [r2, #28]
 40c:	2b00      	cmp	r3, #0
 40e:	d1fc      	bne.n	40a <STACK_SIZE+0xa>
	
	SERCOM0->I2CM.BAUD.bit.BAUD = (8000000/ ( 2 * 100000) - 1) ;
 410:	4911      	ldr	r1, [pc, #68]	; (458 <STACK_SIZE+0x58>)
 412:	68cb      	ldr	r3, [r1, #12]
 414:	22ff      	movs	r2, #255	; 0xff
 416:	4393      	bics	r3, r2
 418:	3ad8      	subs	r2, #216	; 0xd8
 41a:	4313      	orrs	r3, r2
 41c:	60cb      	str	r3, [r1, #12]
	//I2C_SERCOM->I2CM.BAUD.reg = SERCOM_I2CM_BAUD_BAUD(160);
	while(I2C_SERCOM->I2CM.SYNCBUSY.reg);
 41e:	1c0a      	adds	r2, r1, #0
 420:	69d3      	ldr	r3, [r2, #28]
 422:	2b00      	cmp	r3, #0
 424:	d1fc      	bne.n	420 <STACK_SIZE+0x20>
	
	I2C_SERCOM->I2CM.CTRLA.reg = SERCOM_I2CM_CTRLA_ENABLE |
 426:	4a0d      	ldr	r2, [pc, #52]	; (45c <STACK_SIZE+0x5c>)
 428:	4b0b      	ldr	r3, [pc, #44]	; (458 <STACK_SIZE+0x58>)
 42a:	601a      	str	r2, [r3, #0]
		SERCOM_I2CM_CTRLA_MODE_I2C_MASTER |
		SERCOM_I2CM_CTRLA_SDAHOLD(3);
	while(I2C_SERCOM->I2CM.SYNCBUSY.reg);
 42c:	1c1a      	adds	r2, r3, #0
 42e:	69d3      	ldr	r3, [r2, #28]
 430:	2b00      	cmp	r3, #0
 432:	d1fc      	bne.n	42e <STACK_SIZE+0x2e>
	
	I2C_SERCOM->I2CM.STATUS.reg |= SERCOM_I2CM_STATUS_BUSSTATE(1);
 434:	4a08      	ldr	r2, [pc, #32]	; (458 <STACK_SIZE+0x58>)
 436:	8b51      	ldrh	r1, [r2, #26]
 438:	3310      	adds	r3, #16
 43a:	430b      	orrs	r3, r1
 43c:	8353      	strh	r3, [r2, #26]
	while (I2C_SERCOM->I2CM.SYNCBUSY.reg);
 43e:	69d3      	ldr	r3, [r2, #28]
 440:	2b00      	cmp	r3, #0
 442:	d1fc      	bne.n	43e <STACK_SIZE+0x3e>
}
 444:	bd10      	pop	{r4, pc}
 446:	46c0      	nop			; (mov r8, r8)
 448:	20000478 	.word	0x20000478
 44c:	000e0002 	.word	0x000e0002
 450:	000003a5 	.word	0x000003a5
 454:	000f0002 	.word	0x000f0002
 458:	42000800 	.word	0x42000800
 45c:	00300016 	.word	0x00300016

00000460 <i2c_write_start>:
	return true;
}

bool i2c_write_start(void)
{
	I2C_SERCOM->I2CM.ADDR.reg = (i2c_address << 0x1ul) | I2C_TRANSFER_WRITE;
 460:	4b0b      	ldr	r3, [pc, #44]	; (490 <i2c_write_start+0x30>)
 462:	681b      	ldr	r3, [r3, #0]
 464:	005b      	lsls	r3, r3, #1
 466:	4a0b      	ldr	r2, [pc, #44]	; (494 <i2c_write_start+0x34>)
 468:	6253      	str	r3, [r2, #36]	; 0x24
	
	while(0==(I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
 46a:	1c11      	adds	r1, r2, #0
 46c:	2201      	movs	r2, #1
 46e:	7e0b      	ldrb	r3, [r1, #24]
 470:	4213      	tst	r3, r2
 472:	d0fc      	beq.n	46e <i2c_write_start+0xe>
	
	if(I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
 474:	4b07      	ldr	r3, [pc, #28]	; (494 <i2c_write_start+0x34>)
 476:	8b5b      	ldrh	r3, [r3, #26]
	{
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		return false;
	}
	
	return true;
 478:	2001      	movs	r0, #1
{
	I2C_SERCOM->I2CM.ADDR.reg = (i2c_address << 0x1ul) | I2C_TRANSFER_WRITE;
	
	while(0==(I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
	
	if(I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
 47a:	075b      	lsls	r3, r3, #29
 47c:	d506      	bpl.n	48c <i2c_write_start+0x2c>
	{
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
 47e:	4a05      	ldr	r2, [pc, #20]	; (494 <i2c_write_start+0x34>)
 480:	6853      	ldr	r3, [r2, #4]
 482:	21c0      	movs	r1, #192	; 0xc0
 484:	0289      	lsls	r1, r1, #10
 486:	430b      	orrs	r3, r1
 488:	6053      	str	r3, [r2, #4]
		return false;
 48a:	2000      	movs	r0, #0
	}
	
	return true;
}
 48c:	4770      	bx	lr
 48e:	46c0      	nop			; (mov r8, r8)
 490:	20000478 	.word	0x20000478
 494:	42000800 	.word	0x42000800

00000498 <i2c_write_byte>:


bool i2c_write_byte(uint8_t byte)
{
	I2C_SERCOM->I2CM.DATA.reg = byte;
 498:	2328      	movs	r3, #40	; 0x28
 49a:	4a0a      	ldr	r2, [pc, #40]	; (4c4 <i2c_write_byte+0x2c>)
 49c:	54d0      	strb	r0, [r2, r3]
	
	while(0==(I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
 49e:	1c11      	adds	r1, r2, #0
 4a0:	2201      	movs	r2, #1
 4a2:	7e0b      	ldrb	r3, [r1, #24]
 4a4:	4213      	tst	r3, r2
 4a6:	d0fc      	beq.n	4a2 <i2c_write_byte+0xa>
	
	if(I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
 4a8:	4b06      	ldr	r3, [pc, #24]	; (4c4 <i2c_write_byte+0x2c>)
 4aa:	8b5b      	ldrh	r3, [r3, #26]
	{
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		return false;
	}
	
	return true;
 4ac:	2001      	movs	r0, #1
{
	I2C_SERCOM->I2CM.DATA.reg = byte;
	
	while(0==(I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
	
	if(I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
 4ae:	075b      	lsls	r3, r3, #29
 4b0:	d506      	bpl.n	4c0 <i2c_write_byte+0x28>
	{
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
 4b2:	4a04      	ldr	r2, [pc, #16]	; (4c4 <i2c_write_byte+0x2c>)
 4b4:	6853      	ldr	r3, [r2, #4]
 4b6:	21c0      	movs	r1, #192	; 0xc0
 4b8:	0289      	lsls	r1, r1, #10
 4ba:	430b      	orrs	r3, r1
 4bc:	6053      	str	r3, [r2, #4]
		return false;
 4be:	2000      	movs	r0, #0
	}
	
	return true;
}
 4c0:	4770      	bx	lr
 4c2:	46c0      	nop			; (mov r8, r8)
 4c4:	42000800 	.word	0x42000800

000004c8 <i2c_write_stop>:

void i2c_write_stop(void)
{
	I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
 4c8:	4a03      	ldr	r2, [pc, #12]	; (4d8 <i2c_write_stop+0x10>)
 4ca:	6853      	ldr	r3, [r2, #4]
 4cc:	21c0      	movs	r1, #192	; 0xc0
 4ce:	0289      	lsls	r1, r1, #10
 4d0:	430b      	orrs	r3, r1
 4d2:	6053      	str	r3, [r2, #4]
}
 4d4:	4770      	bx	lr
 4d6:	46c0      	nop			; (mov r8, r8)
 4d8:	42000800 	.word	0x42000800

000004dc <i2c_read_start>:

bool i2c_read_start(void)
{
	I2C_SERCOM->I2CM.ADDR.reg = (i2c_address << 0x1ul) | I2C_TRANSFER_READ;
 4dc:	4b06      	ldr	r3, [pc, #24]	; (4f8 <i2c_read_start+0x1c>)
 4de:	681b      	ldr	r3, [r3, #0]
 4e0:	005b      	lsls	r3, r3, #1
 4e2:	2201      	movs	r2, #1
 4e4:	4313      	orrs	r3, r2
 4e6:	4a05      	ldr	r2, [pc, #20]	; (4fc <i2c_read_start+0x20>)
 4e8:	6253      	str	r3, [r2, #36]	; 0x24
	
	while(0==(I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB));
 4ea:	1c11      	adds	r1, r2, #0
 4ec:	2202      	movs	r2, #2
 4ee:	7e0b      	ldrb	r3, [r1, #24]
 4f0:	4213      	tst	r3, r2
 4f2:	d0fc      	beq.n	4ee <i2c_read_start+0x12>
}
 4f4:	4770      	bx	lr
 4f6:	46c0      	nop			; (mov r8, r8)
 4f8:	20000478 	.word	0x20000478
 4fc:	42000800 	.word	0x42000800

00000500 <i2c_read_byte>:

uint8_t i2c_read_byte()
{
	if(I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
 500:	4b0a      	ldr	r3, [pc, #40]	; (52c <i2c_read_byte+0x2c>)
 502:	8b5b      	ldrh	r3, [r3, #26]
 504:	075b      	lsls	r3, r3, #29
 506:	d507      	bpl.n	518 <i2c_read_byte+0x18>
	{
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
 508:	4a08      	ldr	r2, [pc, #32]	; (52c <i2c_read_byte+0x2c>)
 50a:	6853      	ldr	r3, [r2, #4]
 50c:	21c0      	movs	r1, #192	; 0xc0
 50e:	0289      	lsls	r1, r1, #10
 510:	430b      	orrs	r3, r1
 512:	6053      	str	r3, [r2, #4]
		return false;
 514:	2000      	movs	r0, #0
 516:	e007      	b.n	528 <i2c_read_byte+0x28>
	}
	I2C_SERCOM->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
 518:	4b04      	ldr	r3, [pc, #16]	; (52c <i2c_read_byte+0x2c>)
 51a:	6859      	ldr	r1, [r3, #4]
 51c:	4a04      	ldr	r2, [pc, #16]	; (530 <i2c_read_byte+0x30>)
 51e:	400a      	ands	r2, r1
 520:	605a      	str	r2, [r3, #4]
	
	return I2C_SERCOM->I2CM.DATA.reg;
 522:	2228      	movs	r2, #40	; 0x28
 524:	5c98      	ldrb	r0, [r3, r2]
 526:	b2c0      	uxtb	r0, r0
	
}
 528:	4770      	bx	lr
 52a:	46c0      	nop			; (mov r8, r8)
 52c:	42000800 	.word	0x42000800
 530:	fffbffff 	.word	0xfffbffff

00000534 <i2c_read>:
{
	I2C_SERCOM->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
}

bool i2c_read(uint8_t *data, int size)
{
 534:	b570      	push	{r4, r5, r6, lr}
	if(I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
 536:	4b18      	ldr	r3, [pc, #96]	; (598 <i2c_read+0x64>)
 538:	8b5b      	ldrh	r3, [r3, #26]
 53a:	075b      	lsls	r3, r3, #29
 53c:	d404      	bmi.n	548 <i2c_read+0x14>
 53e:	1c04      	adds	r4, r0, #0
 540:	1840      	adds	r0, r0, r1
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		return false;
	}
	
	
	for(int i = 0;i < size; i++)
 542:	2900      	cmp	r1, #0
 544:	dc08      	bgt.n	558 <i2c_read+0x24>
 546:	e017      	b.n	578 <i2c_read+0x44>

bool i2c_read(uint8_t *data, int size)
{
	if(I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
	{
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
 548:	4a13      	ldr	r2, [pc, #76]	; (598 <i2c_read+0x64>)
 54a:	6853      	ldr	r3, [r2, #4]
 54c:	21c0      	movs	r1, #192	; 0xc0
 54e:	0289      	lsls	r1, r1, #10
 550:	430b      	orrs	r3, r1
 552:	6053      	str	r3, [r2, #4]
		return false;
 554:	2000      	movs	r0, #0
 556:	e01e      	b.n	596 <i2c_read+0x62>
	}
	
	
	for(int i = 0;i < size; i++)
	{
		data[i] = I2C_SERCOM->I2CM.DATA.reg;
 558:	4a0f      	ldr	r2, [pc, #60]	; (598 <i2c_read+0x64>)
 55a:	2628      	movs	r6, #40	; 0x28
		I2C_SERCOM->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
 55c:	4d0f      	ldr	r5, [pc, #60]	; (59c <i2c_read+0x68>)
		while(0==(I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB));
 55e:	2102      	movs	r1, #2
	}
	
	
	for(int i = 0;i < size; i++)
	{
		data[i] = I2C_SERCOM->I2CM.DATA.reg;
 560:	5d93      	ldrb	r3, [r2, r6]
 562:	7023      	strb	r3, [r4, #0]
		I2C_SERCOM->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
 564:	6853      	ldr	r3, [r2, #4]
 566:	402b      	ands	r3, r5
 568:	6053      	str	r3, [r2, #4]
		while(0==(I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB));
 56a:	7e13      	ldrb	r3, [r2, #24]
 56c:	420b      	tst	r3, r1
 56e:	d0fc      	beq.n	56a <i2c_read+0x36>
 570:	3401      	adds	r4, #1
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		return false;
	}
	
	
	for(int i = 0;i < size; i++)
 572:	4284      	cmp	r4, r0
 574:	d1f4      	bne.n	560 <i2c_read+0x2c>
 576:	e002      	b.n	57e <i2c_read+0x4a>
	if(size)
	{
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
	}
	return true;
 578:	2001      	movs	r0, #1
		I2C_SERCOM->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
		while(0==(I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB));
		
	}
	
	if(size)
 57a:	2900      	cmp	r1, #0
 57c:	d00b      	beq.n	596 <i2c_read+0x62>
	{
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
 57e:	4b06      	ldr	r3, [pc, #24]	; (598 <i2c_read+0x64>)
 580:	685a      	ldr	r2, [r3, #4]
 582:	2180      	movs	r1, #128	; 0x80
 584:	02c9      	lsls	r1, r1, #11
 586:	430a      	orrs	r2, r1
 588:	605a      	str	r2, [r3, #4]
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
 58a:	685a      	ldr	r2, [r3, #4]
 58c:	21c0      	movs	r1, #192	; 0xc0
 58e:	0289      	lsls	r1, r1, #10
 590:	430a      	orrs	r2, r1
 592:	605a      	str	r2, [r3, #4]
	}
	return true;
 594:	2001      	movs	r0, #1
}
 596:	bd70      	pop	{r4, r5, r6, pc}
 598:	42000800 	.word	0x42000800
 59c:	fffbffff 	.word	0xfffbffff

000005a0 <i2c_busy>:

bool i2c_busy(void)
{
	bool busy;
	
	I2C_SERCOM->I2CM.ADDR.reg = (i2c_address << 0x1ul) | I2C_TRANSFER_WRITE;
 5a0:	4b09      	ldr	r3, [pc, #36]	; (5c8 <i2c_busy+0x28>)
 5a2:	681b      	ldr	r3, [r3, #0]
 5a4:	005b      	lsls	r3, r3, #1
 5a6:	4a09      	ldr	r2, [pc, #36]	; (5cc <i2c_busy+0x2c>)
 5a8:	6253      	str	r3, [r2, #36]	; 0x24
	
	while(0==(I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
 5aa:	1c11      	adds	r1, r2, #0
 5ac:	2201      	movs	r2, #1
 5ae:	7e0b      	ldrb	r3, [r1, #24]
 5b0:	4213      	tst	r3, r2
 5b2:	d0fc      	beq.n	5ae <i2c_busy+0xe>
	
	busy = (0 !=(I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK));
 5b4:	4b05      	ldr	r3, [pc, #20]	; (5cc <i2c_busy+0x2c>)
 5b6:	8b58      	ldrh	r0, [r3, #26]
	
	I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
 5b8:	685a      	ldr	r2, [r3, #4]
 5ba:	21c0      	movs	r1, #192	; 0xc0
 5bc:	0289      	lsls	r1, r1, #10
 5be:	430a      	orrs	r2, r1
 5c0:	605a      	str	r2, [r3, #4]
	
	I2C_SERCOM->I2CM.ADDR.reg = (i2c_address << 0x1ul) | I2C_TRANSFER_WRITE;
	
	while(0==(I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
	
	busy = (0 !=(I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK));
 5c2:	0740      	lsls	r0, r0, #29
	
	I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
	
	return busy;
 5c4:	0fc0      	lsrs	r0, r0, #31
}
 5c6:	4770      	bx	lr
 5c8:	20000478 	.word	0x20000478
 5cc:	42000800 	.word	0x42000800

000005d0 <main>:
#define TEST_DATA_AD		0xAD
#define TEST_DATA_BE		0xBE
#define TEST_DATA_EF		0xEF

int main(void)
{
 5d0:	b570      	push	{r4, r5, r6, lr}
    /* Initialize the SAM system */
    SystemInit();
 5d2:	4b1b      	ldr	r3, [pc, #108]	; (640 <main+0x70>)
 5d4:	4798      	blx	r3
	/*system clocks setup.*/
	init_clocks();
 5d6:	4b1b      	ldr	r3, [pc, #108]	; (644 <main+0x74>)
 5d8:	4798      	blx	r3
	
	/*init USART*/
	UART_sercom_init();
 5da:	4b1b      	ldr	r3, [pc, #108]	; (648 <main+0x78>)
 5dc:	4798      	blx	r3
	
	/*initiate transmition*/
	i2c_init(DEVICE_ADDRESS);
 5de:	2052      	movs	r0, #82	; 0x52
 5e0:	4b1a      	ldr	r3, [pc, #104]	; (64c <main+0x7c>)
 5e2:	4798      	blx	r3

	/*this section works, word write, writes 2x8byte words or 1 16byte word*/
	eeprom_write_word(0xBC,0x0000);
 5e4:	20bc      	movs	r0, #188	; 0xbc
 5e6:	2100      	movs	r1, #0
 5e8:	4b19      	ldr	r3, [pc, #100]	; (650 <main+0x80>)
 5ea:	4798      	blx	r3
	eeprom_read_word(data,0x0000);
 5ec:	4c19      	ldr	r4, [pc, #100]	; (654 <main+0x84>)
 5ee:	1c20      	adds	r0, r4, #0
 5f0:	2100      	movs	r1, #0
 5f2:	4b19      	ldr	r3, [pc, #100]	; (658 <main+0x88>)
 5f4:	4798      	blx	r3
	
	uart_write_byte(data[0]);
 5f6:	7820      	ldrb	r0, [r4, #0]
 5f8:	4b18      	ldr	r3, [pc, #96]	; (65c <main+0x8c>)
 5fa:	4798      	blx	r3
	send_string("\r\n");
 5fc:	4818      	ldr	r0, [pc, #96]	; (660 <main+0x90>)
 5fe:	4c19      	ldr	r4, [pc, #100]	; (664 <main+0x94>)
 600:	47a0      	blx	r4
	/*end*/
	
	/*page write block*/
	send_string("EEProm page write data: \r\n");
 602:	4819      	ldr	r0, [pc, #100]	; (668 <main+0x98>)
 604:	47a0      	blx	r4
 606:	4c19      	ldr	r4, [pc, #100]	; (66c <main+0x9c>)
 608:	1c26      	adds	r6, r4, #0
 60a:	3615      	adds	r6, #21
	for(int x = 0;x<=sizeof(page_test);x++)
	{
		uart_write_byte(page_test[x]);
 60c:	4d13      	ldr	r5, [pc, #76]	; (65c <main+0x8c>)
 60e:	7820      	ldrb	r0, [r4, #0]
 610:	47a8      	blx	r5
 612:	3401      	adds	r4, #1
	send_string("\r\n");
	/*end*/
	
	/*page write block*/
	send_string("EEProm page write data: \r\n");
	for(int x = 0;x<=sizeof(page_test);x++)
 614:	42b4      	cmp	r4, r6
 616:	d1fa      	bne.n	60e <main+0x3e>
 618:	e007      	b.n	62a <main+0x5a>
	
	uint8_t count = 0;
	for(int x = 0;x<=sizeof(page_test);x++)
	{
		//eeprom_page_read(data,0x0000);
		uart_write_byte(i2c_read_byte()>>count);
 61a:	47b0      	blx	r6
 61c:	4120      	asrs	r0, r4
 61e:	b2c0      	uxtb	r0, r0
 620:	47a8      	blx	r5
	/*read page and send to uart*/
	uint8_t temp[] = {};
	send_string("EEPProm Page data\n");
	
	uint8_t count = 0;
	for(int x = 0;x<=sizeof(page_test);x++)
 622:	3401      	adds	r4, #1
 624:	2c15      	cmp	r4, #21
 626:	d1f8      	bne.n	61a <main+0x4a>
		count = count + 1;
	}
	
    while (1) 
    {
    }
 628:	e7fe      	b.n	628 <main+0x58>
	send_string("EEProm page write data: \r\n");
	for(int x = 0;x<=sizeof(page_test);x++)
	{
		uart_write_byte(page_test[x]);
	}
	eeprom_page_write(page_test,0x0000);
 62a:	4810      	ldr	r0, [pc, #64]	; (66c <main+0x9c>)
 62c:	2100      	movs	r1, #0
 62e:	4b10      	ldr	r3, [pc, #64]	; (670 <main+0xa0>)
 630:	4798      	blx	r3
	
	/*end*/
	
	/*read page and send to uart*/
	uint8_t temp[] = {};
	send_string("EEPProm Page data\n");
 632:	4810      	ldr	r0, [pc, #64]	; (674 <main+0xa4>)
 634:	4b0b      	ldr	r3, [pc, #44]	; (664 <main+0x94>)
 636:	4798      	blx	r3
 638:	2400      	movs	r4, #0
	
	uint8_t count = 0;
	for(int x = 0;x<=sizeof(page_test);x++)
	{
		//eeprom_page_read(data,0x0000);
		uart_write_byte(i2c_read_byte()>>count);
 63a:	4e0f      	ldr	r6, [pc, #60]	; (678 <main+0xa8>)
 63c:	4d07      	ldr	r5, [pc, #28]	; (65c <main+0x8c>)
 63e:	e7ec      	b.n	61a <main+0x4a>
 640:	0000027d 	.word	0x0000027d
 644:	000000ed 	.word	0x000000ed
 648:	000006bd 	.word	0x000006bd
 64c:	000003f1 	.word	0x000003f1
 650:	000002b1 	.word	0x000002b1
 654:	20000470 	.word	0x20000470
 658:	00000355 	.word	0x00000355
 65c:	0000067d 	.word	0x0000067d
 660:	0000088c 	.word	0x0000088c
 664:	00000695 	.word	0x00000695
 668:	00000874 	.word	0x00000874
 66c:	20000004 	.word	0x20000004
 670:	000002fd 	.word	0x000002fd
 674:	00000890 	.word	0x00000890
 678:	00000501 	.word	0x00000501

0000067c <uart_write_byte>:
}

//write to the usart register.
void uart_write_byte(uint8_t data)
{
	while(!BOOT_SERCOM->USART.INTFLAG.bit.DRE);
 67c:	4904      	ldr	r1, [pc, #16]	; (690 <uart_write_byte+0x14>)
 67e:	2201      	movs	r2, #1
 680:	7e0b      	ldrb	r3, [r1, #24]
 682:	421a      	tst	r2, r3
 684:	d0fc      	beq.n	680 <uart_write_byte+0x4>
		}
		
		BOOT_SERCOM->USART.DATA.reg = (uint16_t)data;
	}
	#endif
	BOOT_SERCOM->USART.DATA.reg = (uint16_t)data;
 686:	b280      	uxth	r0, r0
 688:	4b01      	ldr	r3, [pc, #4]	; (690 <uart_write_byte+0x14>)
 68a:	8518      	strh	r0, [r3, #40]	; 0x28
	
}
 68c:	4770      	bx	lr
 68e:	46c0      	nop			; (mov r8, r8)
 690:	42000c00 	.word	0x42000c00

00000694 <send_string>:
	uart_write_byte('s');
}

/*send a char array and format as a string*/
void send_string(volatile char s[])
{
 694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t i;
	while(s[i] != 0x00)
 696:	7803      	ldrb	r3, [r0, #0]
 698:	2b00      	cmp	r3, #0
 69a:	d00c      	beq.n	6b6 <send_string+0x22>
 69c:	1c05      	adds	r5, r0, #0
 69e:	1c04      	adds	r4, r0, #0
	{
		uart_write_byte(s[i]);
 6a0:	4f05      	ldr	r7, [pc, #20]	; (6b8 <send_string+0x24>)
 6a2:	2301      	movs	r3, #1
 6a4:	1a1e      	subs	r6, r3, r0
 6a6:	7820      	ldrb	r0, [r4, #0]
 6a8:	b2c0      	uxtb	r0, r0
 6aa:	47b8      	blx	r7
 6ac:	19a4      	adds	r4, r4, r6
 6ae:	192c      	adds	r4, r5, r4

/*send a char array and format as a string*/
void send_string(volatile char s[])
{
	uint32_t i;
	while(s[i] != 0x00)
 6b0:	7823      	ldrb	r3, [r4, #0]
 6b2:	2b00      	cmp	r3, #0
 6b4:	d1f7      	bne.n	6a6 <send_string+0x12>
	{
		uart_write_byte(s[i]);
		i++;
	}
}
 6b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 6b8:	0000067d 	.word	0x0000067d

000006bc <UART_sercom_init>:
	return((uint8_t)(BOOT_SERCOM->USART.DATA.reg & 0x00FF));
}

/*init USART module on SERCOM1*/
void UART_sercom_init()
{
 6bc:	b510      	push	{r4, lr}
	//Pmux eve = n/1, odd = (n-1)/2
	#if defined(SAMD10)
		pin_set_peripheral_function(PINMUX_PA30C_SERCOM1_PAD0);
		pin_set_peripheral_function(PINMUX_PA31C_SERCOM1_PAD1);
	#else
		pin_set_peripheral_function(PINMUX_PA25C_SERCOM1_PAD3); // SAMD09 TX
 6be:	4809      	ldr	r0, [pc, #36]	; (6e4 <UART_sercom_init+0x28>)
 6c0:	4c09      	ldr	r4, [pc, #36]	; (6e8 <UART_sercom_init+0x2c>)
 6c2:	47a0      	blx	r4
		pin_set_peripheral_function(PINMUX_PA24C_SERCOM1_PAD2); // SAMD09 RX
 6c4:	4809      	ldr	r0, [pc, #36]	; (6ec <UART_sercom_init+0x30>)
 6c6:	47a0      	blx	r4
	
	
	//gclk config
	
	//Config SERCOM1 module for UART
	SERCOM1->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK | SERCOM_USART_CTRLA_DORD | SERCOM_USART_CTRLA_RXPO(0x3) | SERCOM_USART_CTRLA_TXPO(0x1);
 6c8:	4b09      	ldr	r3, [pc, #36]	; (6f0 <UART_sercom_init+0x34>)
 6ca:	4a0a      	ldr	r2, [pc, #40]	; (6f4 <UART_sercom_init+0x38>)
 6cc:	601a      	str	r2, [r3, #0]
	
	SERCOM1->USART.CTRLB.reg = SERCOM_USART_CTRLB_RXEN | SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_CHSIZE(0);
 6ce:	22c0      	movs	r2, #192	; 0xc0
 6d0:	0292      	lsls	r2, r2, #10
 6d2:	605a      	str	r2, [r3, #4]
	
	/*configure baud rate at 115200*/
	SERCOM1->USART.BAUD.reg = BAUD_VAL;
 6d4:	4a08      	ldr	r2, [pc, #32]	; (6f8 <UART_sercom_init+0x3c>)
 6d6:	819a      	strh	r2, [r3, #12]
	
	SERCOM1->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
 6d8:	6819      	ldr	r1, [r3, #0]
 6da:	2202      	movs	r2, #2
 6dc:	430a      	orrs	r2, r1
 6de:	601a      	str	r2, [r3, #0]
	
}
 6e0:	bd10      	pop	{r4, pc}
 6e2:	46c0      	nop			; (mov r8, r8)
 6e4:	00190002 	.word	0x00190002
 6e8:	000003a5 	.word	0x000003a5
 6ec:	00180002 	.word	0x00180002
 6f0:	42000c00 	.word	0x42000c00
 6f4:	40310004 	.word	0x40310004
 6f8:	ffffc504 	.word	0xffffc504

000006fc <__libc_init_array>:
 6fc:	b570      	push	{r4, r5, r6, lr}
 6fe:	4e0d      	ldr	r6, [pc, #52]	; (734 <__libc_init_array+0x38>)
 700:	4d0d      	ldr	r5, [pc, #52]	; (738 <__libc_init_array+0x3c>)
 702:	2400      	movs	r4, #0
 704:	1bad      	subs	r5, r5, r6
 706:	10ad      	asrs	r5, r5, #2
 708:	d005      	beq.n	716 <__libc_init_array+0x1a>
 70a:	00a3      	lsls	r3, r4, #2
 70c:	58f3      	ldr	r3, [r6, r3]
 70e:	3401      	adds	r4, #1
 710:	4798      	blx	r3
 712:	42a5      	cmp	r5, r4
 714:	d1f9      	bne.n	70a <__libc_init_array+0xe>
 716:	f000 f8c9 	bl	8ac <_init>
 71a:	4e08      	ldr	r6, [pc, #32]	; (73c <__libc_init_array+0x40>)
 71c:	4d08      	ldr	r5, [pc, #32]	; (740 <__libc_init_array+0x44>)
 71e:	2400      	movs	r4, #0
 720:	1bad      	subs	r5, r5, r6
 722:	10ad      	asrs	r5, r5, #2
 724:	d005      	beq.n	732 <__libc_init_array+0x36>
 726:	00a3      	lsls	r3, r4, #2
 728:	58f3      	ldr	r3, [r6, r3]
 72a:	3401      	adds	r4, #1
 72c:	4798      	blx	r3
 72e:	42a5      	cmp	r5, r4
 730:	d1f9      	bne.n	726 <__libc_init_array+0x2a>
 732:	bd70      	pop	{r4, r5, r6, pc}
 734:	000008b8 	.word	0x000008b8
 738:	000008b8 	.word	0x000008b8
 73c:	000008b8 	.word	0x000008b8
 740:	000008c0 	.word	0x000008c0

00000744 <register_fini>:
 744:	b508      	push	{r3, lr}
 746:	4b03      	ldr	r3, [pc, #12]	; (754 <register_fini+0x10>)
 748:	2b00      	cmp	r3, #0
 74a:	d002      	beq.n	752 <register_fini+0xe>
 74c:	4802      	ldr	r0, [pc, #8]	; (758 <register_fini+0x14>)
 74e:	f000 f805 	bl	75c <atexit>
 752:	bd08      	pop	{r3, pc}
 754:	00000000 	.word	0x00000000
 758:	0000076d 	.word	0x0000076d

0000075c <atexit>:
 75c:	b508      	push	{r3, lr}
 75e:	1c01      	adds	r1, r0, #0
 760:	2200      	movs	r2, #0
 762:	2000      	movs	r0, #0
 764:	2300      	movs	r3, #0
 766:	f000 f81b 	bl	7a0 <__register_exitproc>
 76a:	bd08      	pop	{r3, pc}

0000076c <__libc_fini_array>:
 76c:	b538      	push	{r3, r4, r5, lr}
 76e:	4b09      	ldr	r3, [pc, #36]	; (794 <__libc_fini_array+0x28>)
 770:	4c09      	ldr	r4, [pc, #36]	; (798 <__libc_fini_array+0x2c>)
 772:	1ae4      	subs	r4, r4, r3
 774:	10a4      	asrs	r4, r4, #2
 776:	d009      	beq.n	78c <__libc_fini_array+0x20>
 778:	4a08      	ldr	r2, [pc, #32]	; (79c <__libc_fini_array+0x30>)
 77a:	18a5      	adds	r5, r4, r2
 77c:	00ad      	lsls	r5, r5, #2
 77e:	18ed      	adds	r5, r5, r3
 780:	682b      	ldr	r3, [r5, #0]
 782:	3c01      	subs	r4, #1
 784:	4798      	blx	r3
 786:	3d04      	subs	r5, #4
 788:	2c00      	cmp	r4, #0
 78a:	d1f9      	bne.n	780 <__libc_fini_array+0x14>
 78c:	f000 f898 	bl	8c0 <_fini>
 790:	bd38      	pop	{r3, r4, r5, pc}
 792:	46c0      	nop			; (mov r8, r8)
 794:	000008cc 	.word	0x000008cc
 798:	000008d0 	.word	0x000008d0
 79c:	3fffffff 	.word	0x3fffffff

000007a0 <__register_exitproc>:
 7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 7a2:	4644      	mov	r4, r8
 7a4:	465f      	mov	r7, fp
 7a6:	4656      	mov	r6, sl
 7a8:	464d      	mov	r5, r9
 7aa:	469b      	mov	fp, r3
 7ac:	4b2f      	ldr	r3, [pc, #188]	; (86c <__register_exitproc+0xcc>)
 7ae:	b4f0      	push	{r4, r5, r6, r7}
 7b0:	681c      	ldr	r4, [r3, #0]
 7b2:	23a4      	movs	r3, #164	; 0xa4
 7b4:	005b      	lsls	r3, r3, #1
 7b6:	1c05      	adds	r5, r0, #0
 7b8:	58e0      	ldr	r0, [r4, r3]
 7ba:	1c0e      	adds	r6, r1, #0
 7bc:	4690      	mov	r8, r2
 7be:	2800      	cmp	r0, #0
 7c0:	d04b      	beq.n	85a <__register_exitproc+0xba>
 7c2:	6843      	ldr	r3, [r0, #4]
 7c4:	2b1f      	cmp	r3, #31
 7c6:	dc0d      	bgt.n	7e4 <__register_exitproc+0x44>
 7c8:	1c5c      	adds	r4, r3, #1
 7ca:	2d00      	cmp	r5, #0
 7cc:	d121      	bne.n	812 <__register_exitproc+0x72>
 7ce:	3302      	adds	r3, #2
 7d0:	009b      	lsls	r3, r3, #2
 7d2:	6044      	str	r4, [r0, #4]
 7d4:	501e      	str	r6, [r3, r0]
 7d6:	2000      	movs	r0, #0
 7d8:	bc3c      	pop	{r2, r3, r4, r5}
 7da:	4690      	mov	r8, r2
 7dc:	4699      	mov	r9, r3
 7de:	46a2      	mov	sl, r4
 7e0:	46ab      	mov	fp, r5
 7e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 7e4:	4b22      	ldr	r3, [pc, #136]	; (870 <__register_exitproc+0xd0>)
 7e6:	2b00      	cmp	r3, #0
 7e8:	d03c      	beq.n	864 <__register_exitproc+0xc4>
 7ea:	20c8      	movs	r0, #200	; 0xc8
 7ec:	0040      	lsls	r0, r0, #1
 7ee:	e000      	b.n	7f2 <__register_exitproc+0x52>
 7f0:	bf00      	nop
 7f2:	2800      	cmp	r0, #0
 7f4:	d036      	beq.n	864 <__register_exitproc+0xc4>
 7f6:	22a4      	movs	r2, #164	; 0xa4
 7f8:	2300      	movs	r3, #0
 7fa:	0052      	lsls	r2, r2, #1
 7fc:	58a1      	ldr	r1, [r4, r2]
 7fe:	6043      	str	r3, [r0, #4]
 800:	6001      	str	r1, [r0, #0]
 802:	50a0      	str	r0, [r4, r2]
 804:	3240      	adds	r2, #64	; 0x40
 806:	5083      	str	r3, [r0, r2]
 808:	3204      	adds	r2, #4
 80a:	5083      	str	r3, [r0, r2]
 80c:	2401      	movs	r4, #1
 80e:	2d00      	cmp	r5, #0
 810:	d0dd      	beq.n	7ce <__register_exitproc+0x2e>
 812:	009a      	lsls	r2, r3, #2
 814:	4691      	mov	r9, r2
 816:	4481      	add	r9, r0
 818:	4642      	mov	r2, r8
 81a:	2188      	movs	r1, #136	; 0x88
 81c:	464f      	mov	r7, r9
 81e:	507a      	str	r2, [r7, r1]
 820:	22c4      	movs	r2, #196	; 0xc4
 822:	0052      	lsls	r2, r2, #1
 824:	4690      	mov	r8, r2
 826:	4480      	add	r8, r0
 828:	4642      	mov	r2, r8
 82a:	3987      	subs	r1, #135	; 0x87
 82c:	4099      	lsls	r1, r3
 82e:	6812      	ldr	r2, [r2, #0]
 830:	468a      	mov	sl, r1
 832:	430a      	orrs	r2, r1
 834:	4694      	mov	ip, r2
 836:	4642      	mov	r2, r8
 838:	4661      	mov	r1, ip
 83a:	6011      	str	r1, [r2, #0]
 83c:	2284      	movs	r2, #132	; 0x84
 83e:	4649      	mov	r1, r9
 840:	465f      	mov	r7, fp
 842:	0052      	lsls	r2, r2, #1
 844:	508f      	str	r7, [r1, r2]
 846:	2d02      	cmp	r5, #2
 848:	d1c1      	bne.n	7ce <__register_exitproc+0x2e>
 84a:	1c02      	adds	r2, r0, #0
 84c:	4655      	mov	r5, sl
 84e:	328d      	adds	r2, #141	; 0x8d
 850:	32ff      	adds	r2, #255	; 0xff
 852:	6811      	ldr	r1, [r2, #0]
 854:	430d      	orrs	r5, r1
 856:	6015      	str	r5, [r2, #0]
 858:	e7b9      	b.n	7ce <__register_exitproc+0x2e>
 85a:	1c20      	adds	r0, r4, #0
 85c:	304d      	adds	r0, #77	; 0x4d
 85e:	30ff      	adds	r0, #255	; 0xff
 860:	50e0      	str	r0, [r4, r3]
 862:	e7ae      	b.n	7c2 <__register_exitproc+0x22>
 864:	2001      	movs	r0, #1
 866:	4240      	negs	r0, r0
 868:	e7b6      	b.n	7d8 <__register_exitproc+0x38>
 86a:	46c0      	nop			; (mov r8, r8)
 86c:	000008a8 	.word	0x000008a8
 870:	00000000 	.word	0x00000000
 874:	72504545 	.word	0x72504545
 878:	70206d6f 	.word	0x70206d6f
 87c:	20656761 	.word	0x20656761
 880:	74697277 	.word	0x74697277
 884:	61642065 	.word	0x61642065
 888:	203a6174 	.word	0x203a6174
 88c:	00000a0d 	.word	0x00000a0d
 890:	50504545 	.word	0x50504545
 894:	206d6f72 	.word	0x206d6f72
 898:	65676150 	.word	0x65676150
 89c:	74616420 	.word	0x74616420
 8a0:	00000a61 	.word	0x00000a61
 8a4:	00000043 	.word	0x00000043

000008a8 <_global_impure_ptr>:
 8a8:	20000028                                (.. 

000008ac <_init>:
 8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8ae:	46c0      	nop			; (mov r8, r8)
 8b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8b2:	bc08      	pop	{r3}
 8b4:	469e      	mov	lr, r3
 8b6:	4770      	bx	lr

000008b8 <__init_array_start>:
 8b8:	00000745 	.word	0x00000745

000008bc <__frame_dummy_init_array_entry>:
 8bc:	000000b5                                ....

000008c0 <_fini>:
 8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8c2:	46c0      	nop			; (mov r8, r8)
 8c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8c6:	bc08      	pop	{r3}
 8c8:	469e      	mov	lr, r3
 8ca:	4770      	bx	lr

000008cc <__fini_array_start>:
 8cc:	0000008d 	.word	0x0000008d
