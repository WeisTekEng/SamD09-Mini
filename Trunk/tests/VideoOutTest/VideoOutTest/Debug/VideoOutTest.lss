
VideoOutTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003a4  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000430  20000000  000003a4  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  20000430  000007d4  00010430  2**2
                  ALLOC
  3 .stack        00000404  2000044c  000007f0  00010430  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010430  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010458  2**0
                  CONTENTS, READONLY
  6 .debug_info   00002c04  00000000  00000000  000104b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004c1  00000000  00000000  000130b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000060  00000000  00000000  00013578  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000000a0  00000000  00000000  000135d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  00013678  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000b209  00000000  00000000  000136d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000017b5  00000000  00000000  0001e8e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0004085c  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000001e0  00000000  00000000  000608f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
   0:	20000850 	.word	0x20000850
   4:	000000f1 	.word	0x000000f1
   8:	000000ed 	.word	0x000000ed
   c:	000000ed 	.word	0x000000ed
	...
  2c:	000000ed 	.word	0x000000ed
	...
  38:	000000ed 	.word	0x000000ed
  3c:	000000ed 	.word	0x000000ed
  40:	000000ed 	.word	0x000000ed
  44:	000000ed 	.word	0x000000ed
  48:	000000ed 	.word	0x000000ed
  4c:	000000ed 	.word	0x000000ed
  50:	000000ed 	.word	0x000000ed
  54:	000000ed 	.word	0x000000ed
  58:	000000ed 	.word	0x000000ed
  5c:	00000000 	.word	0x00000000
  60:	000000ed 	.word	0x000000ed
  64:	000000ed 	.word	0x000000ed
  68:	000000ed 	.word	0x000000ed
	...
  74:	000001e9 	.word	0x000001e9
  78:	000000ed 	.word	0x000000ed
  7c:	000000ed 	.word	0x000000ed
	...
  88:	000000ed 	.word	0x000000ed

0000008c <__do_global_dtors_aux>:
  8c:	b510      	push	{r4, lr}
  8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
  90:	7823      	ldrb	r3, [r4, #0]
  92:	2b00      	cmp	r3, #0
  94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
  96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
  98:	2b00      	cmp	r3, #0
  9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
  9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
  9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
  a0:	bf00      	nop
  a2:	2301      	movs	r3, #1
  a4:	7023      	strb	r3, [r4, #0]
  a6:	bd10      	pop	{r4, pc}
  a8:	20000430 	.word	0x20000430
  ac:	00000000 	.word	0x00000000
  b0:	000003a4 	.word	0x000003a4

000000b4 <frame_dummy>:
  b4:	b508      	push	{r3, lr}
  b6:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
  b8:	2b00      	cmp	r3, #0
  ba:	d003      	beq.n	c4 <frame_dummy+0x10>
  bc:	4807      	ldr	r0, [pc, #28]	; (dc <frame_dummy+0x28>)
  be:	4908      	ldr	r1, [pc, #32]	; (e0 <frame_dummy+0x2c>)
  c0:	e000      	b.n	c4 <frame_dummy+0x10>
  c2:	bf00      	nop
  c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
  c6:	6803      	ldr	r3, [r0, #0]
  c8:	2b00      	cmp	r3, #0
  ca:	d100      	bne.n	ce <frame_dummy+0x1a>
  cc:	bd08      	pop	{r3, pc}
  ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
  d0:	2b00      	cmp	r3, #0
  d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
  d4:	4798      	blx	r3
  d6:	e7f9      	b.n	cc <frame_dummy+0x18>
  d8:	00000000 	.word	0x00000000
  dc:	000003a4 	.word	0x000003a4
  e0:	20000434 	.word	0x20000434
  e4:	000003a4 	.word	0x000003a4
  e8:	00000000 	.word	0x00000000

000000ec <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
  ec:	e7fe      	b.n	ec <Dummy_Handler>
  ee:	46c0      	nop			; (mov r8, r8)

000000f0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  f0:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  f2:	4b2b      	ldr	r3, [pc, #172]	; (1a0 <Reset_Handler+0xb0>)
  f4:	4a2b      	ldr	r2, [pc, #172]	; (1a4 <Reset_Handler+0xb4>)
  f6:	429a      	cmp	r2, r3
  f8:	d003      	beq.n	102 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
  fa:	4b2b      	ldr	r3, [pc, #172]	; (1a8 <Reset_Handler+0xb8>)
  fc:	4a28      	ldr	r2, [pc, #160]	; (1a0 <Reset_Handler+0xb0>)
  fe:	429a      	cmp	r2, r3
 100:	d304      	bcc.n	10c <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 102:	4b2a      	ldr	r3, [pc, #168]	; (1ac <Reset_Handler+0xbc>)
 104:	4a2a      	ldr	r2, [pc, #168]	; (1b0 <Reset_Handler+0xc0>)
 106:	429a      	cmp	r2, r3
 108:	d310      	bcc.n	12c <Reset_Handler+0x3c>
 10a:	e01e      	b.n	14a <Reset_Handler+0x5a>
 10c:	4a29      	ldr	r2, [pc, #164]	; (1b4 <Reset_Handler+0xc4>)
 10e:	4b26      	ldr	r3, [pc, #152]	; (1a8 <Reset_Handler+0xb8>)
 110:	3303      	adds	r3, #3
 112:	1a9b      	subs	r3, r3, r2
 114:	089b      	lsrs	r3, r3, #2
 116:	3301      	adds	r3, #1
 118:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 11a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 11c:	4820      	ldr	r0, [pc, #128]	; (1a0 <Reset_Handler+0xb0>)
 11e:	4921      	ldr	r1, [pc, #132]	; (1a4 <Reset_Handler+0xb4>)
 120:	588c      	ldr	r4, [r1, r2]
 122:	5084      	str	r4, [r0, r2]
 124:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 126:	429a      	cmp	r2, r3
 128:	d1fa      	bne.n	120 <Reset_Handler+0x30>
 12a:	e7ea      	b.n	102 <Reset_Handler+0x12>
 12c:	4a22      	ldr	r2, [pc, #136]	; (1b8 <Reset_Handler+0xc8>)
 12e:	4b1f      	ldr	r3, [pc, #124]	; (1ac <Reset_Handler+0xbc>)
 130:	3303      	adds	r3, #3
 132:	1a9b      	subs	r3, r3, r2
 134:	089b      	lsrs	r3, r3, #2
 136:	3301      	adds	r3, #1
 138:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 13a:	2200      	movs	r2, #0
                *pDest++ = 0;
 13c:	481c      	ldr	r0, [pc, #112]	; (1b0 <Reset_Handler+0xc0>)
 13e:	2100      	movs	r1, #0
 140:	1814      	adds	r4, r2, r0
 142:	6021      	str	r1, [r4, #0]
 144:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 146:	429a      	cmp	r2, r3
 148:	d1fa      	bne.n	140 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 14a:	4a1c      	ldr	r2, [pc, #112]	; (1bc <Reset_Handler+0xcc>)
 14c:	21ff      	movs	r1, #255	; 0xff
 14e:	4b1c      	ldr	r3, [pc, #112]	; (1c0 <Reset_Handler+0xd0>)
 150:	438b      	bics	r3, r1
 152:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 154:	39fd      	subs	r1, #253	; 0xfd
 156:	2390      	movs	r3, #144	; 0x90
 158:	005b      	lsls	r3, r3, #1
 15a:	4a1a      	ldr	r2, [pc, #104]	; (1c4 <Reset_Handler+0xd4>)
 15c:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
 15e:	4b1a      	ldr	r3, [pc, #104]	; (1c8 <Reset_Handler+0xd8>)
 160:	7b9a      	ldrb	r2, [r3, #14]
 162:	312e      	adds	r1, #46	; 0x2e
 164:	438a      	bics	r2, r1
 166:	1c11      	adds	r1, r2, #0
 168:	2220      	movs	r2, #32
 16a:	430a      	orrs	r2, r1
 16c:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 16e:	7b9a      	ldrb	r2, [r3, #14]
 170:	210c      	movs	r1, #12
 172:	438a      	bics	r2, r1
 174:	1c11      	adds	r1, r2, #0
 176:	2208      	movs	r2, #8
 178:	430a      	orrs	r2, r1
 17a:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 17c:	7b9a      	ldrb	r2, [r3, #14]
 17e:	2103      	movs	r1, #3
 180:	438a      	bics	r2, r1
 182:	1c11      	adds	r1, r2, #0
 184:	2202      	movs	r2, #2
 186:	430a      	orrs	r2, r1
 188:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
 18a:	4a10      	ldr	r2, [pc, #64]	; (1cc <Reset_Handler+0xdc>)
 18c:	6851      	ldr	r1, [r2, #4]
 18e:	2380      	movs	r3, #128	; 0x80
 190:	430b      	orrs	r3, r1
 192:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
 194:	4b0e      	ldr	r3, [pc, #56]	; (1d0 <Reset_Handler+0xe0>)
 196:	4798      	blx	r3

        /* Branch to main function */
        main();
 198:	4b0e      	ldr	r3, [pc, #56]	; (1d4 <Reset_Handler+0xe4>)
 19a:	4798      	blx	r3

        /* Infinite loop */
        while (1);
 19c:	e7fe      	b.n	19c <Reset_Handler+0xac>
 19e:	46c0      	nop			; (mov r8, r8)
 1a0:	20000000 	.word	0x20000000
 1a4:	000003a4 	.word	0x000003a4
 1a8:	20000430 	.word	0x20000430
 1ac:	2000044c 	.word	0x2000044c
 1b0:	20000430 	.word	0x20000430
 1b4:	20000004 	.word	0x20000004
 1b8:	20000434 	.word	0x20000434
 1bc:	e000ed00 	.word	0xe000ed00
 1c0:	00000000 	.word	0x00000000
 1c4:	41007000 	.word	0x41007000
 1c8:	41004800 	.word	0x41004800
 1cc:	41004000 	.word	0x41004000
 1d0:	00000201 	.word	0x00000201
 1d4:	000001f5 	.word	0x000001f5

000001d8 <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
 1d8:	4a01      	ldr	r2, [pc, #4]	; (1e0 <SystemInit+0x8>)
 1da:	4b02      	ldr	r3, [pc, #8]	; (1e4 <SystemInit+0xc>)
 1dc:	601a      	str	r2, [r3, #0]
	return;
}
 1de:	4770      	bx	lr
 1e0:	000f4240 	.word	0x000f4240
 1e4:	20000000 	.word	0x20000000

000001e8 <TC1_Handler>:

//Handlers
void TC1_Handler()
{
	//REG_PORT_OUTTGL0 = PORT_PA11;			// internal command to toggle pin.
	REG_TC1_INTFLAG = TC_INTFLAG_OVF;		// reset interrupt flag
 1e8:	2201      	movs	r2, #1
 1ea:	4b01      	ldr	r3, [pc, #4]	; (1f0 <TC1_Handler+0x8>)
 1ec:	701a      	strb	r2, [r3, #0]
}
 1ee:	4770      	bx	lr
 1f0:	4200180e 	.word	0x4200180e

000001f4 <main>:
#include "Libs/Includes.h"

void TC1_Handler();

int main(void)
{
 1f4:	b508      	push	{r3, lr}
    /* Initialize the SAM system */
    SystemInit();
 1f6:	4b01      	ldr	r3, [pc, #4]	; (1fc <main+0x8>)
 1f8:	4798      	blx	r3
#include "sam.h"
#include "Libs/Includes.h"

void TC1_Handler();

int main(void)
 1fa:	e7fe      	b.n	1fa <main+0x6>
 1fc:	000001d9 	.word	0x000001d9

00000200 <__libc_init_array>:
 200:	b570      	push	{r4, r5, r6, lr}
 202:	4e0d      	ldr	r6, [pc, #52]	; (238 <__libc_init_array+0x38>)
 204:	4d0d      	ldr	r5, [pc, #52]	; (23c <__libc_init_array+0x3c>)
 206:	2400      	movs	r4, #0
 208:	1bad      	subs	r5, r5, r6
 20a:	10ad      	asrs	r5, r5, #2
 20c:	d005      	beq.n	21a <__libc_init_array+0x1a>
 20e:	00a3      	lsls	r3, r4, #2
 210:	58f3      	ldr	r3, [r6, r3]
 212:	3401      	adds	r4, #1
 214:	4798      	blx	r3
 216:	42a5      	cmp	r5, r4
 218:	d1f9      	bne.n	20e <__libc_init_array+0xe>
 21a:	f000 f8b1 	bl	380 <_init>
 21e:	4e08      	ldr	r6, [pc, #32]	; (240 <__libc_init_array+0x40>)
 220:	4d08      	ldr	r5, [pc, #32]	; (244 <__libc_init_array+0x44>)
 222:	2400      	movs	r4, #0
 224:	1bad      	subs	r5, r5, r6
 226:	10ad      	asrs	r5, r5, #2
 228:	d005      	beq.n	236 <__libc_init_array+0x36>
 22a:	00a3      	lsls	r3, r4, #2
 22c:	58f3      	ldr	r3, [r6, r3]
 22e:	3401      	adds	r4, #1
 230:	4798      	blx	r3
 232:	42a5      	cmp	r5, r4
 234:	d1f9      	bne.n	22a <__libc_init_array+0x2a>
 236:	bd70      	pop	{r4, r5, r6, pc}
 238:	0000038c 	.word	0x0000038c
 23c:	0000038c 	.word	0x0000038c
 240:	0000038c 	.word	0x0000038c
 244:	00000394 	.word	0x00000394

00000248 <register_fini>:
 248:	b508      	push	{r3, lr}
 24a:	4b03      	ldr	r3, [pc, #12]	; (258 <register_fini+0x10>)
 24c:	2b00      	cmp	r3, #0
 24e:	d002      	beq.n	256 <register_fini+0xe>
 250:	4802      	ldr	r0, [pc, #8]	; (25c <register_fini+0x14>)
 252:	f000 f805 	bl	260 <atexit>
 256:	bd08      	pop	{r3, pc}
 258:	00000000 	.word	0x00000000
 25c:	00000271 	.word	0x00000271

00000260 <atexit>:
 260:	b508      	push	{r3, lr}
 262:	1c01      	adds	r1, r0, #0
 264:	2200      	movs	r2, #0
 266:	2000      	movs	r0, #0
 268:	2300      	movs	r3, #0
 26a:	f000 f81b 	bl	2a4 <__register_exitproc>
 26e:	bd08      	pop	{r3, pc}

00000270 <__libc_fini_array>:
 270:	b538      	push	{r3, r4, r5, lr}
 272:	4b09      	ldr	r3, [pc, #36]	; (298 <__libc_fini_array+0x28>)
 274:	4c09      	ldr	r4, [pc, #36]	; (29c <__libc_fini_array+0x2c>)
 276:	1ae4      	subs	r4, r4, r3
 278:	10a4      	asrs	r4, r4, #2
 27a:	d009      	beq.n	290 <__libc_fini_array+0x20>
 27c:	4a08      	ldr	r2, [pc, #32]	; (2a0 <__libc_fini_array+0x30>)
 27e:	18a5      	adds	r5, r4, r2
 280:	00ad      	lsls	r5, r5, #2
 282:	18ed      	adds	r5, r5, r3
 284:	682b      	ldr	r3, [r5, #0]
 286:	3c01      	subs	r4, #1
 288:	4798      	blx	r3
 28a:	3d04      	subs	r5, #4
 28c:	2c00      	cmp	r4, #0
 28e:	d1f9      	bne.n	284 <__libc_fini_array+0x14>
 290:	f000 f880 	bl	394 <_fini>
 294:	bd38      	pop	{r3, r4, r5, pc}
 296:	46c0      	nop			; (mov r8, r8)
 298:	000003a0 	.word	0x000003a0
 29c:	000003a4 	.word	0x000003a4
 2a0:	3fffffff 	.word	0x3fffffff

000002a4 <__register_exitproc>:
 2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 2a6:	4644      	mov	r4, r8
 2a8:	465f      	mov	r7, fp
 2aa:	4656      	mov	r6, sl
 2ac:	464d      	mov	r5, r9
 2ae:	469b      	mov	fp, r3
 2b0:	4b2f      	ldr	r3, [pc, #188]	; (370 <__register_exitproc+0xcc>)
 2b2:	b4f0      	push	{r4, r5, r6, r7}
 2b4:	681c      	ldr	r4, [r3, #0]
 2b6:	23a4      	movs	r3, #164	; 0xa4
 2b8:	005b      	lsls	r3, r3, #1
 2ba:	1c05      	adds	r5, r0, #0
 2bc:	58e0      	ldr	r0, [r4, r3]
 2be:	1c0e      	adds	r6, r1, #0
 2c0:	4690      	mov	r8, r2
 2c2:	2800      	cmp	r0, #0
 2c4:	d04b      	beq.n	35e <__register_exitproc+0xba>
 2c6:	6843      	ldr	r3, [r0, #4]
 2c8:	2b1f      	cmp	r3, #31
 2ca:	dc0d      	bgt.n	2e8 <__register_exitproc+0x44>
 2cc:	1c5c      	adds	r4, r3, #1
 2ce:	2d00      	cmp	r5, #0
 2d0:	d121      	bne.n	316 <__register_exitproc+0x72>
 2d2:	3302      	adds	r3, #2
 2d4:	009b      	lsls	r3, r3, #2
 2d6:	6044      	str	r4, [r0, #4]
 2d8:	501e      	str	r6, [r3, r0]
 2da:	2000      	movs	r0, #0
 2dc:	bc3c      	pop	{r2, r3, r4, r5}
 2de:	4690      	mov	r8, r2
 2e0:	4699      	mov	r9, r3
 2e2:	46a2      	mov	sl, r4
 2e4:	46ab      	mov	fp, r5
 2e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 2e8:	4b22      	ldr	r3, [pc, #136]	; (374 <__register_exitproc+0xd0>)
 2ea:	2b00      	cmp	r3, #0
 2ec:	d03c      	beq.n	368 <__register_exitproc+0xc4>
 2ee:	20c8      	movs	r0, #200	; 0xc8
 2f0:	0040      	lsls	r0, r0, #1
 2f2:	e000      	b.n	2f6 <__register_exitproc+0x52>
 2f4:	bf00      	nop
 2f6:	2800      	cmp	r0, #0
 2f8:	d036      	beq.n	368 <__register_exitproc+0xc4>
 2fa:	22a4      	movs	r2, #164	; 0xa4
 2fc:	2300      	movs	r3, #0
 2fe:	0052      	lsls	r2, r2, #1
 300:	58a1      	ldr	r1, [r4, r2]
 302:	6043      	str	r3, [r0, #4]
 304:	6001      	str	r1, [r0, #0]
 306:	50a0      	str	r0, [r4, r2]
 308:	3240      	adds	r2, #64	; 0x40
 30a:	5083      	str	r3, [r0, r2]
 30c:	3204      	adds	r2, #4
 30e:	5083      	str	r3, [r0, r2]
 310:	2401      	movs	r4, #1
 312:	2d00      	cmp	r5, #0
 314:	d0dd      	beq.n	2d2 <__register_exitproc+0x2e>
 316:	009a      	lsls	r2, r3, #2
 318:	4691      	mov	r9, r2
 31a:	4481      	add	r9, r0
 31c:	4642      	mov	r2, r8
 31e:	2188      	movs	r1, #136	; 0x88
 320:	464f      	mov	r7, r9
 322:	507a      	str	r2, [r7, r1]
 324:	22c4      	movs	r2, #196	; 0xc4
 326:	0052      	lsls	r2, r2, #1
 328:	4690      	mov	r8, r2
 32a:	4480      	add	r8, r0
 32c:	4642      	mov	r2, r8
 32e:	3987      	subs	r1, #135	; 0x87
 330:	4099      	lsls	r1, r3
 332:	6812      	ldr	r2, [r2, #0]
 334:	468a      	mov	sl, r1
 336:	430a      	orrs	r2, r1
 338:	4694      	mov	ip, r2
 33a:	4642      	mov	r2, r8
 33c:	4661      	mov	r1, ip
 33e:	6011      	str	r1, [r2, #0]
 340:	2284      	movs	r2, #132	; 0x84
 342:	4649      	mov	r1, r9
 344:	465f      	mov	r7, fp
 346:	0052      	lsls	r2, r2, #1
 348:	508f      	str	r7, [r1, r2]
 34a:	2d02      	cmp	r5, #2
 34c:	d1c1      	bne.n	2d2 <__register_exitproc+0x2e>
 34e:	1c02      	adds	r2, r0, #0
 350:	4655      	mov	r5, sl
 352:	328d      	adds	r2, #141	; 0x8d
 354:	32ff      	adds	r2, #255	; 0xff
 356:	6811      	ldr	r1, [r2, #0]
 358:	430d      	orrs	r5, r1
 35a:	6015      	str	r5, [r2, #0]
 35c:	e7b9      	b.n	2d2 <__register_exitproc+0x2e>
 35e:	1c20      	adds	r0, r4, #0
 360:	304d      	adds	r0, #77	; 0x4d
 362:	30ff      	adds	r0, #255	; 0xff
 364:	50e0      	str	r0, [r4, r3]
 366:	e7ae      	b.n	2c6 <__register_exitproc+0x22>
 368:	2001      	movs	r0, #1
 36a:	4240      	negs	r0, r0
 36c:	e7b6      	b.n	2dc <__register_exitproc+0x38>
 36e:	46c0      	nop			; (mov r8, r8)
 370:	0000037c 	.word	0x0000037c
 374:	00000000 	.word	0x00000000
 378:	00000043 	.word	0x00000043

0000037c <_global_impure_ptr>:
 37c:	20000008                                ... 

00000380 <_init>:
 380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 382:	46c0      	nop			; (mov r8, r8)
 384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 386:	bc08      	pop	{r3}
 388:	469e      	mov	lr, r3
 38a:	4770      	bx	lr

0000038c <__init_array_start>:
 38c:	00000249 	.word	0x00000249

00000390 <__frame_dummy_init_array_entry>:
 390:	000000b5                                ....

00000394 <_fini>:
 394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 396:	46c0      	nop			; (mov r8, r8)
 398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 39a:	bc08      	pop	{r3}
 39c:	469e      	mov	lr, r3
 39e:	4770      	bx	lr

000003a0 <__fini_array_start>:
 3a0:	0000008d 	.word	0x0000008d
